#!/bin/bash
#################################
# ----------------------------- #
#         Easy Gentoo           #
# ----------------------------- #
# a small Gentoo install script #
#              by               #
#        Åžehidcan Erdim         #
# sehidcan (at) gmail (dot) com #
#################################

normal=$'\e[0m'; red=$'\e[31;01m'; green=$'\e[32;01m'; yellow=$'\e[33;01m'
blue=$'\e[34;01m'; pink=$'\e[35;01m'; cyan=$'\e[36;01m'; white=$'\e[37;01m'

en() { echo "${normal}${*}${normal}";} ; er() { echo "${red}${*}${normal}";}
eg() { echo "${green}${*}${normal}";} ; ey() { echo "${yellow}${*}${normal}";}
eb() { echo "${blue}${*}${normal}";} ; ep() { echo "${pink}${*}${normal}";}
ec() { echo "${cyan}${*}${normal}";} ; ew() { echo "${white}${*}${normal}";}

en2() { echo -n "${normal}${*}${normal}";} ; er2() { echo -n "${red}${*}${normal}";}
eg2() { echo -n "${green}${*}${normal}";} ; ey2() { echo -n "${yellow}${*}${normal}";}
eb2() { echo -n "${blue}${*}${normal}";} ; ep2() { echo -n "${pink}${*}${normal}";}
ec2() { echo -n "${cyan}${*}${normal}";} ; ew2() { echo -n "${white}${*}${normal}";}

cl() { clear; echo;}

exist() {
    which ${1} &>/dev/null && { ey2 "  * "; eb2 "${1}"; en " exists"; sleep 0.2s; } || { er2 "  * "; eb2 "${1}"; er " doesn't exist"; er "Some tools are missing - Please use a different install media/environment"
    echo; exit 1; }
}

find_flags() {
    cpu_inst="$(grep flags /proc/cpuinfo | uniq | tr -s '[:blank:]' ' ' | cut -d':' -f2)"
    flags_list="3dnow 3dnowext mmx mmxext sse sse2 sse3 sse4 sse4a sse4_1 sse4_2 sse5 ssse3"

    for v in ${flags_list}
    do
        echo "${cpu_inst}" | grep -o -w "${v}" >> flags.eg
    done

    echo "${cpu_inst}" | grep -o -w "pni" &>/dev/null && echo "sse3" >> flags.eg

    a2v "available_cpu_flags=\"$(tr '\n' ' ' < flags.eg | sed -e 's:^[ \t]*::' -e 's:[ \t]*$::')\""
}

fl() {
    trg_file="${1}"
    
    mkdir -p "$(dirname ${trg_file})"
    
    if [ -e "${trg_file}" ]; then
        case ${2} in
        b)
            cp "${trg_file}" "${trg_file}".backup
        ;;
        esac
        
        case ${3} in
        d)
            rm -rf "${trg_file}"
        ;;
        esac
    else
        touch "${trg_file}"
    fi
}

avoid_dup() {
    if [ -n "${@}" ] && [ -n "${trg_file}" ]; then
        allofit="${@}"
        nameonly="$(echo ${allofit} | cut -d'=' -f1)"
        if [ -n "$(grep ^${nameonly} ${trg_file})" ];then
            sed -i s:"^${nameonly}=.*":"${allofit}": ${trg_file}
        else
            echo "${allofit}" >> ${trg_file}
        fi
    fi
}

avoid_dup_kernel() {
    if [ -n "${@}" ] && [ -n "${trg_file}" ]; then
        allofit="${@}"
        nameonly="$(echo ${allofit} | cut -d'=' -f1)"
        sed -i "\!^#.*${nameonly}.*!d" ${trg_file}
        sed -i "\!^${nameonly}=.*!d" ${trg_file}
        echo "${allofit}" >> ${trg_file}
    fi
}

cf() {
    [[ -n "${trg_file}" ]] && echo "$@" >> ${trg_file}
}

a2v() {
    echo "export $@" >> "${vl}"; vlist
}

csum() {
    md5sum -c $1
    case $? in
    0)
        check="ok"; csn="1"; sleep 1s
    ;;
    *)
        ((csn++))
        case ${csn} in
        3)
            echo; er "  Looks like the server has a corrupted version of the file or there is a technical problem."
            echo; er2 "  Press "; eg2 "c"; er " to ignore and try again."
            eg2 "s"; er " to cancel setup..."; echo
            
            while true
            do
                read -n1 islem
                case ${islem} in
                c)
                    check="ok"; csn="1"; break
                ;;
                s)
                    exit 1
                ;;
                esac
            done
        ;;
        *)
            check="x"; rm -rf $2; echo; er "  File is outdated or corrupted."
        esac
    ;;
    esac
}

shasum() {
    sha512sum -c $1
    case $? in
    0)
        check="ok"; ssn="1"; sleep 1s
    ;;
    *)
        ((ssn++))
        case ${ssn} in
        3)
            echo; er "  Looks like the server has a corrupted version of the file or there is a technical problem."
            echo; er2 "  Press "; eg2 "c"; er " to ignore and try again."
            eg2 "s"; er " to cancel setup..."; echo
            
            while true
            do
                read -n1 islem
                case ${islem} in
                c)
                    check="ok"; ssn="1"; break
                ;;
                s)
                    exit 1
                ;;
                esac
            done
        ;;
        *)
            check="x"; rm -rf $2; echo; er "  File is outdated or corrupted."
        esac
    ;;
    esac
}

tch() {
    f2t="${1}"
    [[ ! -e "${f2t}" ]] && touch "${f2t}"
    unset f2t
}

dlt() {
    f2d="${1}"
    [[ -e "${f2d}" ]] && rm -rf "${f2d}"
    unset f2d
}

on_off() {
    while true
    do
        [[ "$(ps a -o cmd | grep ${eg} | grep -v grep)" ]] && sleep 30s || { tch stop.eg; break; }
    done
}

net_watch() {
    until [ -e "stop.eg" ]
    do
        [[ "$(ping -nc3 -i2 www.google.com)" ]] && sleep 60s || { dlt "connected.eg"; connect_me; }
    done
}

mirror_check() {
    until [ -e "connected.eg" ]
    do
        sleep 1s
    done
    
    [[ "$(grep '^export mirror=' ${vl})" ]] && sed -i '\!^export mirror=!d' ${vl}
    
    for mrr in ${mirrorlist}
    do
        # Trimming mirror name. Ex. http://gentoo.kiev.ua/ftp -->> gentoo.kiev.ua
        [[ "$(ping -nc3 -i2 $(echo ${mrr} | sed -e 's/.*\:\/\///' -e 's/\/.*$//'))" ]] && { a2v "mirror=\"${mrr}\""; break; }
    done
    
    # Cancel setup when there are no available mirrors
    [[ "$(grep 'mirror=' ${vl})" ]] || tch stop.eg
}

connect_me() {
    unset adapter trm pid
    killall ping dhcpcd ifconfig ip
    killall ping dhcpcd ifconfig ip
    killall ping dhcpcd ifconfig ip
    
    if [ "${autonet}" == "yes" ]; then
        for adapter in ${adapters_found}
        do
            which ip &>/dev/null && { ip link set ${adapter} down &>/dev/null; ip link set ${adapter} up &>/dev/null; } || { 
            ifconfig ${adapter} down &>/dev/null; ifconfig ${adapter} up &>/dev/null; }
            dlt "/var/run/dhcpcd-${adapter}.pid"
            sleep 3s; dhcpcd ${adapter}; sleep 7s
            [[ "$(ping -nc3 -i2 www.google.com)" ]] && tch "connected.eg"; break
        done
    else
        while [ ! "$(ping -nc3 -i2 www.google.com)" ]
        do
            echo; er "Looks like your internet connection is down. Please fix it using another console (Alt + Function Keys)."
            er "Waiting for 30 seconds before retry..."; echo; sleep 30s
        done
        tch "connected.eg"
    fi
}

mrg() {
    CONFIG_PROTECT_MASK="/etc" emerge $@ 2> /dev/null
}

umrg() {
    cl; eb2 "* "; eg2 "emerge "; er "--unmerge ${@}"
    for p in $@
    do
        CONFIG_PROTECT_MASK="/etc" emerge --unmerge ${p} 2> /dev/null && { sed -i "\!.*/${p}.*!d" ${compiled}; sed -i "\!.*/${p}.*!d" pkglist.eg; }
    done
}

get_files() {
    lnk="$@"
    bname="$(basename $(echo ${lnk} | sed -e 's:^.*\:\/\/::' -e 's: .*::'))"
    
    while true
    do
        shut
        
        if [ -n "$(echo ${lnk} | grep -iv 'digest' | grep -iv 'md5' | grep 'tar.bz2')" ]; then
            wget --timeout=15 --tries=2 --waitretry=5 ${lnk} -O ${bname}
        else
            wget --timeout=15 --tries=2 --waitretry=5 ${lnk} -O ${bname} &>/dev/null
        fi
        
        case $? in
        0)
            break
        ;;
        *)
            mirror_check
        ;;
        esac
    done
    
    [[ -e "stop.eg" ]] && { echo; er "There are no available mirrors or setup was cancelled."; er "Exiting..."; echo; exit 1; }
}

inst() {
    make_list() {
        fl "pkglist.eg" "0" "d"
        
        while read line
        do
            case "${line}" in
            "[ebuild"*)
                echo "${line}" | tr -s '[:blank:]' ' ' | sed -e 's:\[[0-9].*\]::' -e 's:\[.*ebuild.*\] :=:' -e 's: .*::' >> ${trg_file}
            ;;
            esac
        done < data.eg
        
        while read p_line
        do
            case ${p_line} in
            =[A-Z]*/*|=[a-z]*/*)
                continue
            ;;
            *)
                sed -i "\!.*${p_line}.*!d" ${trg_file}
            ;;
            esac
        done < ${trg_file}
        
        fl "pkglist_dup.eg" "0" "d"
        cp pkglist.eg ${trg_file}
        
        case "${a}" in
        "-e system")
            emerge -pv --nodeps gentoo-sources | grep ebuild | grep gentoo-sources | tr -s '[:blank:]' ' ' | sed -e 's:\[[0-9].*\]::' -e 's:\[.*ebuild.*\] :=:' -e 's: .*::' >> ${trg_file}
            emerge -pv --nodeps genkernel | grep ebuild | grep genkernel | tr -s '[:blank:]' ' ' | sed -e 's:\[[0-9].*\]::' -e 's:\[.*ebuild.*\] :=:' -e 's: .*::' >> ${trg_file}
        ;;
        esac
        
        fl "fetched.eg" "0" "d"
        tch ${trg_file}
    }
    
    fetch() {
        pkill -f 'emerge -f --nodeps'
        while true
        do
            shut
            
            read -r pkg < pkglist_dup.eg
            if [ -z "${pkg}" ]; then
                break
            else
                case "${pkg}" in
                *"/"*)
                    next="no"
                    while [ "${next}" != "yes" ]
                    do
                        CONFIG_PROTECT_MASK="/etc" emerge -f --nodeps ${pkg} 2> /dev/null
                        
                        case $? in
                        0)
                            cf "${pkg}"; next="yes"
                        ;;
                        *)
                            pkill -f 'emerge -f --nodeps'
                            if [ -e "connected.eg" ]; then
                                pkill -f 'emerge --quiet --sync'
                                inst "sync"
                            else
                                until [ -e "connected.eg" ]
                                do
                                    sleep 1s
                                done
                            fi
                        ;;
                        esac
                    done
                    sleep 1s
                ;;
                esac
            
                sed -i "\!.*${pkg}.*!d" pkglist_dup.eg
            fi
        done
    }
    
    compile() {
        rcount="0"
        fl "pkglist.eg" "0" "0"
        while true
        do
            read -r package < ${trg_file}
            
            if [ -z "${package}" ]; then
                break
            else
                if [ -e "${trg_file}" ]; then
                    cl
                    source "$(pwd)/merge.eg"
                    
                    [[ -n "${step}" ]] && echo "${step}"
                    
                    echo; ey2 "  Command: "; eg2 "  emerge "; er "${a}"
                    echo; eg2 "  Next packages "; ew2 "($(wc -l < ${trg_file}) packages total)"; eg ":"
                    
                    p_numb="1"
                    while read p_input
                    do
                        p_input="$(echo ${p_input} | cut -c 2-)"
                        case ${p_numb} in
                        1)
                            ey "    ${p_input}"
                        ;;
                        [2-5])
                            ew "    ${p_input}"
                        ;;
                        6)
                            break
                        ;;
                        esac
                        ((p_numb++))
                    done < ${trg_file}
                    
                    echo
                    
                    if [ -z "$(grep ${package} fetched.eg)" ]; then
                        echo; ew2 "  Waiting for package download..."
                        while [ -z "$(grep ${package} fetched.eg)" ]
                        do
                            sleep 5s
                            shut
                        done
                        ew "  Package downloaded."; echo
                    else
                        echo; echo
                    fi
                fi
                
                shut
                
                case ${package} in
                *sys-apps/kmod-*)
                    umrg "module-init-tools"
                ;;
                *sys-apps/systemd-*)
                    umrg "udev"
                ;;
                esac
                
                if [ -e "sys.eg" ]; then
                    mrg -e --oneshot --nodeps ${package}
                else
                    if [ -n "$(grep $(echo ${package} | cut -c 2-) ${compiled})" ]; then
                        mrg -u --oneshot --nodeps ${package}
                    else
                        mrg --oneshot --nodeps ${package}
                    fi
                fi
                
                case $? in
                0)
                    sed -i "\!.*${package}.*!d" ${trg_file}
                    
                    if [ -z "$(grep $(echo ${package} | cut -c 2-) ${compiled})" ]; then
                        echo "${package}" | cut -c 2- >> ${compiled}
                    fi
                    
                    [[ -e "sys.eg" ]] && refresh
                    
                    case ${package} in
                    *sys-devel/gcc-[0-9]*)
                        set_gcc && refresh
                    ;;
                    esac
                    rcount="0"
                ;;
                *)
                    ((rcount++))
                    rm -rf /var/tmp/portage/*$(echo ${package} | cut -c 2-)* &>/dev/null
                    
                    case ${rcount} in
                    1)
                        lff; refresh; timesync
                        pkill -f 'emerge --quiet --sync'
                        inst "sync"; refresh
                    ;;
                    2)
                        python-updater && refresh
                        perl-cleaner --reallyall && refresh
                    ;;
                    3)
                        tch stop.eg
                        echo; er "Installation failed due to compile error. Package: $(echo ${package} | cut -c 2-)."
                        er "Easygentoo will exit now."; echo; exit 1
                    ;;
                    esac
                ;;
                esac
            fi
        done
        
        # Making records for commands that doesn't get recorded to world file because of --oneshot parameter
        [[ "${a}" != "-e system" ]] && mrg -u ${a} 2>&1 > /dev/null
        
        step=""
    }
    
    case ${1} in
    sync)
        [[ -e "/usr/portage/metadata/timestamp.chk" ]] && rm -rf /usr/portage/metadata/timestamp.chk &>/dev/null
        CONFIG_PROTECT_MASK="/etc" emerge --quiet --sync &>/dev/null
    ;;
    *)
        fl "merge.eg" "0" "d"
        cf "a=\"${1}\""
        
        source "$(pwd)/merge.eg"
        [[ "${a}" == "-e system" ]] && echo "emerge -pvD ${a} 2>&1 | grep '^\['" > cmd.eg || echo "emerge -pv ${a} 2>&1 | grep '^\['" > cmd.eg
        chmod +x cmd.eg; ./cmd.eg > data.eg
        
        if [ -n "$(grep -i '^\[ebuild' data.eg)" ]; then
            make_list
            fetch &>/dev/null &
            compile
        fi
    ;;
    esac
}

k_grub() {
    step=$(echo; eb2 "* "; eg2 "Emerging "; er2 "grub "; eg "..."; echo)
    inst "grub"
    
    echo; eg2 "  Installing grub to "; er2 "${grub}"; eg "..."; echo; sleep 0.5s
    
    [[ -n "${boot_part}" ]] && cp /proc/mounts /etc/mtab || grep -v rootfs /proc/mounts > /etc/mtab

    [[ -e "/boot/grub/device.map" ]] && sed -i "\!.*fd[0-9].*!d" /boot/grub/device.map
    
    grub2-install --no-floppy /dev/${grub}
    
    grub2-mkfont --output=/boot/grub/fonts/unicode.pf2 /usr/share/fonts/dejavu/DejaVuSansMono.ttf
    
    [[ -n "${boot_part}" ]] && { bn="$(echo ${boot_part} | cut -c 4-)"; pn="${bn}"; bn="$((bn-1))"; }

    rn="$(echo ${root_part} | cut -c 4-)"; pn="${rn}"; rn="$((rn-1))"

    case $(echo ${grub} | cut -c 3-) in
    [a-z])
        dn="$(echo ${grub} | cut -c 3- | tr 'a-z' '0-26')"
    ;;
    [a-z][0-9])
        dn="$(echo ${grub} | cut -c 3- | cut -c -1 | tr 'a-z' '0-26')"
    ;;
    [a-z][0-9][0-9])
        dn="$(echo ${grub} | cut -c 3- | cut -c -2 | tr 'a-z' '0-26')"
    ;;
    esac
    
    echo; eg2 "  Creating "; er2 "grub.cfg"; eg "..."; sleep 0.5s

    krnl="$(ls /boot/kernel-${eg}*)"
    [[ -e "${krnl}" ]] && krnl2="$(ls /boot/kernel-${eg}* | cut -c 6-)" || krnl2="/kernel-not-available"

    init="$(ls /boot/initramfs-${eg}*)"
    [[ -e "${init}" ]] && init2="$(ls /boot/initramfs-${eg}* | cut -c 6-)" || init2="/initramfs-not-available"
    
    if [ -n "${boot_part}" ]; then
        kernel_line="linux (hd${dn},${pn})${krnl2}"
        init_line="initrd (hd${dn},${pn})${init2}"
    else
        kernel_line="linux ${krnl}"
        init_line="initrd ${init}"
    fi
    
    [[ -n "${swap_part}" ]] && kernel_line="${kernel_line} real_resume=LABEL=${swap_label}"
    kernel_line="${kernel_line} root=/dev/ram0 real_root=LABEL=${root_label} real_init=/usr/lib/systemd/systemd quiet systemd.show_status=1"
    
    case ${root_fs} in
    jfs)
        [[ -z "${boot_part}" ]] && kernel_line="${kernel_line} ro"
    ;;
    esac
    
    fl "grub.eg" "0" "d"
    
    cf '#This file is created by Easy Gentoo.'
    cf ' '
    cf 'font=unicode'
    cf ' '
    cf 'if loadfont $font ; then'
    cf '    set gfxmode=auto'
    cf '    insmod gfxterm'
    cf '    set locale_dir=$prefix/locale'
    cf "    set lang="${lng}""
    cf '    insmod gettext'
    cf 'fi'
    cf ' '
    cf 'terminal_output gfxterm'
    cf ' '
    cf 'if sleep --interruptible 0 ; then'
    cf '    set timeout=10'
    cf 'fi'
    cf ' '
    cf 'set default="0"'
    cf ' '
    cf "menuentry 'Gentoo GNU/Linux' --class gentoo --class gnu-linux --class gnu --class os {"
    cf "    insmod gzio"
    cf "    insmod part_msdos"
    cf "    insmod ext2"
    cf "    root='(hd"${dn}","${pn}")'"
    cf "    ${kernel_line}"
    cf "    ${init_line}"
    cf '}'
    cf ' '
    
    if [ -n "${windows}" ]; then
        case $(echo ${windows} | cut -c 3-) in
        [a-z][0-9])
            wdn=$(echo ${windows} | cut -c 3- | cut -c -1 | tr 'a-z' '0-26')
        ;;
        [a-z][0-9][0-9])
            wdn=$(echo ${windows} | cut -c 3- | cut -c -2 | tr 'a-z' '0-26')
        ;;
        esac
        
        wpn="$(echo ${windows} | cut -c 4-)"
        wpn=$((wpn-1))
        
        cf ''
        cf 'menuentry "Windows XP BIOS/MBR" {'
        cf '    insmod part_msdos'
        cf '    insmod ntldr'
        cf '    insmod ntfs'
        cf '    ntldr (hd'${wdn}','${wpn}')/ntldr'
        cf 'chainloader +1'
        cf '}'
        cf ''
        cf 'menuentry "Windows 7 BIOS/MBR" {'
        cf '    insmod part_msdos'
        cf '    insmod ntldr'
        cf '    insmod ntfs'
        cf '    ntldr (hd'${wdn}','${wpn}')/bootmgr'
        cf 'chainloader +1'
        cf '}'
        
        # make && make modules_install && make install # make all would work
        # make all
        # genkernel --install --no-ramdisk-modules initramfs
    fi
    
    dlt "/boot/grub/grub.cfg"
    cp grub.eg /boot/grub/grub.cfg
}

k_kernel() {
    step=$(echo; eb2 "* "; eg "Emerging kernel... "; echo)
    inst "genkernel-next gentoo-sources"
    step=$(echo; eb2 "* "; eg "Emerging filesystem tools... "; echo)
    inst "${progs}"
    
    echo; eg2 "  Creating kernel config"; eg "..."; echo; sleep 0.5s
    
    get_files "https://raw.githubusercontent.com/shdcn/easygentoo/master/easygentoo.config"
    
    fl "easygentoo.config" "0" "0"
    
    case ${arch} in
    i686)
        avoid_dup_kernel "CONFIG_64BIT=n"
    ;;
    amd64)
        avoid_dup_kernel "CONFIG_64BIT=y"
    ;;
    esac
    
    case ${keymap} in
    br)
        avoid_dup_kernel "CONFIG_FAT_DEFAULT_CODEPAGE=860"
    ;;
    trq|trf)
        avoid_dup_kernel "CONFIG_FAT_DEFAULT_CODEPAGE=857"
    ;;
    us)
        avoid_dup_kernel "CONFIG_FAT_DEFAULT_CODEPAGE=437"
    ;;
    esac
    
    case ${keymap} in
    trq|trf)
        avoid_dup_kernel "CONFIG_FAT_DEFAULT_IOCHARSET=\"iso8859-9\""
        avoid_dup_kernel "CONFIG_NLS_DEFAULT=\"iso8859-9\""
    ;;
    br|us)
        avoid_dup_kernel "CONFIG_FAT_DEFAULT_IOCHARSET=\"iso8859-1\""
        avoid_dup_kernel "CONFIG_NLS_DEFAULT=\"iso8859-1\""
    ;;
    esac
    
    [[ ! -d "/etc/kernels" ]] && mkdir -p /etc/kernels

    cp easygentoo.config /etc/kernels
    
    echo; eb2 "* "; eg2 "Compiling kernel... "; er "(genkernel)"; echo; sleep 0.5s
    genkernel --bootdir=/boot --bootloader=grub2 --install --kernel-config=/etc/kernels/easygentoo.config --kernname=${eg} --makeopts=-j${core} --no-mountboot --postclear --save-config --udev --lvm all
    
    [[ $(ls /boot/kernel-${eg}-*) ]] || genkernel --bootdir=/boot --bootloader=grub2 --install --kernel-config=/etc/kernels/easygentoo.config --kernname=${eg} --makeopts=-j${core} --no-mountboot --postclear --save-config --udev --lvm all
    
    dlt "/boot/grub/grub.cfg"
    cp grub.eg /boot/grub/grub.cfg
}

k_must() {
    cl
    step=$(echo; eb2 "* "; eg2 "Emerging "; er2 "dhcpcd"; eg2 " and "; er2 "gentoolkit"; eg "... "; echo)
    inst "dhcpcd gentoolkit";

    step=$(echo; eb2 "* "; eg2 "Emerging "; er2 "lafilefixer"; eg "... "; echo)
    inst "lafilefixer"
}

k_needed() {
    step=$(echo; eb2 "* "; eg "Emerging basic tools..."; echo)
    inst "acpid bash-completion dbus localepurge media-fonts/dejavu net-misc/ntp sudo systemd"
    
    sed -i '\!^sys-apps/dbus.*$!d' /etc/portage/package.use
    
    timesync
    eselect bashcomp enable --global gentoo

    echo; eb2 "* "; eg2 "Starting services... "; er "(acpid dbus udev)"; echo; sleep 0.5s
    
    for srv in "acpid dbus udev"
    do
        systemctl enable ${srv}.service &>/dev/null
    done
    
    echo; eb2 "* "; eg "Adjusting basic tools to start at boot..."; sleep 0.5s

    for adapter in ${adapters_found}
    do
        net="net.${adapter}"

        [[ ! -e "/etc/init.d/${net}" ]] && ln -s /etc/init.d/net.lo /etc/init.d/${net}
    done
}

k_portage() {
    step=$(echo; eb2 "* "; eg2 "Updating "; er2 "portage"; eg "... ")
    rm -rf /etc/make.profile

    case ${setup} in
    basic)
        case ${kw} in
        amd64)
            eselect profile set default/linux/amd64/13.0
        ;;
        x86)
            eselect profile set default/linux/x86/13.0
        ;;
        esac
    ;;
    normal)
        case ${kw} in
        amd64)
            eselect profile set default/linux/amd64/13.0/desktop
        ;;
        x86)
            eselect profile set default/linux/x86/13.0/desktop
        ;;
        esac
    ;;
    esac
    
    eb2 "* "; eg "emerge --quiet --sync (this may take a while)"
    
    pkill -f 'emerge --quiet --sync'
    inst "sync"
    inst "portage"
}

k_nm() {
    step=$(echo; eb2 "* "; eg2 "Emerging "; er2 "NetworkManager"; eg "..."; echo)
    inst "networkmanager nm-applet"

    systemctl enable NetworkManager.service &>/dev/null
    systemctl disable dhcpcd.service &>/dev/null
    
    fl "/usr/share/polkit-1/actions/org.freedesktop.NetworkManager.policy" "b" "0"
    sed -i s/"<allow_active>.*<\/allow_active>"/"<allow_active>yes<\/allow_active>"/ ${trg_file}
}

k_alsa() {
    step=$(echo; eb2 "* "; eg2 "Emerging "; er2 "alsa-utils"; eg "..."; echo)
    inst "alsa-utils"
    systemctl enable alsa-store.service
    systemctl enable alsa-restore.socket
    
    sound_card_guess="$(aplay -l | grep card | awk '{print $3}' | grep -iv dummy | grep -iv pcsp | uniq | sed q)"
    
    if [ -n "${sound_card_guess}" ]; then
        echo "pcm.!default { type hw card ${sound_card_guess} }" > /etc/asound.conf
        echo "ctl.!default { type hw card ${sound_card_guess} }" >> /etc/asound.conf
    fi
    
    fl "/etc/conf.d/alsasound" "0" "0"
    avoid_dup 'RESTORE_ON_START="yes"'
    avoid_dup 'SAVE_ON_STOP="yes"'
    avoid_dup 'LOAD_ON_START="yes"'
    
    amixer set Master unmute
    amixer set PCM unmute
    
    alsactl -f /var/lib/alsa/asound.state store
}

k_x() {
    step=$(echo; eb2 "* "; eg2 "Checking system"; eg "..."; echo)
    inst "-N system"
    
    step=$(echo; eb2 "* "; eg2 "Emerging "; er2 "Xorg server"; eg "..."; echo)
    inst "xorg-server"
    
    step=$(echo; eb2 "* "; eg2 "Emerging necessary tools"; echo)
    inst "eselect-fontconfig fontconfig mesa-progs setxkbmap"
    
    fl "/home/${username}/.xprofile" "b" "0"

    case ${keymap} in
    br)
        cf "setxkbmap -model evdev -layout br"
    ;;
    trq)
        cf "setxkbmap -model evdev -layout tr"
    ;;
    trf)
        cf "setxkbmap -model evdev -layout tr -variant f"
    ;;
    us)
        cf "setxkbmap -model evdev -layout us"
    ;;
    esac
    
    cf "export GDK_USE_XFT=1"
    cf "export QT_XFT=true"
    cf ""
    cf "#This line is necessary if you don't use a login manager to start Xfce"
    cf "#exec $(which ck-launch-session) $(which dbus-launch) --exit-with-session xfce4-session"
    
    active=$(eselect opengl list | grep "xorg-x11" | grep "*")

    if [ -z "${active}" ]; then
        eselect opengl set xorg-x11
    fi

    hwsetup
    refresh
    
    echo; eb2 "* "; eg2 "Making adjustments for "; er "evdev "; echo
    
    fl "/etc/X11/xorg.conf.d/05-evdev.conf" "b" "d"

    cf 'Section "InputClass"'
    cf '    Identifier "mouse-all"'
    cf '    MatchIsPointer "on"'
    cf '    MatchDevicePath "/dev/input/event*"'
    cf '    Driver "evdev"'
    cf 'EndSection'
    cf ''
    cf 'Section "InputClass"'
    cf '    Identifier "keyboard-all"'
    cf '    MatchIsKeyboard "on"'
    cf '    MatchDevicePath "/dev/input/event*"'
    cf '    Driver "evdev"'
        case ${keymap} in
        br)
            cf '    Option "XkbLayout" "br"'
        ;;
        trq|trf)
            cf '    Option "XkbLayout" "tr"'
            case ${keymap} in
            trf)
                cf '    Option "XkbVariant" "f"'
            ;;
            esac
        ;;
        us)
            cf '    Option "XkbLayout" "us"'
        ;;
        esac
    cf 'EndSection'
    cf ''
    cf 'Section "InputClass"'
    cf '    Identifier "touchpad-all"'
    cf '    MatchIsTouchpad "on"'
    cf '    MatchDevicePath "/dev/input/event*"'
    cf '    Driver "evdev"'
    cf 'EndSection'
    cf ''
    cf 'Section "InputClass"'
    cf '    Identifier "tablet-all"'
    cf '    MatchIsTablet "on"'
    cf '    MatchDevicePath "/dev/input/event*"'
    cf '    Driver "evdev"'
    cf 'EndSection'
    cf ''
    cf 'Section "InputClass"'
    cf '    Identifier "touchscreen-all"'
    cf '    MatchIsTouchscreen "on"'
    cf '    MatchDevicePath "/dev/input/event*"'
    cf '    Driver "evdev"'
    cf 'EndSection'

    fl "/etc/X11/xorg.conf.d/10-synaptics.conf" "b" "d"

    cf 'Section "InputClass"'
    cf '  Identifier "touchpad catchall"'
    cf '  MatchIsTouchpad "on"'
    cf '  MatchDevicePath "/dev/input/event*"'
    cf '  Driver "synaptics"'
    cf 'EndSection'
    cf ''
    cf 'Section "InputClass"'
    cf '  Identifier "Dell Inspiron embedded buttons quirks"'
    cf '  MatchTag "inspiron_1011|inspiron_1012"'
    cf '  MatchDevicePath "/dev/input/event*"'
    cf '  Driver "synaptics"'
    cf '  Option "JumpyCursorThreshold" "90"'
    cf '  Option "AreaBottomEdge" "4100"'
    cf 'EndSection'
    cf ''
    cf 'Section "InputClass"'
    cf '  Identifier "Dell Inspiron quirks"'
    cf '  MatchTag "inspiron_1120"'
    cf '  MatchDevicePath "/dev/input/event*"'
    cf '  Driver "synaptics"'
    cf '  Option "JumpyCursorThreshold" "250"'
    cf 'EndSection'
    cf ''
    cf 'Section "InputClass"'
    cf '  Identifier "HP Mininote quirks"'
    cf '  MatchTag "mininote_1000"'
    cf '  MatchDevicePath "/dev/input/event*"'
    cf '  Driver "synaptics"'
    cf '  Option "JumpyCursorThreshold" "20"'
    cf 'EndSection'

    fl "/etc/X11/xorg.conf.d/10-vmmouse.conf" "b" "d"

    cf 'Section "InputClass"'
    cf '  Identifier "vmmouse catchall"'
    cf '  MatchTag "vmmouse"'
    cf '  MatchDevicePath "/dev/input/event*"'
    cf '  Driver "vmmouse"'
    cf 'EndSection'

    fl "/etc/X11/xorg.conf.d/10-wacom.conf" "b" "d"

    cf 'Section "InputClass"'
    cf '  Identifier "Wacom Class"'
    cf '  MatchProduct "Wacom|WACOM"'
    cf '  MatchDevicePath "/dev/input/event*"'
    cf '  Driver "wacom"'
    cf 'EndSection'
    cf ''
    cf 'Section "InputClass"'
    cf '  Identifier "Wacom serial class"'
    cf '  MatchProduct "Serial Wacom Tablet"'
    cf '  Driver "wacom"'
    cf '  Option "ForceDevice" "ISDV4"'
    cf 'EndSection'
    cf ''
    cf 'Section "InputClass"'
    cf '  Identifier "Wacom serial class identifiers"'
    cf '  MatchProduct "WACf|FUJ02e5|FUJ02e7"'
    cf '  Driver "wacom"'
    cf 'EndSection'
    cf ''
    cf '# N-Trig Duosense Electromagnetic Digitizer'
    cf 'Section "InputClass"'
    cf '  Identifier "Wacom N-Trig class"'
    cf '  MatchProduct "HID 1b96:0001|N-Trig Pen"'
    cf '  MatchDevicePath "/dev/input/event*"'
    cf '  Driver "wacom"'
    cf '  Option "Button2" "3"'
    cf 'EndSection'
    
    fl "/etc/X11/xorg.conf.d/20-magictrackpad.conf" "b" "d"
    
    cf 'Section "InputClass"'
    cf '  Identifier "Magic Trackpad"'
    cf '  MatchUSBID "05ac:030e"'
    cf '  Driver "evdev"'
    cf 'EndSection'

    fl "xorg.eg" "0" "0"
    
    cf 'Section "Files"'
    
    ls /usr/share/fonts >> fonts.eg
    
    while read fontdir
    do
        case ${fontdir} in
        75dpi|100dpi|misc)
            cf '  FontPath "/usr/share/fonts/'${fontdir}':unscaled"'
        ;;
        *)
            cf '  FontPath "/usr/share/fonts/'${fontdir}'"'
        ;;
        esac
    done < fonts.eg
    
    cf 'EndSection'
    cf ''
    cf 'Section "ServerFlags"'
    cf '    Option  "DontZap" "off"'
    cf 'EndSection'
    cf ''
    cf 'Section "Device"'
    cf '    Identifier "video-card"'
    cf '    Driver  "vesa"'
    cf '    Option  "Monitor-default" "monitor"'
    cf 'EndSection'
    cf ''
    cf 'Section "Monitor"'
    cf '    Identifier  "monitor"'
    cf '    VertRefresh  50-70'
    cf '    HorizSync  30-80'
    cf '    Option  "Enable" "true"'
    cf '    Option  "TargetRefresh" "60"'
    cf '    Option  "RenderAccel" "True"'
        case ${type} in
        laptop)
            cf '    Option  "DPMS" "true"'
        ;;
        esac
    cf 'EndSection'
    cf ''
    cf 'Section "Screen"'
    cf '    Identifier  "general"'
    cf '    Device   "video-card"'
    cf '    Monitor  "monitor"'
    cf 'EndSection'
    cf ''
    cf 'Section "ServerLayout"'
    cf '    Identifier  "general-layout"'
    cf '    Screen  "general"'
    cf '    Option  "BackingStore" "True"'
    cf 'EndSection'
    cf ''
    cf 'Section "Module"'
    cf '    Load  "dbe"'
    cf '    Load  "dri"'
    cf '    Load  "dri2"'
    cf '    Load  "evdev"'
    cf '    Load  "extmod"'
    cf '    SubSection  "extmod"'
    cf '      Option    "omit xfree86-dga"'
    cf '    EndSubSection'
    cf '    Load  "freetype"'
    cf '    Load  "glx"'
    cf 'EndSection'
    cf ''
    cf 'Section "Extensions"'
    cf '    Option  "Composite"  "Enable"'
    cf 'EndSection'
    
    fl "/etc/X11/xorg.conf" "b" "d"
    
    cp xorg.eg ${trg_file}
    
    fl "/home/${username}/.fonts.conf" "b" "d"

    cf '<?xml version="1.0" encoding="UTF-8"?>'
    cf '<!DOCTYPE fontconfig SYSTEM "fonts.dtd">'
    cf '<fontconfig>'
    cf '    <alias>'
    cf '        <family>serif</family>'
    cf '        <prefer>'
    cf '            <family>DejaVu Serif</family>'
    cf '            <family>Bitstream Vera Serif</family>'
    cf '        </prefer>'
    cf '    </alias>'
    cf ''
    cf '    <alias>'
    cf '        <family>sans-serif</family>'
    cf '        <prefer>'
    cf '            <family>DejaVu Sans</family>'
    cf '            <family>Bitstream Vera Sans</family>'
    cf '            <family>Verdana</family>'
    cf '            <family>Arial</family>'
    cf '        </prefer>'
    cf '    </alias>'
    cf ''
    cf '    <alias>'
    cf '        <family>monospace</family>'
    cf '        <prefer>'
    cf '            <family>DejaVu Sans Mono</family>'
    cf '            <family>Bitstream Vera Sans Mono</family>'
    cf '        </prefer>'
    cf '    </alias>'
    cf ''
    cf '    <match target="font">'
    cf '        <edit name="rgba" mode="assign">'
    cf '            <const>none</const>'
    cf '        </edit>'
    cf '        <edit name="autohint" mode="assign">'
    cf '            <bool>true</bool>'
    cf '        </edit>'
    cf '        <edit name="antialias" mode="assign">'
    cf '            <bool>true</bool>'
    cf '        </edit>'
    cf '        <edit name="hinting" mode="assign">'
    cf '            <bool>true</bool>'
    cf '        </edit>'
    cf '        <edit name="hintstyle" mode="assign">'
    cf '            <const>hintfull</const>'
    cf '        </edit>'
    cf '    </match>'
    cf ''
    cf '    <!-- Disable autohint for bold fonts -->'
    cf '    <match target="font">'
    cf '           <test name="weight" compare="more">'
    cf '            <const>medium</const>'
    cf '        </test>'
    cf '           <edit name="autohint" mode="assign">'
    cf '            <bool>false</bool>'
    cf '        </edit>'
    cf '    </match>'
    cf ''
    cf '    <!-- Reject bitmap fonts in favour of Truetype, Postscript, etc. -->'
    cf '    <selectfont>'
    cf '        <rejectfont>'
    cf '            <pattern>'
    cf '                <patelt name="scalable">'
    cf '                    <bool>false</bool>'
    cf '                </patelt>'
    cf '            </pattern>'
    cf '        </rejectfont>'
    cf '    </selectfont>'
    cf ''
    cf '</fontconfig>'

    for cfg in "10-autohint.conf" "10-sub-pixel-rgb.conf" "20-unhint-small-dejavu-sans-mono.conf"
    do
        no=$(eselect fontconfig list | grep "${cfg}" | tr '[]' ' ' | awk '{print $1}')
        eselect fontconfig enable "${no}" &>/dev/null
    done
    
    for cfg in "20-unhint-small-dejavu-sans.conf" "20-unhint-small-dejavu-serif.conf" "25-unhint-nonlatin.conf"
    do
        no=$(eselect fontconfig list | grep "${cfg}" | tr '[]' ' ' | awk '{print $1}')
        eselect fontconfig enable "${no}" &>/dev/null
    done
     
    for cfg in "57-dejavu-sans-mono.conf" "57-dejavu-sans.conf" "57-dejavu-serif.conf"
    do
        no=$(eselect fontconfig list | grep "${cfg}" | tr '[]' ' ' | awk '{print $1}')
        eselect fontconfig enable "${no}" &>/dev/null
    done
}

k_lightdm() {
    step=$(echo; eb2 "* "; eg2 "Emerging "; er2 "Lightdm"; eg " login manager..."; echo)
    inst "lightdm"
    
    fl "/usr/share/xsessions/xfce.desktop" "0" "0"
    
    if [ ! -e "/usr/share/xsessions/xfce.desktop" ]; then
        cf '[Desktop Entry]'
        cf 'Version=1.0'
        cf 'Name=Xfce Session'
        cf 'Exec=startxfce4'
        cf 'Icon='
        cf 'Type=Application'
    fi
    
    chown -fP ${username} ${trg_file}
    
    fl "/home/${username}/.dmrc" "0" "d"
    
    cf "[Desktop]"
    cf "Session=xfce"
    
    fl "/var/lib/AccountsService/users/${username}" "0" "0"
    
    avoid_dup "XSession=xfce"
    
    chown -fP ${username} ${trg_file}
    
    fl "/usr/share/xsessions/Xsession.desktop" "0" "d"
    
    systemctl enable lightdm.service &>/dev/null
    
    fl "/etc/conf.d/xdm" "0" "0"
    
    avoid_dup 'DISPLAYMANAGER="lightdm"'
    avoid_dup 'NEEDS_HALD="no"'
    
    chown -fP ${username} ${trg_file}
}

k_xfce() {
    step=$(echo; eb2 "* "; eg2 "Emerging "; er2 "Xfce"; eg " desktop environment..."; echo)
    inst "xfce4-meta xfce4-notifyd"
    step=$(echo; eb2 "* "; eg "Emerging other Xfce packages..."; echo)
    inst "app-editors/leafpad x11-terms/xfce4-terminal x11-themes/murrine-themes xfce4-mixer xfce4-taskmanager"
    
    case "${type}" in
    laptop)
        step=$(echo; eb2 "* "; eg "Emerging packages needed for laptops..."; echo)
        inst "xfce4-battery-plugin xfce4-power-manager laptop-mode-tools"
        systemctl enable laptop_mode.service &>/dev/null
    ;;
    esac
    
    step=$(echo; eb2 "* "; eg2 "Emerging "; er2 "Thunar"; eg "..."; echo)
    inst "thunar thunar-archive-plugin thunar-volman trayer"
    
    if [ ! -d "/home/${username}/.config/xfce4/panel" ]; then
        mkdir -p /home/${username}/.config/xfce4/panel
    fi
    
    cp /etc/xdg/xfce4/panel/default.xml /home/${username}/.config/xfce4/panel/
    
    usermod -a -G plugdev ${username}
    
    session="Xfce4"
    
    fl "/etc/env.d/90xsession" "0" "d"
    
    avoid_dup 'XSESSION="'${session}'"'
    
    fl "/home/${username}/.gtkrc-2.0" "b" "d"
    
    cf "include \"/usr/share/themes/MurrinaBlu/gtk-2.0/gtkrc\""
    cf ''
    cf 'style "user-font" {'
    cf '    font_name = "DejaVu Sans 9"'
    cf '}'
    cf ''
    cf 'style "xfdesktop-icon-view" {'
    cf '    XfdesktopIconView::label-alpha = 10'
    cf '    base[NORMAL] = "#000000"'
    cf '    base[SELECTED] = "#71B9FF"'
    cf '    base[ACTIVE] = "#71FFAD"'
    cf '    fg[NORMAL] = "#ffffff"'
    cf '    fg[SELECTED] = "#71B9FF"'
    cf '    fg[ACTIVE] = "#71FFAD"'
    cf '}'
    cf ''
    cf 'widget_class "*XfdesktopIconView*" style "xfdesktop-icon-view"'
    cf ''
    cf 'widget_class "*" style "user-font"'
    cf 'gtk-font-name = "DejaVu Sans 9"'
    cf 'gtk-theme-name = "MurrinaBlu"'
}

k_pp() {
    step=$(echo; eb2 "* "; eg2 "Emerging "; er2 "Python"; eg2 " and "; er2 "Perl"; eg "..."; echo)
    inst "perl python"
}

k_system() {
    touch sys.eg
    step=$(echo; eb2 "* "; eg "Updating system..."; echo)
    inst "-e system"
    rm -rf sys.eg
    inst "libtool"
}

k_check() {
    step=$(echo; eb2 "* "; eg "Checking system..."; echo)
    lff
    inst "-uDN world"
    echo; eb2 "* "; eg "emerge  --depclean"; echo;
    mrg --depclean
    echo; eb2 "* "; eg "emerge @preserved-rebuild"; echo;
    mrg "@preserved-rebuild"
    rdr
    rm -rf /etc/mtab
    ln -sf "/proc/self/mounts" "/etc/mtab"
}

set_gcc() {
    gcc-config -l | awk '{print $2}' > gcc.eg
    gcc_latest="$(sort -r gcc.eg | sed q)"
    gcc-config ${gcc_latest} &>/dev/null || gcc-config ${gcc_latest} &>/dev/null
    rm -rf gcc.eg
}

timesync() {
    which ntpdate &>/dev/null && { echo; eb2 "* "; eg "ntpdate -b -u pool.ntp.org"; echo; ntpdate -b -u pool.ntp.org; } || { which sntp &>/dev/null && sntp -t10 pool.ntp.org &>/dev/null; }
}

refresh() {
    echo "-5" | CONFIG_PROTECT_MASK="/etc" etc-update &>/dev/null
    env-update &>/dev/null; source /etc/profile &>/dev/null
    vlist
    echo
}

lff() {
    which lafilefixer &>/dev/null && { echo; eb2 "* "; eg "lafilefixer --justfixit"
    echo; lafilefixer --justfixit | grep -v skipping; }
}

rdr() {
    which revdep-rebuild &>/dev/null && { echo; eb2 "* "; eg "revdep-rebuild -iq"
    echo; revdep-rebuild -iq; }
}

vlist() {
    source "$(pwd)/${vl}"
}

start() {
    export SHELL=$(which bash); setterm -blank 0; cl
    
    eg="easygentoo"; profile="profile"; vl="variables"; mnt="/mnt/gentoo"
    lt="latest-stage3.txt"; compiled="compiled.txt"
    
    [[ -e "/chroot.eg" ]] && inside || { intro; check; prepare; get_tar; move; }

    exit 0
}

intro() {
    cl; echo; echo
    echo; eg "  Welcome to Easy Gentoo!"; echo; sleep 0.5s
    echo; ey "  Please make sure that your profile is configured the way you exactly need it."
    ey "  The setup is automated and not even a single key press is needed till the end (if everything goes as planned ^^).";
    sleep 0.5s; echo; ew2 "  Press any key to continue..."; echo; read -n1 key; echo
    cl; eg "  Good luck ;)"; sleep 1s
}

check() {
    rm -rf easygentoo.config *.DIGESTS *.md5sum *.eg ${lt} ${vl} &>/dev/null
    
    [[ "$(pwd)" != "/root" ]] && { echo; er2 "Please move the script to "; ey2 "/root"; er " and start it again."; exit 1; }
    
    [[ ! -e "${profile}" ]] && { cl; er "  Looks like you don't have a profile. Please create one."; echo; exit 1; }
    
    [[ ! -d "${mnt}" ]] && mkdir -p ${mnt}
    
    for var in "arch blimit domainname grub hostname keymap setup rootpass userpass username windows"
    do
        unset ${var}
    done
    
    for var2 in "boot swap root home extra"
    do
        unset ${var2}_part ${var2}_label ${var2}_fs ${var2}_mp
    done
    
    for var3 in "fse fs_exist progs adapters_found core kw tarball type available_cpu_flags"
    do
        unset ${var3}
    done
    
    echo "$(tr -s '[:blank:]' ' ' < ${profile})" > ${profile}
    
    necessary="awk basename bash cat chmod chroot clear cp cut dhcpcd fdisk grep ifconfig killall loadkeys md5sum mkdir mount mv ping rm sed setterm sha512sum sleep tar touch tr umount uname uniq wget"
    nicknames="boot extra home root swap"
    
    a2v "fs_list=\"btrfs ext2 ext3 ext4 ntfs reiserfs xfs\""
    
    for nick in ${nicknames}
    do
        for a in ${fs_list}
        do
            t=$(grep "${nick} " "${profile}" | grep "${a}")
            if [ -n "${t}" ]; then
                added1=$(echo "${fse}" | grep "${a}")
                if [ -z "${added1}" ]; then
                    [[ -z "${fse}" ]] && fse="${a}" || fse="${a} ${fse}"
                fi

                added2=$(echo "${necessary}" | grep "mkfs.${a}")
                [[ -z "${added2}" ]] && necessary="mkfs.${a} ${necessary}"
            fi
        done
    done
    
    a2v "fs_exist=\"${fse}\""

    echo; eb2 "* "; eg "Checking the existence of necessary tools..."; echo; sleep 1s
    
    for b in ${necessary}
    do
        exist "${b}"
    done
    
    sleep 1s
    
    progs="ntfs3g pcmciautils procps"

    for g in ${fs_list}
    do
        pr_need=$(echo "${fs_exist}" | grep "${g}")

        if [ -n "${pr_need}" ]; then
            case ${g} in
            btrfs)
                fsprogs="btrfs-progs"
            ;;
            ext2|ext3|ext4)
                fsprogs="e2fsprogs e2fsprogs-libs"
            ;;
            nfs)
                fsprogs="nfs-utils"
            ;;
            reiserfs)
                fsprogs="libaal reiserfsprogs"
            ;;
            xfs)
                fsprogs="xfsprogs"
            ;;
            esac

            added3=$(echo "${progs}" | grep "${fsprogs}")
            [[ -z "${added3}" ]] && progs="${fsprogs} ${progs}"
        fi
    done
    
    a2v "progs=\"${progs}\""

    adapter_list="$(ifconfig | grep flags | grep -v 'lo:' | cut -d ':' -f1 | tr '\n' ' ')"
    
    unset adapter
    [[ -n "${adapter_list}" ]] && a2v "adapters_found=\"${adapter_list}\"" || { 
    echo; er "Looks like there aren't any network adapters. Setup is unable to continue. Exiting now..."
    echo; echo; exit 1; }
    
    fdisk -l 2>/dev/null | awk '/^\/dev\/[s:h]d/ {print $1}' > partition_list.eg
}

prepare() {
    file_format() {
        case ${fs} in
        swap)
            prm="sw,noatime,loop"
            echo "swapoff /dev/${part} > /dev/null 2>&1" >> format.eg
            echo "mkswap -L ${label} /dev/${part} > /dev/null 2>&1" >> format.eg
        ;;
        btrfs)
            prm="defaults,noatime,autodefrag,noacl,compress-force=lzo"
            echo "umount -l /dev/${part} > /dev/null 2>&1" >> format.eg
            echo "mkfs.${fs} -L ${label} -s 1024 /dev/${part} > /dev/null 2>&1" >> format.eg
        ;;
        ext2)
            prm="defaults,noatime"
            echo "umount -l /dev/${part} > /dev/null 2>&1" >> format.eg
            echo "mkfs.${fs} -L ${label} -b 1024 /dev/${part} > /dev/null 2>&1" >> format.eg
        ;;
        ext3)
            prm="defaults,noatime"
            echo "umount -l /dev/${part} > /dev/null 2>&1" >> format.eg
            echo "mkfs.${fs} -L ${label} -b 1024 /dev/${part} > /dev/null 2>&1" >> format.eg
            echo "tune2fs -c 0 -i 1m -I 256 -O dir_index,has_journal -o journal_data_ordered -m 1 /dev/${part} > /dev/null 2>&1" >> format.eg
            echo "e2fsck -fpDC0 /dev/${part} > /dev/null 2>&1" >> format.eg
        ;;
        ext4)
            prm="defaults,noatime"
            echo "umount -l /dev/${part} > /dev/null 2>&1" >> format.eg
            echo "mkfs.${fs} -L ${label} -b 1024 /dev/${part} > /dev/null 2>&1" >> format.eg
            echo "tune2fs -c 0 -i 1m -O dir_index,has_journal -o journal_data_ordered -m 1 /dev/${part} > /dev/null 2>&1" >> format.eg
            echo "e2fsck -fpDC0 /dev/${part} > /dev/null 2>&1" >> format.eg
        ;;
        ntfs)
            prm="defaults,locale=${lng}.utf8,users,nls=utf8,umask=000"
            
            echo "umount -l /dev/${part} > /dev/null 2>&1" >> format.eg
            echo "mkfs.${fs} -Q -L ${label} --no-indexing -f /dev/${part} > /dev/null 2>&1" >> format.eg
        ;;
        reiserfs)
            prm="defaults,noatime"
            echo "umount -l /dev/${part} > /dev/null 2>&1" >> format.eg
            echo "mkfs.${fs} -q -l ${label} /dev/${part} > /dev/null 2>&1" >> format.eg
        ;;
        xfs)
            prm="defaults,noatime,logbufs=8,logbsize=32k,osyncisdsync"
            echo "umount -l /dev/${part} > /dev/null 2>&1" >> format.eg
            echo "mkfs.${fs} -L ${label} -f -l internal,lazy-count=1,size=64m -d agcount=2 -n size=8k -i size=1024 /dev/${part} > /dev/null 2>&1 || 
            mkfs.${fs} -L ${label} -f -l internal,lazy-count=1,size=32m -d agcount=2 -n size=8k -i size=1024 /dev/${part} > /dev/null 2>&1 || 
            mkfs.${fs} -L ${label} -f -l internal,lazy-count=1 -n size=8k -i size=1024 /dev/${part} > /dev/null 2>&1" >> format.eg
        ;;
        esac
        
        echo " " >> format.eg
    }

    file_fstab() {
        case "${fs}" in
        ntfs)
            echo "LABEL=${label}   ${mp}   ntfs-3g   ${prm}   ${dp}"  >> fstab.eg
        ;;
        *)
            echo "LABEL=${label}   ${mp}   ${fs}   ${prm}   ${dp}"  >> fstab.eg
        ;;
        esac
    }

    file_mount() {
        case ${fs} in
        swap)
            echo "swapoff /dev/${part} > /dev/null 2>&1" >> mount.eg
            echo "swapon /dev/${part} > /dev/null 2>&1" >> mount.eg
        ;;
        root)
            echo "umount -l /dev/${part} > /dev/null 2>&1" >> mount.eg
            echo "mount -t ${fs} /dev/${part} ${mnt}${mp} -o ${prm} || mount /dev/${part} ${mnt}${mp} > /dev/null 2>&1" >> mount.eg
        ;;
        *)
            echo "umount -l /dev/${part} > /dev/null 2>&1" >> mount.eg
            
            [[ ! -d "${mnt}${mp}" ]] && echo "mkdir -p ${mnt}${mp}" >> mount.eg
            
            echo "mount -t ${fs} /dev/${part} ${mnt}${mp} -o ${prm} > /dev/null 2>&1 || mount /dev/${part} ${mnt}${mp} > /dev/null 2>&1" >> mount.eg
        ;;
        esac
    }

    default_value() {
        case ${1} in
        autonet)
            value="yes"
        ;;
        arch)
            value="$(uname -m)"
            
            case ${value} in
            x86_64)
                value="amd64"
            ;;
            esac
        ;;
        blimit)
            value="0"
        ;;
        domainname)
            value="easygentoo"
        ;;
        grub)
            value="$(echo ${root_part} | sed s:[0-9].*::)"
        ;;
        hostname)
            value="freshinstall"
        ;;
        keymap)
            value="us"; a2v "lng=\"en_US\""
        ;;
        username)
            value="owner"
        ;;
        userpass)
            value="resu"
        ;;
        root)
            echo; er "  /root partition is not specified in profile. Please change your profile and start again."; echo; exit 1
        ;;
        rootpass)
            value="toor"
        ;;
        setup)
            value="basic"
        ;;
        type)
            value="pc"
        ;;
        windows)
            value=""
        ;;
        esac
    }
    
    rm -rf mount.eg
    echo "normal=$'\e[0m'" >> mount.eg
    echo "red=$'\e[31;01m'" >> mount.eg
    echo "blue=$'\e[34;01m'" >> mount.eg

    rm -rf format.eg
    echo "normal=$'\e[0m'" >> format.eg
    echo "red=$'\e[31;01m'" >> format.eg
    echo "blue=$'\e[34;01m'" >> format.eg
    
    if [ -n "$(grep '^root ' ${profile})" ]; then
        grep '^root ' ${profile} > part.eg
        part="$(awk '{print $2}' part.eg)"; label="$(awk '{print $3}' part.eg)"
        fs="$(awk '{print $4}' part.eg)"; mp="/"; dp="0 1"
        a2v "root_part=\"${part}\"   root_label=\"${label}\"   root_fs=\"${fs}\"   root_mp=\"${mp}\""
        
        echo 'echo -n ${red} "      * "; echo ${blue}"formatting root partition..."${normal}; sleep 0.5s' >> format.eg
        file_format; file_fstab
        echo 'echo -n ${red} "      * "; echo ${blue}"mounting root partition..."${normal}; sleep 0.5s' >> mount.eg
        file_mount
    fi

    if [ -n "$(grep '^boot ' ${profile})" ]; then
        grep '^boot ' ${profile} > part.eg
        part="$(awk '{print $2}' part.eg)"; label="$(awk '{print $3}' part.eg)"
        fs="ext2"; mp="/boot"; dp="1 2"
        a2v "boot_part=\"${part}\"   boot_label=\"${label}\"   boot_fs=\"${fs}\"   boot_mp=\"${mp}\""
        
        echo 'echo -n ${red} "      * "; echo ${blue}"formatting boot partition..."${normal}; sleep 0.5s' >> format.eg
        file_format; file_fstab
        echo 'echo -n ${red} "      * "; echo ${blue}"mounting boot partition..."${normal}; sleep 0.5s' >> mount.eg
        file_mount
    fi

    if [ -n "$(grep '^swap ' ${profile})" ]; then
        grep '^swap ' ${profile} > part.eg
        part="$(awk '{print $2}' part.eg)"; label="$(awk '{print $3}' part.eg)"
        fs="swap"; mp="none"; dp="0 0"
        a2v "swap_part=\"${part}\"   swap_label=\"${label}\"   swap_fs=\"${fs}\"   swap_mp=\"${mp}\""
        
        echo 'echo -n ${red} "      * "; echo ${blue}"formatting swap partition..."${normal}; sleep 0.5s' >> format.eg
        file_format; file_fstab
        echo 'echo -n ${red} "      * "; echo ${blue}"activating swap partition..."${normal}; sleep 0.5s' >> mount.eg
        file_mount
    fi

    if [ -n "$(grep '^home ' ${profile})" ]; then
        grep '^home ' ${profile} > part.eg
        part="$(awk '{print $2}' part.eg)"; label="$(awk '{print $3}' part.eg)"
        fs="$(awk '{print $4}' part.eg)"; mp="/home"; dp="0 0"
        a2v "home_part=\"${part}\"   home_label=\"${label}\"   home_fs=\"${fs}\"   home_mp=\"${mp}\""
        
        echo 'echo -n ${red} "      * "; echo ${blue}"formatting home partition..."${normal}; sleep 0.5s' >> format.eg
        file_format; file_fstab
        echo 'echo -n ${red} "      * "; echo ${blue}"mounting home partition..."${normal}; sleep 0.5s' >> mount.eg
        file_mount
    fi

    if [ -n "$(grep '^extra ' ${profile})" ]; then
        grep '^extra ' ${profile} > extra.eg
        dp="0 0"
        
        echo 'echo -n ${red} "      * "; echo ${blue}"formatting other specified partitions..."${normal}; sleep 0.5s' >> format.eg
        
        while read name part label fs mp
        do
            file_format; file_fstab
        done < extra.eg
        
        echo 'echo -n ${red} "      * "; echo ${blue}"mounting other specified partitions..."${normal}; sleep 0.5s' >> mount.eg
        
        while read name part label fs mp
        do
            file_mount
        done < extra.eg
    fi
    
    echo "shm    /dev/shm    tmpfs    nodev,nosuid,noexec    0 0"  >> fstab.eg

    chmod +x format.eg; chmod +x mount.eg
    
    settings="autonet arch blimit domainname grub hostname keymap rootpass setup type userpass username windows"

    for s in ${settings}
    do
        unset value value2
        if [ -z "$(grep ^${s} ${profile})" ]; then
            default_value "${s}"
        else
            grep "^${s} " ${profile} > settings.eg
            
            value="$(awk '{print $2}' settings.eg)"
            
            case ${s} in
            autonet)
                case ${value} in
                yes|no)
                    e="x"
                ;;
                *)
                    default_value "${s}"
                ;;
                esac
            ;;
            arch)
                case ${value} in
                i686|amd64)
                    e="x"
                ;;
                32|32bit|"32 bit")
                    value="i686"
                ;;
                64|64bit|"64 bit")
                    value="amd64"
                ;;
                *)
                    default_value "${s}"
                ;;
                esac
            ;;
            blimit)
                case ${value} in
                [0-9] | [0-9][0-9] | [0-9][0-9][0-9])
                    e="x"
                ;;
                [0-9][0-9][0-9][0-9] | [0-9][0-9][0-9][0-9][0-9])
                    e="x"
                ;;
                *)
                    default_value "${s}"
                ;;
                esac
            ;;
            grub)
                case ${value} in
                [s:h]d[a-z] | [s:h]d[a-z][1-9] | [s:h]d[a-z][1-9][0-9] | [s:h]d[a-z][1-9][0-9][0-9])
                    e="x"
                ;;
                *)
                    default_value "${s}"
                ;;
                esac
            ;;
            keymap)
                case ${value} in
                br)
                    a2v "lng=\"pt_BR\""
                ;;
                trq|trf)
                    a2v "lng=\"tr_TR\""
                ;;
                us)
                    a2v "lng=\"en_US\""
                ;;
                tr)
                    value="trq"; a2v "lng=\"tr_TR\""
                ;;
                *)
                    default_value "${s}"
                ;;
                esac
            ;;
            setup)
                case ${value} in
                basic|normal)
                    e="x"
                ;;
                *)
                    default_value "${s}"
                ;;
                esac
            ;;
            type)
                case ${value} in
                laptop|pc)
                    e="x"
                ;;
                *)
                    default_value "${s}"
                ;;
                esac
            ;;
            esac
        fi
        
        [[ -n "${value}" ]] && a2v "${s}=\"${value}\""
    done
    
    core=$(grep -c processor /proc/cpuinfo)
    a2v "core=\"${core}\""

    case ${arch} in
    i686)
        kw="x86"
    ;;
    amd64)
        kw="amd64"
    ;;
    esac
    
    a2v "kw=\"${kw}\""

    case ${disk_size} in
    [1-9] | [1-9][0-9] | [1-9][0-9][0-9] | [2-5][0-9][0-9][0-9])
        echo; er "root partition (${root_part}) is smaller (${disk_size} MB) than the recommended partition size (6000 MB)."
        echo; er "This may cause some problems during setup. It is safer to choose/create a bigger partition for root."
        er "Press any key if you want to ignore this and continue..."; echo; read key
    ;;
    esac

    find_flags
    fdisk -l /dev/"${root_part}" 2>/dev/null | grep "${root_part}" | tr ':,' '\n' | grep -v "bytes" | grep -v "${root_part}" | grep "[0-9] [A-Z]" > psize.eg
    
    while read g1 g2
    do
        psize="${g1}"
        stype="${g2}"
    done < psize.eg
    
    psize="$(echo ${psize} | cut -d'.' -f1)"
    ram_size="$(grep -i memtotal < /proc/meminfo | sed -e 's:.* \([0-9].* kb\):\1:i' -e 's: .*::')"
    
    a2v "psize=\"${psize}\"   stype=\"${stype}\"   ram_size=\"${ram_size}\""
    
    echo; eb2 "* "; eg2 "Preparing partitions... "; ey "(formatting)"; echo; sleep 0.5s; ./format.eg
    echo; eb2 "* "; eg2 "Preparing partitions... "; ey "(mounting)"; echo; sleep 0.5s; ./mount.eg
}

get_tar() {
    [[ "$(ping -nc1 www.google.com)" ]] && tch connected.eg || { [[ "$(ping -nc3 -i2 www.google.com)" ]] && tch connected.eg || connect_me &>/dev/null; }
    
    echo; eb2 "* "; eg "Checking mirrors..."; sleep 0.5s
    
    case ${keymap} in
    trq|trf)
        mirrorlist="http://ftp.linux.org.tr/gentoo ftp://ftp.linux.org.tr/gentoo http://gentoo.supp.name ftp://mirrors.linuxant.fr/distfiles.gentoo.org"
    ;;
    br|us)
        mirrorlist="http://gentoo.supp.name ftp://mirrors.linuxant.fr/distfiles.gentoo.org http://ftp.linux.org.tr/gentoo ftp://ftp.linux.org.tr/gentoo"
    ;;
    esac
    
    a2v "mirrorlist=\"${mirrorlist}\""
    
    mirror_check
    timesync
    
    [[ -e "${lt}" ]] && rm -rf ${lt}
    
    echo; eb2 "* "; eg "Getting latest tarball name..."; sleep 1s
    
    case ${arch} in
    i686)
        get_files "${mirror}/releases/x86/autobuilds/${lt}"
    ;;
    amd64)
        get_files "${mirror}/releases/amd64/autobuilds/${lt}"
    ;;
    esac
    
    while read lt_line
    do
        if [ "${lt_line}" != "^#*" ]; then
            date="${lt_line:0:8}"
            [[ "${lt_line}" == "${date}/stage3-${arch}-${date}.tar.bz2" ]] && tarball="stage3-${arch}-${date}.tar.bz2" && break
        fi
    done < "${lt}"
    
    a2v "tarball=\"${tarball}\""
    
    en2 "  Latest tarball:"; ey "  ${tarball}"; sleep 1s
    
    case ${arch} in
    i686)
        t_int="${mirror}/releases/x86/autobuilds/${date}/${tarball}"
    ;;
    amd64)
        t_int="${mirror}/releases/amd64/autobuilds/${date}/${tarball}"
    ;;
    esac
    
    t_dig="${t_int}.DIGESTS"
    
    check="x"
    while [ "${check}" != "ok" ]
    do
        [[ -e "${tarball}.DIGESTS" ]] && rm -rf ${tarball}.DIGESTS

        get_files "${t_dig}"; grep "${tarball}" "${tarball}.DIGESTS" | sed 1q > t_dig.eg

        if [ -e "${tarball}" ]; then
            echo; eb2 "* "; ew2 "stage3-${arch} tarball exists. "; eg "(previously downloaded)"
        else
            echo; eb2 "* "; er "Downloading stage3-${arch} tarball... "
            
            if [ "${blimit}" -gt "0" ]; then
                get_files "--limit-rate=${blimit}k ${t_int}"
            else
                get_files "${t_int}"
            fi
        fi
        
        ey2 "  Checking tarball integrity... "; shasum "t_dig.eg" "${tarball}"
    done
    
    echo "${tarball}" > tball.eg
    
    open_tar &
    
    p="portage-latest.tar.bz2"; p_md5="${p}.md5sum"; p_int="${mirror}/snapshots/${p}"

    check="x"
    while [ "${check}" != "ok" ]
    do
        [[ -e "${p_md5}" ]] && rm -rf ${p_md5}

        get_files "${mirror}/snapshots/${p_md5}"

        if [ -e "${p}" ]; then
            echo; eb2 "* "; ew2 "portage snapshot exists. "; eg "(previously downloaded)"
        else
            echo; eb2 "* "; er "Downloading portage snapshot... "
            
            if [ "${blimit}" -gt "0" ]; then
                get_files "--limit-rate=${blimit}k ${p_int}"
            else
                get_files "${p_int}"
            fi
        fi
        
        ey2 "  Checking portage snapshot integrity... "; csum "${p_md5}" "${p}"
    done
    
    echo "${p}" > sshot.eg
    
    [[ ! -e "move.eg" ]] && { echo; eb2 "* "; ey "Extracting downloaded files, this may take a while..."; echo; }
    
    while true
    do
        [[ -e "tball.done" ]] && { read t < tball.eg; eg2 "  ${t}"; ew " is successfully extracted."; break; } || sleep 1s
    done
    
    while true
    do
        [[ -e "sshot.done" ]] && { read p < sshot.eg; eg2 "  ${p}"; ew " is successfully extracted."; break; } || sleep 1s
    done

    until [ -e "move.eg" ]
    do
        sleep 1s
    done
    
    rm -rf *.done move.eg
}

open_tar() {
    echo
    until [ -e "tball.eg" ]
    do
        sleep 1s
    done
    
    read t < tball.eg
    tar --numeric-owner -xjpf ${t} -C ${mnt} && touch tball.done
    
    until [ -e "sshot.eg" ]
    do
        sleep 1s
    done
    
    read p < sshot.eg
    mkdir -p ${mnt}/usr/portage && tar --numeric-owner -xjf ${p} -C ${mnt}/usr && touch sshot.done

    touch move.eg
}

move() {
    cp -dpRL /dev/{console,kmem,mem,null,urandom,random,zero,ptmx,ram[0-6],tty[0-6]} ${mnt}/dev &>/dev/null
    
    [[ -e "${mnt}/etc/resolv.conf" ]] && cp ${mnt}/etc/resolv.conf ${mnt}/etc/resolv.conf.backup && rm -rf ${mnt}/etc/resolv.conf
    
    cp -L /etc/resolv.conf ${mnt}/etc/

    [[ ! -d "${mnt}/etc/portage" ]] && mkdir -p ${mnt}/etc/portage
    
    for m in "proc" "sys" "dev" "dev/pts"
    do
        umount -l ${mnt}/$m &>/dev/null
        mount -R /$m ${mnt}/$m &>/dev/null
    done
    
    cp ${eg} ${mnt} &>/dev/null
    mv ${profile} ${mnt} &>/dev/null
    mv ${compiled} ${mnt} &>/dev/null
    mv ${vl} ${mnt} &>/dev/null
    mv *.tar.bz2 ${mnt} &>/dev/null
    mv *.eg ${mnt} &>/dev/null
    
    rm -rf easygentoo.config *.DIGESTS *.md5sum *.eg ${lt} ${vl} &>/dev/null
    
    touch ${mnt}/chroot.eg &>/dev/null
    
    chroot ${mnt} $(which env) -i TERM=$TERM ./${eg}
}

create_swap_file() {
    case ${stype} in
    MB)
        [[ "${psize}" -gt "8000" ]] && swap_file="yes"
    ;;
    GB)
        [[ "${psize}" -gt "8" ]] && swap_file="yes"
    ;;
    TB)
        swap_file="yes"
    ;;
    *)
        swap_file="no"
    ;;
    esac
    
    case ${swap_file} in
    yes)
        echo; eb2 "* "; eg2 "Creating a swap file"; er " (1GB)"; sleep 0.5s
        dd if=/dev/zero of=/egswap count=2M &>/dev/null
        mkswap /egswap &>/dev/null
        swapon /egswap &>/dev/null
    ;;
    esac
}

shut() {
    [[ -e "stop.eg" ]] && break
}

inside() {
    [[ -e stop.eg ]] && rm -rf stop.eg
    [[ ! -e "${compiled}" ]] && touch ${compiled}
    
    on_off &
    net_watch &
    
    echo; eg "  !!--Chroot--!!"
    timesync
    hostname "${hostname}"
    
    fl "/etc/etc-update.conf" "0" "0"
    
    avoid_dup 'rm_opts=""'
    avoid_dup 'cp_opts=""'

    refresh
    
    [[ -z "${swap_part}" ]] && (( "${ram_size}" < "1900000" )) && create_swap_file
    
    case ${type} in
    pc)
        echo 10 > /proc/sys/vm/swappiness
        echo 600 > /proc/sys/vm/dirty_expire_centisecs
        echo 600 > /proc/sys/vm/dirty_writeback_centisecs
        echo 5 > /proc/sys/vm/dirty_background_ratio
        echo 20 > /proc/sys/vm/dirty_ratio
        echo 0 > /proc/sys/vm/laptop_mode
        echo 50 > /proc/sys/vm/vfs_cache_pressure
    ;;
    laptop)
        echo 10 > /proc/sys/vm/swappiness
        echo 50 > /proc/sys/vm/vfs_cache_pressure
    ;;
    esac
    
    echo; eb2 "* "; eg2 "Creating"; er2 " make.conf"; eg "..."; sleep 0.5s

    fl "/etc/portage/make.conf" "0" "d"

    cf "CFLAGS=\"-march=native -O2 -pipe\""
    cf 'CXXFLAGS="${CFLAGS}"'
        case ${arch} in
        i686)
            cf 'CHOST="i686-pc-linux-gnu"'
        ;;
        amd64)
            cf 'CHOST="x86_64-pc-linux-gnu"'
        ;;
        esac
    cf 'LDFLAGS="-Wl,-O1 -Wl,--as-needed -Wl,--sort-common -Wl,--hash-style=gnu"'
    cf 'ACCEPT_KEYWORDS="'${kw}'"'
    cf 'ACCEPT_LICENSE="*"'
    cf 'MAKEOPTS="-j2"'
        case ${keymap} in
        br)
            cf 'LINGUAS="pt_BR"'
        ;;
        trq|trf)
            cf 'LINGUAS="tr"'
        ;;
        us)
            cf 'LINGUAS="en"'
        ;;
        esac
    cf 'AUTOCLEAN="no"'
    cf 'FEATURES="-ccache -distcc fixlafiles -news -parallel-fetch sandbox usersandbox userfetch userpriv nodoc noinfo"'
    cf 'USE="'${available_cpu_flags}'"'
    cf ''
    cf '# It is recommended to leave WANT_MP disabled because of the problems it may trigger.'
    cf '# WANT_MP="true"'
    cf ''
    cf 'PORTAGE_RSYNC_INITIAL_TIMEOUT="10"'
    cf 'PORTAGE_RSYNC_RETRIES="5"'
    cf 'GENTOO_MIRRORS="'${mirrorlist}'"'
    cf 'RSYNC="rsync://rsync2.us.gentoo.org rsync://rsync3.us.gentoo.org rsync://rsync25.us.gentoo.org"'
        if [ "${blimit}" -gt "0" ]; then
            cf 'FETCHCOMMAND="${FETCHCOMMAND} --limit-rate='${blimit}'k"'
            cf 'RESUMECOMMAND="${RESUMECOMMAND} --limit-rate='${blimit}'k"'
        fi
    cf 'EMERGE_DEFAULT_OPTS="--autounmask=y --autounmask-write=y --with-bdeps=y --quiet-build"'
    cf ''
    
    mkdir -p /etc/portage/env/dev-lang
    mkdir -p /etc/portage/env/dev-db
    mkdir -p /etc/portage/env/www-client
    mkdir -p /etc/portage/env/net-libs
    
    fl "/etc/portage/env/O3-cflags" "0" "d"
    cf "CFLAGS=\"-march=native -O3 -pipe\""
    cf 'CXXFLAGS="${CFLAGS}"'
    
    ln -sf /etc/portage/env/O3-cflags /etc/portage/env/dev-lang/python &>/dev/null
    ln -sf /etc/portage/env/O3-cflags /etc/portage/env/dev-db/sqlite &>/dev/null
    
    fl "/etc/portage/env/firefox-cflags" "0" "d"
    cf "CFLAGS=\"-march=native -Os -pipe -fomit-frame-pointer\""
    cf 'CXXFLAGS="${CFLAGS}"'
    cf 'LDFLAGS="${LDFLAGS} -Bdirect -Wl,-z,now"'
    
    ln -sf /etc/portage/env/firefox-cflags /etc/portage/env/www-client/firefox &>/dev/null
    
    fl "/etc/portage/env/xulrunner-cflags" "0" "d"
    cf "CFLAGS=\"-march=native -O2 -pipe -fomit-frame-pointer\""
    cf 'CXXFLAGS="${CFLAGS}"'
    cf 'LDFLAGS="${LDFLAGS} -Bdirect -Wl,-z,now"'
    
    ln -sf /etc/portage/env/xulrunner-cflags /etc/portage/env/net-libs/xulrunner &>/dev/null
    
    echo; k_portage; k_must
    
    fl "/etc/locale.gen" "0" "0"
    
    cf "${lng}.UTF-8 UTF-8"
    cf "${lng} ISO-8859-1"
    
    locale-gen &>/dev/null
    
    echo; eb2 "* "; eg2 "Updating"; er " make.conf..."; sleep 0.5s

    fl "/etc/portage/make.conf" "0" "d"

    cf "CFLAGS=\"-march=native -O2 -pipe\""
    cf 'CXXFLAGS="${CFLAGS}"'
        case ${arch} in
        i686)
            cf 'CHOST="i686-pc-linux-gnu"'
        ;;
        amd64)
            cf 'CHOST="x86_64-pc-linux-gnu"'
        ;;
        esac
    cf 'LDFLAGS="-Wl,-O1 -Wl,--as-needed -Wl,--sort-common -Wl,--hash-style=gnu"'
    cf 'ACCEPT_KEYWORDS="'${kw}'"'
    cf 'ACCEPT_LICENSE="*"'
    cf 'MAKEOPTS="-j'${core}'"'
    cf ''
    cf '# It is recommended to leave WANT_MP disabled because of the problems it may trigger.'
    cf '# WANT_MP="true"'
    cf ''
    
    cf '#cpu'
    cf 'USE="${USE} '${available_cpu_flags}'"'
    cf ''
    cf '#file systems'
    cf 'USE="${USE} btrfs fat hfs inotify jfs nfs ntfs reiser4 reiserfs sysfs xfs"'
    cf ''
    cf '#base system'
    cf 'USE="${USE} acl acpi bash-completion berkdb bidi bzip2 crypt css dbus gnutls '
    cf '    gudev ipv6 kmod lzma lzo minimal ncurses nls nptl pam policykit profile rar '
    cf '    readline sqlite sqlite3 ssl symlink systemd tcpd truetype udev unicode usb vdpau zlib"'
    cf ''
    cf '#toolchain'
    cf 'USE="${USE} fortran mudflap openmp"'
    cf ''
    cf '#disabled'
    cf 'USE="${USE} -apm -arts -avahi -beagle -bindist -branding -consolekit -cpudetection -debug '
    cf '    -dhclient -doc -dso -eds -esd -evo -git -gdbm -gphoto2 -gpm -gstreamer -hal -hunspell '
    cf '    -introspection -java -joystick -kdeprefix -kerberos -ldap -mono -mysql '
    cf '    -nss -openexr -orc -oss -perl -spell -static -static-libs -xscreensaver -zemberek"'
    cf ''
    cf '#printer'
    cf 'USE="${USE} -cups -foomaticdb -scanner"'
    cf ''
    cf '#laptop'
    
    case ${type} in
    laptop)
        cf 'USE="${USE} bluetooth hddtemp ieee1394 irda laptop lm_sensors pcmcia wifi"'
    ;;
    pc)
        cf 'USE="${USE} -bluetooth -hddtemp -ieee1394 -irda -laptop -lm_sensors -pcmcia -wifi"'
    ;;
    esac
    
    cf ''
    cf '#internet'
    cf 'USE="${USE} -aim -icq -imap -irc -jabber -msn -oscar -rss -slp -yahoo"'
    cf ''
    
    case ${setup} in
    normal)
        cf '#codecs'
        cf 'USE="${USE} a52 aac avi dts dv encode ffmpeg flac gsm lame '
        cf '    mad matroska mp3 mp4 mpeg musepack ogg openal quicktime real '
        cf '    speex theora vorbis win32codecs x264 xvid"'
        cf ''
        cf '#multimedia'
        cf 'USE="${USE} alsa audiofile cdda cddb cdr dri dvb dvd dvdr '
        cf '    fam -jack ipod -mjpeg -mp3rtp -musicbrainz network -pulseaudio '
        cf '    sdl -v4l -v4l2 vcd vpx -wmf -xine"'
        cf ''
        cf '#X'
        cf 'USE="${USE} cairo dga gif gtk opengl svg tiff X -xinerama xpm"'
        cf ''
        cf '#xfce'
        cf 'USE="${USE} startup-notification thunar xfce -gnome -kde '
        cf '    -nautilus -qt3support -qt4"'
    ;;
    basic)
        cf '#codecs'
        cf 'USE="${USE} -a52 -aac -avi -dts -dv -encode -ffmpeg -flac '
        cf '    -gsm -lame -mad -matroska -mp3 -mp4 -mpeg -musepack -ogg -openal '
        cf '    -quicktime -real -speex -theora -vorbis -win32codecs -x264 -xvid"'
        cf ''
        cf '#multimedia'
        cf 'USE="${USE} alsa -audiofile -cdda -cddb cdr dri -dvb dvd '
        cf '    dvdr fam -jack -ipod -mjpeg -mp3rtp -musicbrainz network -pulseaudio '
        cf '    sdl -v4l -v4l2 -vcd -vpx -wmf -xine"'
        cf ''
        cf '#X'
        cf 'USE="${USE} -cairo -dga -gif -gtk -opengl -svg -tiff -X -xinerama -xpm"'
        cf ''
        cf '#no desktop environment'
        cf 'USE="${USE} -gnome -kde -nautilus -qt3support -qt4 '
        cf '    -startup-notification -thunar -xfce"'
    ;;
    esac
    
    cf ''
    
    case ${arch} in
    amd64)
        cf '#64bit'
        cf 'USE="${USE} multilib"'
        cf ''
    ;;
    esac
    
    cf 'VIDEO_CARDS="dummy fbdev vesa"'
    
    case ${type} in
    pc)
        cf 'INPUT_DEVICES="evdev"'
    ;;
    laptop)
        cf 'INPUT_DEVICES="evdev synaptics"'
    ;;
    esac
    
    case ${keymap} in
    br)
        cf 'LINGUAS="pt_BR"'
    ;;
    trq|trf)
        cf 'LINGUAS="tr"'
    ;;
    us)
        cf 'LINGUAS="en"'
    ;;
    esac
    
    cf 'AUTOCLEAN="yes"'
    cf 'CONFIG_PROTECT="/etc /etc/fstab /etc/hosts /etc/locale.conf /etc/locale.gen '
    cf '    /home/'${username}'/.dmrc /etc/localtime /etc/sudoers /etc/sysctl.conf '
    cf '    /etc/X11/xorg.conf.d /etc/portage/package.use /etc/conf.d/domainname '
    cf '    /etc/hostname /etc/conf.d/hwclock /etc/vconsole.conf /etc/conf.d/net '
    cf '    /etc/modprobe.d/blacklist.conf /var/lib/AccountsService/users/'${username}' '
    cf '    /etc/portage/env /etc/X11/gdm /usr/share/config/kdm"'
    cf 'PORTDIR="/usr/portage"'
    cf 'DISTDIR="${PORTDIR}/distfiles"'
    cf 'PKGDIR="${PORTDIR}/packages"'
    cf 'PORTDIR="/usr/portage"'
    cf 'PORTAGE_TMPDIR="/var/tmp"'
    cf 'PORTAGE_COMPRESS="bzip2"'
    cf 'PORTAGE_COMPRESS_FLAGS="-9"'
    cf 'PORTAGE_NICENESS="15"'
    cf 'PORTAGE_RSYNC_INITIAL_TIMEOUT="10"'
    cf 'PORTAGE_RSYNC_RETRIES="5"'
    cf 'FEATURES="-ccache -distcc fixlafiles -news -parallel-fetch sandbox usersandbox userfetch userpriv nodoc noinfo"'
    cf 'GENTOO_MIRRORS="'${mirrorlist}'"'
    cf 'RSYNC="rsync://rsync2.us.gentoo.org rsync://rsync3.us.gentoo.org rsync://rsync25.us.gentoo.org"'
        if [ "${blimit}" -gt "0" ]; then
            cf 'FETCHCOMMAND="${FETCHCOMMAND} --limit-rate='${blimit}'k"'
            cf 'RESUMECOMMAND="${RESUMECOMMAND} --limit-rate='${blimit}'k"'
        fi
    cf 'EMERGE_DEFAULT_OPTS="--autounmask=y --autounmask-write=y --with-bdeps=y --quiet-build"'
        case ${setup} in
        normal)
            case ${type} in
            laptop)
                cf 'XFCE_PLUGINS="brightness menu trash"'
            ;;
            pc)
                cf 'XFCE_PLUGINS="menu trash"'
            ;;
            esac
        ;;
        esac
    cf 'PYTHON_TARGETS="python2_7 python3_3"'
    cf 'GRUB_PLATFORMS="pc"'
    cf ''

    echo; eb2 "* "; eg2 "Creating"; er " package.use..."; sleep 0.5s

    fl "/etc/portage/package.use" "b" "d"
    
    cf "app-admin/conky imlib mpd truetype weather-metar -wifi"
    cf "app-admin/gnome-system-tools nfs policykit"
    cf "app-admin/system-tools-backends policykit"
    cf "app-emulation/emul-linux-x86-java alsa X nsplugin"
    cf "app-office/abiword -collab openxml -plugins wordperfect"
    cf "app-office/gnumeric -perl -python"
    cf "app-text/acroread nsplugin"
    cf "dev-db/mysql embedded"
    cf "dev-java/sun-jre-bin nsplugin"
    cf "dev-java/swt firefox"
    cf "dev-lang/perl ithreads"
    cf "dev-lang/python threads"
    cf "dev-lang/spidermonkey threadsafe"
    cf "dev-libs/glib -fam"
    cf "dev-libs/libcdio cddb"
    cf "dev-libs/libxml2 python"
    cf "dev-libs/libxslt crypt python"
    cf "dev-libs/xmlrpc-c curl libwww"
    cf "dev-python/PyQt4 sql webkit kde multimedia"
    cf "dev-vcs/git curl webdav -gtk"
    cf "gnome-base/gdm remote -consolekit"
    cf "gnome-base/gnome-applets gstreamer networkmanager policykit"
    cf "gnome-base/gnome-session branding"
    cf "gnome-base/gvfs fuse gdu -gphoto2 -http"
    cf "gnome-base/librsvg nsplugin"
    cf "gnome-extra/libgsf thumbnail"
    cf "gnustep-base/gnustep-back-cairo -glitz"
    cf "kde-base/okular djvu ebook jpeg pdf tiff"
    cf "media-gfx/blender blender-game"
    cf "media-gfx/digikam gphoto2"
    cf "media-gfx/gimp alsa curl dbus gimpprint gtkhtml jpeg mmx mng png python sse svg tiff"
    cf "media-gfx/gthumb gphoto2"
    cf "media-gfx/imagemagick -perl"
    cf "media-gfx/sane-backends gphoto2"
    cf "media-gfx/xsane gimp"
    cf "media-libs/gd fontconfig jpeg png xpm"
    cf "media-libs/imlib2 nls zlib X"
    cf "media-libs/libcanberra gtk"
    cf "media-libs/libgphoto2 exif"
    cf "media-libs/libpng apng"
    cf "media-libs/libquicktime schroedinger"
    cf "media-libs/libvorbis aotuv"
    cf "media-libs/mesa g3dvl gallium llvm -motif pic vdpau xcb"
    cf "media-libs/xine-lib dts imagemagick mng modplug vcd vidix xcb xvmc"
    cf "media-libs/win32codecs real"
    cf "media-plugins/alsa-plugins -pulseaudio"
    cf "media-sound/lame -gtk"
    cf "media-sound/pulseaudio -avahi glib gnome"
    cf "media-video/avidemux -qt4 alsa aac dts encode fontconfig gtk lame truetype vorbis x264 xv xvid"
    cf "media-video/dvdrip vcd subtitles"
    cf "media-video/ffmpeg -altivec amr dirac encode faac faad schroedinger theora threads v4l v4l2 vaapi vorbis -X x264 xvid"
    cf "media-video/gxine xcb"
    cf "media-video/mjpegtools yv12"
    cf "media-video/ogmrip ogm srt"
    cf "media-video/totem nsplugin"
    cf "media-video/transcode a52 -altivec dvd iconv imagemagick lzo mjpeg mp3 mpeg nuv ogg postproc quicktime vorbis xvid"
    cf "net-dialup/ppp atm ipv6"
    cf "net-dns/avahi autoipd mdnsresponder-compat"
    cf "net-dns/pdns-recursor lua"
    cf "net-nds/openldap gnutls"
    cf "net-fs/samba automount"
    cf "net-im/pidgin -gstreamer -perl -python"
    cf "net-irc/irssi -perl"
    cf "net-libs/libproxy -gnome -xulrunner"
    cf "net-libs/opal sip"
    cf "net-libs/ptlib wav"
    cf "net-misc/curl -ares gnutls libssh2 ldn"
    cf "net-misc/dhcp minimal"
    cf "net-misc/networkmanager dhcpcd resolvconf wext -connection-sharing -modemmanager"
    cf "net-misc/ntp caps opentpd -ipv6"
    cf "net-misc/nxserver-freenx nxclient"
    cf "net-misc/wicd -pm-utils"
    cf "net-print/cups acl gnutls pam -perl ppds -python samba ssl"
    cf "net-print/gutenprint gimp ppds"
    cf "net-print/hplip minimal ppds scanner"
    cf "net-wireless/wpa_supplicant eap-sim ps3 -fasteap madwifi wimax wps"
    cf "sys-apps/dbus -systemd"
    cf "sys-apps/help2man -nls"
    cf "sys-apps/iproute2 -minimal"
    cf "sys-apps/pciutils -zlib"
    cf "sys-apps/pmount crypt"
    cf "sys-apps/shadow -pam"
    cf "sys-auth/pambase -consolekit systemd"
    cf "sys-block/parted device-mapper"
    cf "sys-block/gparted dmraid fat hfs jfs mdadm ntfs reiser4 reiserfs xfs"
    cf "sys-devel/gcc -gtk -objc"
    cf "sys-devel/libperl ithreads"
    cf "sys-fs/ntfs3g acl ntfsprogs -external-fuse -suid"
    cf "sys-fs/udev extras"
    cf "sys-kernel/genkernel bash-completion"
    cf "sys-libs/glibc glibc-omitfp nptl nptlonly userlocales"
    cf "www-client/firefox -bindist custom-optimization -java"
    cf "x11-apps/xinit minimal"
    cf "x11-base/xorg-server -kdrive -minimal xorg"
    cf "x11-drivers/nvidia-drivers gtk"
    cf "x11-libs/cairo cleartype -glitz xcb"
    cf "x11-libs/libX11 xcb"
    cf "x11-libs/qt-core optimized-qmake"
    cf "x11-terms/xterm toolbar"
    cf "xfce-base/thunar -pcre xfce_plugins_trash"
    cf "xfce-base/xfdesktop thunar"

    dlt "/etc/make.conf"
    
    k_pp
    k_system
    k_kernel
    
    case "${grub}" in
    none)
        e="x"
    ;;
    [s:h]d[a-z] | [s:h]d[a-z][1-9] | [s:h]d[a-z][1-9][0-9] | [s:h]d[a-z][1-9][0-9][0-9])
        k_grub
    ;;
    esac
    
    k_needed
    
    echo; eb2 "* "; eg "Creating/Updating necessary configuration files..."; sleep 1s
    refresh

    liste="/etc/fstab /etc/hosts /etc/locale.conf /etc/locale.gen /etc/sysctl.conf /etc/timezone /etc/conf.d/domainname /etc/hostname /etc/conf.d/hwclock /etc/vconsole.conf /etc/conf.d/net /etc/modprobe.d/blacklist.conf"

    for d in ${liste}
    do
        echo; er2 "      * "; eg "${d}"; sleep 0.5s
        
        case ${d} in
        /etc/conf.d/domainname|/etc/timezone|/etc/hostname)
            fl "${d}" "0" "d"
        ;;
        /etc/sysctl.conf)
            fl "${d}" "b" "d"
        ;;
        *)
            fl "${d}" "0" "0"
        ;;
        esac
        
        case ${d} in
        /etc/fstab)
            cp fstab.eg ${d}
        ;;
        /etc/hosts)
            sed -i s:"^127.0.0.1.*":"127.0.0.1    ${hostname}.${domainname} ${hostname} localhost": ${d}
            sed -i s:"^\:\:1.*":"\:\:1          ${hostname}.${domainname} ${hostname} localhost": ${d}
        ;;
        /etc/locale.conf)
            cf "LANG=\"${lng}.UTF-8\""
            cf "LC_COLLATE=\"C\""
        ;;
        /etc/locale.gen)
            cf "${lng}.UTF-8 UTF-8"
            
            case ${keymap} in
            trq|trf)
                cf "${lng} ISO-8859-9"
            ;;
            *)
                cf "${lng} ISO-8859-1"
            ;;
            esac
            
            locale-gen &>/dev/null
        ;;
        /etc/timezone)
            case ${keymap} in
            br)
                echo "America/Sao_Paulo" > ${d}
            ;;
            trq|trf)
                echo "Europe/Istanbul" > ${d}
            ;;
            us)
                echo "UTC" > ${d}
            ;;
            esac
        ;;
        /etc/sysctl.conf)
            cf '## TCP SYN cookie protection'
            cf '## helps protect against SYN flood attacks'
            cf '## only kicks in when net.ipv4.tcp_max_syn_backlog is reached'
            cf 'net.ipv4.tcp_syncookies = 1'
            cf '## if not functioning as a router, there is no need to accept redirects or source routes'
            cf 'net.ipv4.conf.all.accept_redirects = 0'
            cf 'net.ipv4.conf.all.accept_source_route = 0'
            cf 'net.ipv4.conf.all.secure_redirects = 1'
            cf '## send redirects (not a router, disable it)'
            cf 'net.ipv4.conf.all.send_redirects = 0'
            cf '## Disable packet forwarding'
            cf 'net.ipv4.ip_forward = 0'
            cf '## protect against tcp time-wait assassination hazards'
            cf '## drop RST packets for sockets in the time-wait state'
            cf '## (not widely supported outside of linux, but conforms to RFC)'
            cf 'net.ipv4.tcp_rfc1337 = 1'
            cf '## source address verification (sanity checking)'
            cf '## helps protect against spoofing attacks'
            cf 'net.ipv4.conf.all.rp_filter = 1'
            cf 'net.ipv4.conf.default.rp_filter = 1'
            cf '## log martian packets'
            cf 'net.ipv4.conf.all.log_martians = 1'
            cf '## ignore echo broadcast requests to prevent being part of smurf attacks'
            cf 'net.ipv4.icmp_echo_ignore_broadcasts = 1'
            cf '## ignore bogus icmp errors'
            cf 'net.ipv4.icmp_ignore_bogus_error_responses = 1'
            cf ''
            cf 'vm.min_free_kbytes = 16384'
            
            case ${type} in
            pc)
                cf "vm.swappiness = 30"
                cf "vm.dirty_expire_centisecs = 600"
                cf "vm.dirty_writeback_centisecs = 600"
                cf "vm.dirty_background_ratio = 5"
                cf "vm.dirty_ratio = 20"
                cf "vm.laptop_mode = 0"
                cf "vm.vfs_cache_pressure = 50"
            ;;
            laptop)
                cf "vm.swappiness = 10"
                cf "vm.vfs_cache_pressure = 50"
            ;;
            esac
            
            sysctl -p &>/dev/null
        ;;
        /etc/conf.d/domainname)
            avoid_dup 'DNSDOMAIN="'${domainname}'"'
            avoid_dup 'NISDOMAIN="'${domainname}'"'
        ;;
        /etc/hostname)
            avoid_dup "${hostname}"
        ;;
        /etc/conf.d/hwclock)
            [[ -n "${windows}" ]] && avoid_dup 'clock="local"' || avoid_dup 'clock="UTC"'
            avoid_dup 'clock_systohc="YES"'
            avoid_dup 'clock_hctosys="YES"'
            avoid_dup 'clock_args=""'
        ;;
        /etc/vconsole.conf)        
            case ${keymap} in
            br)
                avoid_dup 'KEYMAP="br-abnt2"'
                avoid_dup 'FONT="lat9w-16"'
            ;;
            trq|trf)
                avoid_dup 'KEYMAP="'${keymap}'"'
                avoid_dup 'FONT="iso09.16"'
            ;;
            us)
                avoid_dup 'KEYMAP="'${keymap}'"'
                avoid_dup 'FONT="default8x16"'
            ;;
            esac
        ;;
        /etc/conf.d/net)
            avoid_dup 'dns_domain_lo="gentoo.powered"'
            
            for adapter in ${adapters_found}
            do
                avoid_dup 'auto_'${adapter}'="true"'
                avoid_dup 'config_'${adapter}'="dhcp"'
                avoid_dup 'dhcpcd_'${adapter}'="-t 10"'
                avoid_dup 'mtu_'${adapter}'="1492"'
                avoid_dup 'enable_ipv6_'${adapter}'="false"'
            done
        ;;
        /etc/modprobe.d/blacklist.conf)
            for d in amd76x_edac bcm43xx de4x5 dv1394 eepro100 eth1394 evbug \
            garmin_gps i2c_i801 ipv6 ite_cir net-pf-10 nouveau ohci1394 pcspkr \
            prism54 raw1394 sbp2 snd_aw2 snd_intel8x0m snd_pcsp usbkbd usblp \
            usbmouse video1394 wl  
            do
                cf "blacklist ${d}"
            done
            
            cf "# framebuffers"
            for e in aty128fb atyfb radeonfb cirrusfb cyber2000fb cyblafb gx1fb \
            hgafb i810fb intelfb kyrofb lxfb matroxfb_base neofb nvidiafb pm2fb \
            rivafb s1d13xxxfb savagefb sisfb sstfb tdfxfb tridentfb vesafb vfb \
            viafb vt8623fb
            do
                cf "blacklist ${e}"
            done
            
            cf "# modems"
            for f in snd-atiixp-modem snd-intel8x0m snd-via82xx-modem
            do
                cf "blacklist ${f}"
            done

            cf "# watchdog drivers"
            for g in acquirewdt advantechwdt alim1535_wdt alim7101_wdt booke_wdt \
            cpu5wdt eurotechwdt i6300esb i8xx_tco ib700wdt ibmasr indydog iTCO_wdt \
            it8712f_wdt it87_wdt ixp2000_wdt ixp4xx_wdt machzwd mixcomwd mpc8xx_wdt \
            mpcore_wdt mv64x60_wdt pc87413_wdt pcwd pcwd_pci pcwd_usb s3c2410_wdt \
            sa1100_wdt sbc60xxwdt sbc7240_wdt sb8360 sc1200wdt sc520_wdt sch311_wdt \
            scx200_wdt shwdt smsc37b787_wdt softdog twl4030_wdt w83627hf_wdt \
            w83697hf_wdt w83697ug_wdt w83877f_wdt w83977f_wdt wafer5823wdt wdt \
            wdt_pci wm8350_wdt
            do
                cf "blacklist ${g}"
            done
        ;;
        esac
    done
    
    echo; emerge --config sys-libs/timezone-data

    echo; eb2 "* "; eg "Configuring locale settings..."; sleep 0.5s
    
    [[ -e "/etc/env.d/02locale" ]] && { cp /etc/env.d/02locale /etc/env.d/02locale.backup; rm -rf /etc/env.d/02locale; }
    
    echo "LANG=\"${lng}.UTF-8\"" > /etc/env.d/02locale
    
    echo "LC_COLLATE=\"C\"" >> /etc/env.d/02locale
    
    echo; eb2 "* "; eg2 "Changing administrator "; er2 "(root)"; eg " password..."; sleep 0.5s

    echo "root:${rootpass}" | chpasswd

    echo; eb2 "* "; eg2 "Creating user "; er "${username}"; eg "..."; sleep 0.5s

    g_list="audio cdrom cdrw disk plugdev portage usb users video wheel"

    for g in ${g_list}; do
        c=$(grep "${g}" /etc/group | cut -d: -f1)
        
        case ${c} in
        ${g})
            [[ -z "${g_e}" ]] && g_e="${g}" || g_e="${g},${g_e}"
        ;;
        esac
    done

    useradd -m -G ${g_e} -s $(which bash) ${username}

    echo "${username}:${userpass}" | chpasswd
    
    if [ -e "/etc/sudoers" ]; then
        echo "%users   ALL=(root) ALL" >> /etc/sudoers
        echo "%users   ALL=(root) NOPASSWD: $(which shutdown)" >> /etc/sudoers
        echo "%users   ALL=(root) NOPASSWD: $(which reboot)" >> /etc/sudoers
        echo "%users   ALL=(root) NOPASSWD: $(which halt)" >> /etc/sudoers
        echo "%users   ALL=(root) NOPASSWD: $(which nano)" >> /etc/sudoers
        echo "%users   ALL=(root) NOPASSWD: $(which emerge)" >> /etc/sudoers
    fi

    lff
    
    [[ ! -e /home/${username}/.bash_profile ]] && cp /etc/skel/.bash_profile /home/${username}/
    
    echo export MOZ_DISABLE_PANGO=1 >> /home/${username}/.bash_profile

    fl "/home/${username}/.bashrc" "0" "0"

    cp /etc/skel/.bashrc ${trg_file}
    
    cf ""
    cf "export XDG_CONFIG_HOME=\"/home/${username}/.config\""
    cf "alias nn='sudo nano'"
    cf "alias mc='sudo nano /etc/portage/make.conf'"
    cf "alias pu='sudo nano /etc/portage/package.use'"
    cf "alias pm='sudo nano /etc/portage/package.mask'"
    cf "alias pk='sudo nano /etc/portage/package.keywords'"
    cf "alias rb='sudo shutdown -r now'"
    cf "alias sd='sudo shutdown -h now'"
        case ${setup} in
        normal)
            cf "alias lp='sudo leafpad'"
        ;;
        esac
    cf "alias em='sudo emerge'"
    cf "alias emp='sudo emerge -pv'"
    cf "alias ems='sudo emerge --quiet --sync'"
    
    cp ${trg_file} /root/
    
    cf ""
    cf 'PS1="\n\[\e[32;1m\][\[\e[37;1m\]\u\[\e[32;1m\]][\[\e[34;1m\]\w\[\e[32;1m\]]$ \[\e[0m\]"'
    cf ""
    
    echo "" >> /root/.bashrc
    echo 'PS1="\n\[\e[31;1m\][\u][\[\e[34;1m\]\w\[\e[31;1m\]]$ \[\e[0m\]"' >> /root/.bashrc
    echo "" >> /root/.bashrc
    
    [[ ! -e /root/.bash_profile ]] && cp /etc/skel/.bash_profile /root/
    
    case ${setup} in
    normal)
        k_x; k_xfce; k_lightdm; k_nm; k_alsa
    ;;
    basic)
        systemctl enable dhcpcd.service &>/dev/null
    ;;
    esac
    
    systemctl enable polkit.service &>/dev/null
    systemctl disable wicd.service &>/dev/null
    systemctl disable cups.service &>/dev/null
    
    case ${type} in
    laptop)
        systemctl enable bluetooth.service &>/dev/null
        systemctl enable wpa_supplicant.service &>/dev/null
    ;;
    pc)
        systemctl disable bluetooth.service &>/dev/null
        systemctl disable wpa_supplicant.service &>/dev/null
    ;;
    esac
    
    umrg "lafilefixer localepurge ntp"
    k_check
    end
}

end() {
    fl "/etc/portage/make.conf" "0" "0"

    avoid_dup 'FEATURES="-ccache -distcc fixlafiles parallel-fetch sandbox usersandbox userfetch userpriv nodoc noinfo"'
    
    sed -i -e '\!^FETCHCOMMAND=.*$!d' -e '\!^RESUMECOMMAND=.*$!d' ${trg_file}
    
    cl
    
    case ${keymap} in
    br)
        echo; eb2 "* "; eg2 "Removing all localization files excluding "; er2 "Portugese Brazilian"; eg "..."; sleep 2s; echo
    ;;
    trq|trf)
        echo; eb2 "* "; eg2 "Removing all localization files excluding "; er2 "Turkish"; eg "..."; sleep 2s; echo
    ;;
    us)
        echo; eb2 "* "; eg2 "Removing all localization files excluding "; er2 "English"; eg "..."; sleep 2s; echo
    ;;
    esac

    fl "/etc/locale.nopurge" "b" "d"
    
    cf "MANDELETE"
    cf "SHOWFREEDSPACE"
    cf "VERBOSE"
    cf ""
    
    case ${keymap} in
    br)
        cf "pt"
        cf "pt_BR"
        cf "pt_BR.UTF-8"
        cf "pt_BR ISO-8859-1"
    ;;
    trq|trf)
        cf "tr"
        cf "tr_TR"
        cf "tr_TR.UTF-8"
        cf "tr_TR ISO-8859-9"
    ;;
    us)
        cf "en"
        cf "en_US"
        cf "en_US.UTF-8"
        cf "en_US ISO-8859-1"
    ;;
    esac
    
    localepurge &>/dev/null
    
    [[ -z "${swap_part}" ]] && { swapoff /egswap &>/dev/null; rm -rf /egswap &>/dev/null; }
    
    er2 "* "; ey "Deleting temporary files..."; sleep 0.5s; echo
    
    rm -rf easygentoo.config *.DIGESTS *.md5sum *.eg ${lt} ${vl} &>/dev/null
    mv *.tar.bz2 /home/${username}/ &>/dev/null
    mv ${eg} /home/${username}/ &>/dev/null
    mv ${profile} /home/${username}/ &>/dev/null
    mv ${compiled} /home/${username}/${compiled} &>/dev/null
    rm -rf /var/tmp/portage/* &>/dev/null

    chown -fPR ${username} /home/${username}/
    
    echo; eb2 "* "; eg2 "Creating a small report at "; er2 "/home/${username}/report.txt"; eg "..."
    report
    
    cl; eb2 "* "; ew "Setup has finished. Now your system is ready to use. Congratulations! :)"; echo; sleep 5s

    echo; ey2 "* "; er "Shutting down..."; echo; shutdown -h now
}

report() {
    rp="/home/${username}/report.txt"
    
    echo "Total installation time (uptime): $(uptime | tr ',' ' ' | awk '{print $3}')" >> ${rp}
    echo "Number of compiled packages: $(wc -l < /home/${username}/${compiled})" >> ${rp}
    echo "List of compiled packages: /home/${username}/${compiled}" >> ${rp}
    echo "Selected CPU architecture: ${arch}" >> ${rp}
    echo "Selected tarball: ${tarball}" >> ${rp}
    echo "Total CPU cores: ${core}" >> ${rp}
    echo "Total RAM: ${ram_size} KB" >> ${rp}
    echo "User: ${username}" >> ${rp}
    echo "User password: ${userpass}" >> ${rp}
    echo "Administrator (root) password: ${rootpass}" >> ${rp}
    echo "Domainname: ${domainname}" >> ${rp}
    echo "Hostname: ${hostname}" >> ${rp}
    
    case ${keymap} in
    br)
        echo "Keymap: br-abnt2" >> ${rp}
    ;;
    *)
        echo "Keymap: ${keymap}" >> ${rp}
    ;;
    esac
    
    if [ -n "${adapters_found}" ]; then
        echo "Network adapters: ${adapters_found}" >> ${rp}
    else
        echo "No network adapters were found." >> ${rp}
    fi
    echo "" >> ${rp}
    
    case ${blimit} in
    0)
        echo "No bandwidth limit is used during setup." >> ${rp}
    ;;
    *)
        echo "Bandwidth limit used during setup: ${blimit} KB/s" >> ${rp}
    ;;
    esac

    case ${setup} in
    basic)
        echo "Xfce is not installed." >> ${rp}
    ;;
    normal)
        echo "Xfce is installed as a desktop environment." >> ${rp}
    ;;
    esac
    
    echo "" >> ${rp}
    echo "Mirrors:" >> ${rp}
    
    for m in ${mirrorlist}
    do
        echo "    ${m}" >> ${rp}
    done
    
    echo "" >> ${rp}
    echo "Partitions used:" >> ${rp}

    if [ -n "${boot_part}" ]; then
        echo "    Partition: ${boot_part}, File System: ${boot_fs}" >> ${rp}
        echo "    Mount Point: ${boot_mp}, Label: ${boot_label}" >> ${rp}
        echo "" >> ${rp}
    fi

    if [ -n "${swap_part}" ]; then
        echo "    Partition: ${swap_part}, File System: ${swap_fs}" >> ${rp}
        echo "    Mount Point: ${swap_mp}, Label: ${swap_label}" >> ${rp}
        echo "" >> ${rp}
    fi

    if [ -n "${home_part}" ]; then
        echo "    Partition: ${home_part}, File System: ${home_fs}" >> ${rp}
        echo "    Mount Point: ${home_mp}, Label: ${home_label}" >> ${rp}
        echo "" >> ${rp}
    fi

    if [ -n "${root_part}" ]; then
        echo "    Partition: ${root_part}, File System: ${root_fs}" >> ${rp}
        echo "    Mount Point: ${root_mp}, Label: ${root_label}" >> ${rp}
        echo "" >> ${rp}
    fi

    if [ -e "extra.eg" ]; then
        while read name part label fs mp
        do
            echo "    Partition: ${part}, File System: ${fs}" >> ${rp}
            echo "    Mount Point: ${mp}, Label: ${label}" >> ${rp}
            echo "" >> ${rp}
        done < extra.eg
    fi
}

start

exit 0
