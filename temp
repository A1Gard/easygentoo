#!/bin/bash
#################################
# ----------------------------- #
#         Easy Gentoo           #
# ----------------------------- #
#                               #
# a small Gentoo install script #
#              by               #
#        Åžehidcan Erdim         #
# sehidcan (at) gmail (dot) com #
#################################

normal=$'\e[0m'; red=$'\e[31;01m'; green=$'\e[32;01m'; yellow=$'\e[33;01m'; blue=$'\e[34;01m'; pink=$'\e[35;01m'; cyan=$'\e[36;01m'; white=$'\e[39;01m'

en() { echo "${normal}${*}${normal}";} ; er() { echo "${red}${*}${normal}";} ; eg() { echo "${green}${*}${normal}";} ; ey() { echo "${yellow}${*}${normal}";}
eb() { echo "${blue}${*}${normal}";} ; ep() { echo "${pink}${*}${normal}";} ; ec() { echo "${cyan}${*}${normal}";} ; ew() { echo "${white}${*}${normal}";}

en2() { echo -n "${normal}${*}${normal}";} ; er2() { echo -n "${red}${*}${normal}";} ; eg2() { echo -n "${green}${*}${normal}";} ; ey2() { echo -n "${yellow}${*}${normal}";}
eb2() { echo -n "${blue}${*}${normal}";} ; ep2() { echo -n "${pink}${*}${normal}";} ; ec2() { echo -n "${cyan}${*}${normal}";} ; ew2() { echo -n "${white}${*}${normal}";}

cl() { clear; sleep 0.5s; echo;}

exist() {
    which ${1} &>/dev/null && { ey2 "  * "; eb2 "${1}"; en " exists"; sleep 0.2s; } || { er2 "  * "; eb2 "${1}"; er " doesn't exist"; er "Some tools are missing - Please use a different install media/environment"; echo; exit 1; }
}

find_flags() {
    cpu_inst="$(grep flags /proc/cpuinfo | uniq | tr -s '[:blank:]' ' ' | cut -d':' -f2)"
    flags_list="3dnow 3dnowext mmx mmxext sse sse2 sse3 sse4 sse4a sse5 ssse3"

    for v in ${flags_list}
    do
        echo "${cpu_inst}" | grep -o -w "${v}" >> flags.eg
    done

    echo "${cpu_inst}" | grep -o -w "pni" &>/dev/null && echo "sse3" >> flags.eg

    a2v "available_cpu_flags=\"$(tr '\n' ' ' < flags.eg | sed -e 's:^[ \t]*::' -e 's:[ \t]*$::')\""
}

fl() {
    trg_file="${1}"
    
    mkdir -p "$(dirname ${trg_file})"
    
    if [ -e "${trg_file}" ]; then
        [[ "${2}" == "b" ]] && cp "${trg_file}" "${trg_file}".backup
        [[ "${3}" == "d" ]] && rm -rf "${trg_file}"
    else
        touch "${trg_file}"
    fi
}

avoid_dup() {
    if [ -n "${@}" ] && [ -n "${trg_file}" ]; then
        allofit="${@}"
        nameonly="$(echo ${allofit} | cut -d'=' -f1)"
        if [ -n "$(grep ^${nameonly} ${trg_file})" ];then
            sed -i s:"^${nameonly}=.*":"${allofit}": ${trg_file}
        else
            echo "${allofit}" >> ${trg_file}
        fi
    fi
}

cf() {
    [[ -n "${trg_file}" ]] && echo "$@" >> ${trg_file}
}

a2v() {
    echo "export $@" >> "${vl}"; vlist
}

csum() {
    md5sum -c $1
    case $? in
    0)
        check="ok"; csn="1"; sleep 1s
    ;;
    *)
        ((csn++))
        case ${csn} in
        3)
            echo; er "  Looks like the server has a corrupted version of the file or there is a technical problem."
            echo; er2 "  Press "; eg2 "c"; er " to ignore and try again."
            eg2 "s"; er " to cancel setup..."; echo
            
            while true
            do
                read -n1 islem
                case ${islem} in
                c)
                    check="ok"; csn="1"; break
                ;;
                s)
                    exit 1
                ;;
                esac
            done
        ;;
        *)
            check="x"; rm -rf $2; echo; er "  File is outdated or corrupted."
        esac
    ;;
    esac
}

shasum() {
    sha512sum -c $1
    case $? in
    0)
        check="ok"; ssn="1"; sleep 1s
    ;;
    *)
        ((ssn++))
        case ${ssn} in
        3)
            echo; er "  Looks like the server has a corrupted version of the file or there is a technical problem."
            echo; er2 "  Press "; eg2 "c"; er " to ignore and try again."
            eg2 "s"; er " to cancel setup..."; echo
            
            while true
            do
                read -n1 islem
                case ${islem} in
                c)
                    check="ok"; ssn="1"; break
                ;;
                s)
                    exit 1
                ;;
                esac
            done
        ;;
        *)
            check="x"; rm -rf $2; echo; er "  File is outdated or corrupted."
        esac
    ;;
    esac
}

tch() {
    f2t="${1}"
    [[ ! -e "${f2t}" ]] && touch "${f2t}"
    unset f2t
}

dlt() {
    f2d="${1}"
    [[ -e "${f2d}" ]] && rm -rf "${f2d}"
    unset f2d
}

on_off() {
    while true
    do
        [[ "$(ps a -o cmd | grep ${eg} | grep -v grep)" ]] && sleep 30s || { tch stop.eg; break; }
    done
}

net_watch() {
    until [ -e "stop.eg" ]
    do
        [[ "$(ping -nc1 www.google.com)" ]] || { [[ "$(ping -nc3 www.google.com)" ]] || connect_me &>/dev/null; }
        sleep 60s
    done
}

mirror_check() {
    until [ -e "connected.eg" ]
    do
        sleep 1s
    done
    
    [[ "$(grep 'mirror=' ${vl})" ]] && sed -i '\!^mirror=!d' ${vl}
    
    for mrr in ${mirrorlist}
    do
        # Trimming mirror name. Ex. http://gentoo.kiev.ua/ftp -->> gentoo.kiev.ua
        [[ "$(ping -nc3 $(echo ${mrr} | sed -e 's/.*\:\/\///' -e 's/\/.*$//'))" ]] && { a2v "mirror=\"${mrr}\""; break; }
    done
    
    # Cancel setup when there are no available mirrors
    [[ "$(grep 'mirror=' ${vl})" ]] || tch stop.eg
}

connect_me() {
    unset adapter trm pid
    killall ping dhcpcd ifconfig ip
    killall ping dhcpcd ifconfig ip
    killall ping dhcpcd ifconfig ip
    
    for adapter in ${adapters_found}
    do
        which ip && { ip link set ${adapter} down ; ip link set ${adapter} up; } || { ifconfig ${adapter} down; ifconfig ${adapter} up; }
        dlt "/var/run/dhcpcd-${adapter}.pid"
        sleep 3s; dhcpcd ${adapter}; sleep 7s
        [[ "$(ping -nc3 www.google.com)" ]] && { tch connected.eg; break; }
    done
}

mrg() {
    CONFIG_PROTECT_MASK="/etc" emerge --quiet-build $@ 2> /dev/null
}

umrg() {
    cl; eb2 "* "; eg2 "emerge "; er "--unmerge ${@}"
    CONFIG_PROTECT_MASK="/etc" emerge --quiet-build --unmerge $@ 2> /dev/null && { sed -i "/.*\/$@.*/d" ${compiled}; sed -i "/.*\/$@.*/d" pkg.lst; }
}

get_files() {
    lnk="$@"
    bname="$(basename $(echo ${lnk} | sed -e 's:^.*\:\/\/::' -e 's: .*::'))"
    
    while true
    do
        shut
        
        if [ -n "$(echo ${lnk} | grep -iv 'digest' | grep -iv 'md5' | grep 'tar.bz2')" ]; then
            wget --timeout=15 --tries=2 --waitretry=5 ${lnk} -O ${bname}
        else
            wget --timeout=15 --tries=2 --waitretry=5 ${lnk} -O ${bname} &>/dev/null
        fi
        
        case $? in
        0)
            break
        ;;
        *)
            mirror_check
        ;;
        esac
    done
    
    [[ -e "stop.eg" ]] && { echo; er "There are no available mirrors or setup was cancelled."; er "Exiting..."; echo; exit 1; }
}

inst() {
    make_list() {
        fl "pkg.lst" "0" "d"
        
        while read line
        do
            case "${line}" in
            "[ebuild"*)
                echo "${line}" | tr -s '[:blank:]' ' ' | sed -e 's:\[[0-9].*\]::' -e 's:\[.*ebuild.*\] :=:' -e 's: .*::' >> ${trg_file}
            ;;
            esac
        done < data.tmp
        
        while read p_line
        do
            case ${p_line} in
            =[A-Z]*/*|=[a-z]*/*)
                continue
            ;;
            *)
                sed -i "\!.*${p_line}.*!d" ${trg_file}
            ;;
            esac
        done < ${trg_file}
        
        fl "pkg_dup.lst" "0" "d"
        cp pkg.lst ${trg_file}
        
        case "${a}" in
        "-e system")
            emerge -pv --nodeps gentoo-sources | grep ebuild | grep gentoo-sources | tr -s '[:blank:]' ' ' | sed -e 's:\[[0-9].*\]::' -e 's:\[.*ebuild.*\] :=:' -e 's: .*::' >> ${trg_file}
            emerge -pv --nodeps genkernel | grep ebuild | grep genkernel | tr -s '[:blank:]' ' ' | sed -e 's:\[[0-9].*\]::' -e 's:\[.*ebuild.*\] :=:' -e 's: .*::' >> ${trg_file}
        ;;
        esac
        
        fl "fetched.lst" "0" "d"
        tch ${trg_file}
    }
    
    fetch() {
        killall "$(ps a -o pid,cmd | grep -i 'emerge --quiet-build -f --nodeps' | grep -v 'grep' | cut -d' ' -f1)" &>/dev/null
        while true
        do
            shut
            
            read -r pkg < pkg_dup.lst
            if [ -z "${pkg}" ]; then
                break
            else
                case "${pkg}" in
                *"/"*)
                    next="no"
                    while [ "${next}" != "yes" ]
                    do
                        CONFIG_PROTECT_MASK="/etc" emerge --quiet-build -f --nodeps ${pkg} 2> /dev/null
                        
                        case $? in
                        0)
                            cf "${pkg}"; next="yes"
                        ;;
                        *)
                            until [ -e "connected.eg" ]
                            do
                                sleep 1s
                            done
                        ;;
                        esac
                    done
                    sleep 1s
                ;;
                esac
            
                sed -i "\!.*${pkg}.*!d" pkg_dup.lst
            fi
        done
    }
    
    compile() {
        fl "pkg.lst" "0" "0"
        while true
        do
            read -r package < ${trg_file}
            
            if [ -z "${package}" ]; then
                break
            else
                if [ -e "${trg_file}" ]; then
                    cl
                    source "$(pwd)/merge.eg"
                    
                    [[ -n "${step}" ]] && echo "${step}"
                    
                    echo; ey2 "  Command: "; eg2 "  emerge "; er "${a}"
                    echo; eg2 "  Next packages "; ew2 "($(wc -l < ${trg_file}) packages total)"; eg ":"
                    
                    p_numb="1"
                    while read p_input
                    do
                        p_input="$(echo ${p_input} | cut -c 2-)"
                        case ${p_numb} in
                        1)
                            ey "    ${p_input}"
                        ;;
                        [2-5])
                            ew "    ${p_input}"
                        ;;
                        6)
                            break
                        ;;
                        esac
                        ((p_numb++))
                    done < ${trg_file}
                    
                    echo
                    
                    if [ -z "$(grep ${package} fetched.lst)" ]; then
                        echo; ew2 "  Waiting for package download..."
                        while [ -z "$(grep ${package} fetched.lst)" ]
                        do
                            sleep 5s
                            shut
                        done
                        ew "  Package downloaded."; echo
                    else
                        echo; echo
                    fi
                fi
                
                shut
                
                case ${package} in
                *sys-apps/kmod-*)
                    umrg "module-init-tools"
                ;;
                esac
                
                if [ -e "sys.eg" ]; then
                    mrg -e --oneshot --nodeps ${package}
                else
                    if [ -n "$(grep ${package} ${compiled})" ]; then
                        mrg -u --oneshot --nodeps ${package}
                    else
                        mrg --oneshot --nodeps ${package}
                    fi
                fi
                
                case $? in
                0)
                    sed -i "\!.*${package}.*!d" ${trg_file}
                    
                    if [ -z "$(grep $(echo ${package} | cut -c 2-) ${compiled})" ]; then
                        echo "${package}" | cut -c 2- >> ${compiled}
                    fi
                    
                    [[ -e "sys.eg" ]] && refresh
                    
                    case ${package} in
                    *sys-devel/gcc-[0-9]*)
                        set_gcc && refresh
                    ;;
                    */python-[0-9]*)
                        python-updater
                    ;;
                    esac
                ;;
                *)
                    rm -rf /var/tmp/portage/*$(echo ${package} | cut -c 2-)* &>/dev/null
                    lff; refresh
                ;;
                esac
            fi
        done
        
        # Making records for commands that doesn't get recorded to world file because of --oneshot parameter
        [[ "${a}" != "-e system" ]] && mrg -u ${a} 2>&1 > /dev/null
        
        step=""
    }
    
    if [ "${1}" != "sync" ] && [ -n "${1}" ]; then
        fl "merge.eg" "0" "d"
        cf "a=\"${1}\""
        
        source "$(pwd)/merge.eg"
        echo "emerge -pv ${a} 2>&1 | grep '^\['" > cmd.eg
        sh cmd.eg > data.tmp; rm -rf cmd.eg
        
        if [ -n "$(grep -i '^\[ebuild' data.tmp)" ]; then
            make_list
            fetch &>/dev/null &
            compile
        fi
    elif [ "${1}" == "sync" ]; then
        [[ -e "/usr/portage/metadata/timestamp.chk" ]] && rm -rf /usr/portage/metadata/timestamp.chk &>/dev/null
        CONFIG_PROTECT_MASK="/etc" emerge --quiet --sync &>/dev/null
    fi
}

k_grub() {
    step=$(echo; eb2 "* "; eg2 "Emerging "; er2 "grub "; eg "..."; echo; sleep 0.5s)
    inst "grub"
    
    echo; eg2 "  Creating "; er2 "grub.conf"; eg "..."; sleep 0.5s

    krnl="$(ls /boot/kernel-${eg}*)"

    [[ -e "${krnl}" ]] && krnl2="$(ls /boot/kernel-${eg}* | cut -c 6-)" || krnl2="/kernel-not-available"

    init="$(ls /boot/initramfs-${eg}*)"

    [[ -e "${init}" ]] && init2="$(ls /boot/initramfs-${eg}* | cut -c 6-)" || init2="/initramfs-not-available"
    
    [[ -n "${boot_part}" ]] && bn="$(echo ${boot_part} | cut -c 4-)"

    rn="$(echo ${root_part} | cut -c 4-)"; rn="$((rn-1))"

        case $(echo ${grub} | cut -c 3-) in
        [a-z])
            dn="$(echo ${grub} | cut -c 3- | tr 'a-z' '0-26')"
        ;;
        [a-z][0-9])
            dn="$(echo ${grub} | cut -c 3- | cut -c -1 | tr 'a-z' '0-26')"
        ;;
        [a-z][0-9][0-9])
            dn="$(echo ${grub} | cut -c 3- | cut -c -2 | tr 'a-z' '0-26')"
        ;;
        esac

    fl "grub.eg" "0" "d"
    
    cf '#This file is created automatically.'
    cf ' '
    cf 'default 0'
    cf 'timeout 10'
        if [ -n "${boot_part}" ]; then
            bn="$((bn-1))"
            cf "splashimage=(hd${dn},${bn})/grub/splash.xpm.gz"
            cf ' '
            cf "title Gentoo Linux"
            cf "root (hd${dn},${bn})"
            case ${rootfs} in
            ext3|ext4)
                if [ -z "${swap_part}" ]; then
                    cf "kernel (hd${dn},${bn})${krnl2} root=/dev/ram0 init=/linuxrc ramdisk=8192 real_root=LABEL=${root_label} udev real_rootfs=${root_fs} real_rootflags=data=ordered splash=silent"
                    cf "initrd (hd${dn},${bn})${init2}"
                else
                    cf "kernel (hd${dn},${bn})${krnl2} root=/dev/ram0 init=/linuxrc ramdisk=8192 real_root=LABEL=${root_label} udev real_rootfs=${root_fs} real_rootflags=data=ordered real_resume=LABEL=${swap_label} splash=silent"
                    cf "initrd (hd${dn},${bn})${init2}"
                fi
            ;;
            *)
                if [ -z "${swap_part}" ]; then
                    cf "kernel (hd${dn},${bn})${krnl2} root=/dev/ram0 init=/linuxrc ramdisk=8192 real_root=LABEL=${root_label} udev real_rootfs=${root_fs} splash=silent"
                    cf "initrd (hd${dn},${bn})${init2}"
                else
                    cf "kernel (hd${dn},${bn})${krnl2} root=/dev/ram0 init=/linuxrc ramdisk=8192 real_root=LABEL=${root_label} udev real_rootfs=${root_fs} real_resume=LABEL=${swap_label} splash=silent"
                    cf "initrd (hd${dn},${bn})${init2}"
                fi
            ;;
            esac
        else
            cf "splashimage=(hd${dn},${rn})/boot/grub/splash.xpm.gz"
            cf ' '
            cf "title Gentoo Linux"
            cf "root (hd${dn},${rn})"
            case ${rootfs} in
            ext3|ext4)
                if [ -z "${swap_part}" ]; then
                    cf "kernel ${krnl} root=/dev/ram0 init=/linuxrc ramdisk=8192 real_root=LABEL=${root_label} udev real_rootfs=${root_fs} real_rootflags=data=ordered splash=silent"
                    cf "initrd ${init}"
                else
                    cf "kernel ${krnl} root=/dev/ram0 init=/linuxrc ramdisk=8192 real_root=LABEL=${root_label} udev real_rootfs=${root_fs} real_rootflags=data=ordered real_resume=LABEL=${swap_label} splash=silent"
                    cf "initrd ${init}"
                fi
            ;;
            *)
                if [ -z "${swap_part}" ]; then
                    cf "kernel ${krnl} root=/dev/ram0 init=/linuxrc ramdisk=8192 real_root=LABEL=${root_label} udev real_rootfs=${root_fs} splash=silent"
                    cf "initrd ${init}"
                else
                    cf "kernel ${krnl} root=/dev/ram0 init=/linuxrc ramdisk=8192 real_root=LABEL=${root_label} udev real_rootfs=${root_fs} real_resume=LABEL=${swap_label} splash=silent"
                    cf "initrd ${init}"
                fi
            ;;
            esac
        fi
    cf ' '
    
    if [ -n "${windows}" ]; then
        case $(echo ${windows} | cut -c 3-) in
        [a-z][0-9])
            wdn=$(echo ${windows} | cut -c 3- | cut -c -1 | tr 'a-z' '0-26')
        ;;
        [a-z][0-9][0-9])
            wdn=$(echo ${windows} | cut -c 3- | cut -c -2 | tr 'a-z' '0-26')
        ;;
        esac
        
        wpn="$(echo ${windows} | cut -c 4-)"
        wpn=$((wpn-1))
    
        cf "title Windows"
        cf "rootnoverify (hd${wdn},${wpn})"
        cf "makeactive"
        cf "chainloader +1"
        cf " "
    fi
    
    [[ -e "/boot/grub/grub.conf" ]] && { cp /boot/grub/grub.conf /boot/grub/grub.conf.backup; rm -rf /boot/grub/grub.conf; }

    cp grub.eg /boot/grub/grub.conf

    echo; eg2 "  Installing grub to "; er2 "MBR"; eg "..."; echo; sleep 0.5s
    
    [[ -n "${boot_part}" ]] && cp /proc/mounts /etc/mtab || grep -v rootfs /proc/mounts > /etc/mtab

    [[ -e "/boot/grub/device.map" ]] && sed -i "\!.*fd[0-9].*!d" /boot/grub/device.map
    
    fl "ginst.eg" "0" "d"
    
    if [ -n "${boot_part}" ]; then
        cf "root (hd${dn},${bn})"
        cf "setup (hd${dn})"
        cf "quit"
    elif [ -z "${boot_part}" ]; then
        cf "root (hd${dn},${rn})"
        cf "setup (hd${dn})"
        cf "quit"
    fi
    
    grub < ${trg_file}
}

k_kernel() {
    step=$(echo; eb2 "* "; eg "Emerging kernel... "; echo; sleep 0.5s)
    inst "genkernel gentoo-sources"
    step=$(echo; eb2 "* "; eg "Emerging filesystem tools... "; echo; sleep 0.5s)
    inst "${progs}"
    
    case $arch in
    i686)
        cp /usr/src/linux/arch/x86/configs/i386_defconfig easygentoo.config
    ;;
    amd64)
        cp /usr/src/linux/arch/x86/configs/x86_64_defconfig easygentoo.config
    ;;
    esac

    m1="CONFIG_MTRR CONFIG_MTRR_SANITIZER CONFIG_X86_PAT CONFIG_PREEMPT_NONE CONFIG_PREEMPT_VOLUNTARY 
    CONFIG_PREEMPT CONFIG_X86_PAE CONFIG_NET_SCHED CONFIG_BLK_DEV_RAM CONFIG_ATA CONFIG_ATA_ACPI 
    CONFIG_ATA_GENERIC CONFIG_SATA_AHCI CONFIG_MD CONFIG_BLK_DEV_DM CONFIG_USB_ARCH_HAS_OHCI 
    CONFIG_USB_ARCH_HAS_EHCI CONFIG_CONNECTOR CONFIG_LOGO_LINUX_CLUT224 CONFIG_FB CONFIG_FB_VESA 
    CONFIG_FB_UVESA CONFIG_FB_BOOT_VESA_SUPPORT CONFIG_SCHED_MC CONFIG_SCHED_SMT CONFIG_NLS 
    CONFIG_NLS_DEFAULT CONFIG_NLS_CODEPAGE_437 CONFIG_NLS_CODEPAGE_857 CONFIG_NLS_ASCII 
    CONFIG_NLS_ISO8859_1 CONFIG_NLS_ISO8859_9 CONFIG_NLS_ISO8859_15 CONFIG_NLS_UTF8 CONFIG_IPV6
    CONFIG_NETDEVICES CONFIG_VETH CONFIG_NET_SB1000 CONFIG_ARCNET CONFIG_IA32_EMULATION 
    CONFIG_IA32_AOUT CONFIG_DEBUG_STACK_USAGE CONFIG_FB_NVIDIA CONFIG_FB_RADEON"
    m2="CONFIG_MII CONFIG_MACB CONFIG_ARM_AM79C961A CONFIG_ARM_ETHER1 CONFIG_ARM_ETHER3 CONFIG_ARM_ETHERH 
    CONFIG_ARM_AT91_ETHER CONFIG_ARM_KS8695_ETHER CONFIG_EP93XX_ETH CONFIG_IXP4XX_ETH CONFIG_W90P910_ETH 
    CONFIG_AX88796 CONFIG_AX88796_93CX6 CONFIG_MACE CONFIG_BMAC CONFIG_ARIADNE CONFIG_A2065 CONFIG_HYDRA 
    CONFIG_ZORRO8390 CONFIG_APNE CONFIG_MAC8390 CONFIG_MAC89x0 CONFIG_MACSONIC CONFIG_MACMACE 
    CONFIG_MVME147_NET CONFIG_MVME16x_NET CONFIG_BVME6000_NET CONFIG_ATARILANCE CONFIG_SUN3LANCE 
    CONFIG_SUN3_82586 CONFIG_HPLANCE CONFIG_LASI_82596 CONFIG_SNI_82596 CONFIG_KORINA CONFIG_MIPS_JAZZ_SONIC 
    CONFIG_XTENSA_XT2000_SONIC CONFIG_MIPS_AU1X00_ENET CONFIG_SGI_IOC3_ETH CONFIG_MIPS_SIM_NET 
    CONFIG_SGI_O2MACE_ETH CONFIG_STNIC CONFIG_SH_ETH CONFIG_SUNLANCE CONFIG_HAPPYMEAL CONFIG_SUNBMAC 
    CONFIG_SUNQE CONFIG_SUNGEM CONFIG_CASSINI CONFIG_SUNVNET CONFIG_NET_VENDOR_3COM CONFIG_EL1 CONFIG_EL2 
    CONFIG_ELPLUS CONFIG_EL16 CONFIG_EL3 CONFIG_3C515 CONFIG_ELMC CONFIG_ELMC_II CONFIG_VORTEX CONFIG_TYPHOON 
    CONFIG_LANCE CONFIG_NET_VENDOR_SMC CONFIG_WD80x3 CONFIG_ULTRAMCA CONFIG_ULTRA CONFIG_ULTRA32 
    CONFIG_BFIN_MAC CONFIG_SMC9194 CONFIG_SMC91X CONFIG_NET_NETX CONFIG_TI_DAVINCI_EMAC CONFIG_DM9000 
    CONFIG_ENC28J60 CONFIG_ETHOC CONFIG_GRETH CONFIG_SMC911X CONFIG_SMSC911X CONFIG_NET_VENDOR_RACAL 
    CONFIG_NI5010 CONFIG_NI52 CONFIG_NI65 CONFIG_DNET"
    agp="CONFIG_AGP CONFIG_AGP_ALI CONFIG_AGP_ATI CONFIG_AGP_AMD CONFIG_AGP_AMD64 CONFIG_AGP_INTEL 
    CONFIG_AGP_NVIDIA CONFIG_AGP_SIS CONFIG_AGP_SWORKS CONFIG_AGP_VIA CONFIG_AGP_I460 CONFIG_AGP_HP_ZX1 
    CONFIG_AGP_PARISC CONFIG_AGP_ALPHA_CORE CONFIG_AGP_UNINORTH CONFIG_AGP_EFFICEON 
    CONFIG_AGP_SGI_TIOCA CONFIG_VGA_ARB"
    audio="CONFIG_SND_PCI CONFIG_SND_AD1889 CONFIG_SND_ALS300 CONFIG_SND_ALS4000 CONFIG_SND_ALI5451 
    CONFIG_SND_ATIIXP CONFIG_SND_ATIIXP_MODEM CONFIG_SND_AU8810 CONFIG_SND_AU8820 CONFIG_SND_AU8830 
    CONFIG_SND_AW2 CONFIG_SND_AZT3328 CONFIG_SND_BT87X CONFIG_SND_CA0106 CONFIG_SND_CMIPCI 
    CONFIG_SND_OXYGEN CONFIG_SND_CS4281 CONFIG_SND_CS46XX CONFIG_SND_CS5530 CONFIG_SND_CS5535AUDIO 
    CONFIG_SND_CTXFI CONFIG_SND_DARLA20 CONFIG_SND_GINA20 CONFIG_SND_LAYLA20 CONFIG_SND_DARLA24 
    CONFIG_SND_GINA24 CONFIG_SND_LAYLA24 CONFIG_SND_MONA CONFIG_SND_MIA CONFIG_SND_ECHO3G 
    CONFIG_SND_INDIGO CONFIG_SND_INDIGOIO CONFIG_SND_INDIGODJ CONFIG_SND_INDIGOIOX 
    CONFIG_SND_INDIGODJX CONFIG_SND_EMU10K1 CONFIG_SND_EMU10K1X CONFIG_SND_ENS1370 
    CONFIG_SND_ENS1371 CONFIG_SND_ES1938 CONFIG_SND_ES1968 CONFIG_SND_FM801 CONFIG_SND_HDA_INTEL 
    CONFIG_SND_HDA_HWDEP CONFIG_SND_HDA_CODEC_REALTEK CONFIG_SND_HDA_CODEC_ANALOG 
    CONFIG_SND_HDA_CODEC_SIGMATEL CONFIG_SND_HDA_CODEC_VIA CONFIG_SND_HDA_CODEC_ATIHDMI 
    CONFIG_SND_HDA_CODEC_NVHDMI CONFIG_SND_HDA_CODEC_INTELHDMI CONFIG_SND_HDA_CODEC_CIRRUS 
    CONFIG_SND_HDA_CODEC_CONEXANT CONFIG_SND_HDA_CODEC_CA0110 CONFIG_SND_HDA_CODEC_CMEDIA 
    CONFIG_SND_HDA_CODEC_SI3054 CONFIG_SND_HDA_GENERIC CONFIG_SND_HDSP CONFIG_SND_HDSPM 
    CONFIG_SND_HIFIER CONFIG_SND_ICE1712 CONFIG_SND_ICE1724 CONFIG_SND_INTEL8X0 CONFIG_SND_INTEL8X0M 
    CONFIG_SND_KORG1212 CONFIG_SND_LX6464ES CONFIG_SND_MAESTRO3 CONFIG_SND_MIXART CONFIG_SND_NM256 
    CONFIG_SND_PCXHR CONFIG_SND_RIPTIDE CONFIG_SND_RME32 CONFIG_SND_RME96 CONFIG_SND_RME9652 
    CONFIG_SND_SIS7019 CONFIG_SND_SONICVIBES CONFIG_SND_TRIDENT CONFIG_SND_VIA82XX 
    CONFIG_SND_VIA82XX_MODEM CONFIG_SND_VIRTUOSO CONFIG_SND_VX222 CONFIG_SND_YMFPCI"
    cam="CONFIG_MEDIA_SUPPORT CONFIG_VIDEO_DEV CONFIG_VIDEO_V4L1_COMPAT CONFIG_V4L_USB_DRIVERS 
    CONFIG_USB_VIDEO_CLASS CONFIG_USB_VIDEO_CLASS_INPUT_EVDEV CONFIG_USB_GSPCA CONFIG_USB_M5602 
    CONFIG_USB_STV06XX CONFIG_USB_GL860 CONFIG_USB_GSPCA_BENQ CONFIG_USB_GSPCA_CONEX 
    CONFIG_USB_GSPCA_CPIA1 CONFIG_USB_GSPCA_ETOMS CONFIG_USB_GSPCA_FINEPIX CONFIG_USB_GSPCA_JEILINJ 
    CONFIG_USB_GSPCA_MARS CONFIG_USB_GSPCA_MR97310A CONFIG_USB_GSPCA_OV519 CONFIG_USB_GSPCA_OV534 
    CONFIG_USB_GSPCA_OV534_9 CONFIG_USB_GSPCA_PAC207 CONFIG_USB_GSPCA_PAC7302 CONFIG_USB_GSPCA_PAC7311 
    CONFIG_USB_GSPCA_SN9C2028 CONFIG_USB_GSPCA_SN9C20X CONFIG_USB_GSPCA_SN9C20X_EVDEV 
    CONFIG_USB_GSPCA_SONIXB CONFIG_USB_GSPCA_SONIXJ CONFIG_USB_GSPCA_SPCA500 CONFIG_USB_GSPCA_SPCA501 
    CONFIG_USB_GSPCA_SPCA505 CONFIG_USB_GSPCA_SPCA506 CONFIG_USB_GSPCA_SPCA508 CONFIG_USB_GSPCA_SPCA561 
    CONFIG_USB_GSPCA_SQ905 CONFIG_USB_GSPCA_SQ905C CONFIG_USB_GSPCA_STK014 CONFIG_USB_GSPCA_STV0680 
    CONFIG_USB_GSPCA_SUNPLUS CONFIG_USB_GSPCA_T613 CONFIG_USB_GSPCA_TV8532 CONFIG_USB_GSPCA_VC032X 
    CONFIG_USB_GSPCA_ZC3XX CONFIG_VIDEO_PVRUSB2 CONFIG_VIDEO_PVRUSB2_SYSFS CONFIG_VIDEO_PVRUSB2_DVB 
    CONFIG_VIDEO_PVRUSB2_DEBUGIFC CONFIG_VIDEO_HDPVR CONFIG_VIDEO_EM28XX CONFIG_VIDEO_EM28XX_ALSA 
    CONFIG_VIDEO_EM28XX_DVB CONFIG_VIDEO_TLG2300 CONFIG_VIDEO_CX231XX CONFIG_VIDEO_CX231XX_ALSA 
    CONFIG_VIDEO_CX231XX_DVB CONFIG_VIDEO_USBVISION CONFIG_USB_VICAM CONFIG_USB_IBMCAM 
    CONFIG_USB_KONICAWC CONFIG_USB_QUICKCAM_MESSENGER CONFIG_USB_ET61X251 CONFIG_VIDEO_OVCAMCHIP 
    CONFIG_USB_W9968CF CONFIG_USB_OV511 CONFIG_USB_SE401 CONFIG_USB_SN9C102 CONFIG_USB_STV680 
    CONFIG_USB_ZC0301 CONFIG_USB_PWC CONFIG_USB_PWC_DEBUG CONFIG_USB_PWC_INPUT_EVDEV 
    CONFIG_USB_ZR364XX CONFIG_USB_STKWEBCAM CONFIG_USB_S2255"
    cpu="CONFIG_HZ_100 CONFIG_HZ_250 CONFIG_HZ_300 CONFIG_HZ_1000 CONFIG_NO_HZ CONFIG_HIGH_RES_TIMERS 
    CONFIG_SMP CONFIG_SPARSE_IRQ CONFIG_MEMTEST CONFIG_VIRTUALIZATION CONFIG_KVM CONFIG_KVM_INTEL 
    CONFIG_KVM_AMD CONFIG_PARAVIRT_GUEST CONFIG_XEN CONFIG_XEN_DEBUG_FS CONFIG_VMI CONFIG_KVM_CLOCK 
    CONFIG_KVM_GUEST CONFIG_LGUEST_GUEST CONFIG_PARAVIRT CONFIG_PARAVIRT_SPINLOCKS CONFIG_PARAVIRT_CLOCK 
    CONFIG_PARAVIRT_DEBUG CONFIG_M386 CONFIG_M486 CONFIG_M586 CONFIG_M586TSC CONFIG_M586MMX CONFIG_M686 
    CONFIG_MPENTIUMII CONFIG_MPENTIUMIII CONFIG_MPENTIUMM CONFIG_MPENTIUM4 CONFIG_MK6 CONFIG_MK7 
    CONFIG_MK8 CONFIG_MCRUSOE CONFIG_MEFFICEON CONFIG_MWINCHIPC6 CONFIG_MWINCHIP3D CONFIG_MGEODEGX1 
    CONFIG_MGEODE_LX CONFIG_MCYRIXIII CONFIG_MVIAC3_2 CONFIG_MVIAC7 CONFIG_MPSC CONFIG_MCORE2 
    CONFIG_MATOM CONFIG_GENERIC_CPU CONFIG_X86_GENERIC"
    cpufreq="CONFIG_CPU_FREQ CONFIG_CPU_FREQ_DEBUG CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE 
    CONFIG_CPU_FREQ_DEFAULT_GOV_POWERSAVE CONFIG_CPU_FREQ_DEFAULT_GOV_USERSPACE 
    CONFIG_CPU_FREQ_DEFAULT_GOV_ONDEMAND CONFIG_CPU_FREQ_DEFAULT_GOV_CONSERVATIVE 
    CONFIG_CPU_FREQ_GOV_PERFORMANCE CONFIG_CPU_FREQ_GOV_POWERSAVE CONFIG_CPU_FREQ_GOV_USERSPACE 
    CONFIG_CPU_FREQ_GOV_ONDEMAND CONFIG_CPU_FREQ_GOV_CONSERVATIVE CONFIG_X86_ACPI_CPUFREQ 
    CONFIG_ELAN_CPUFREQ CONFIG_SC520_CPUFREQ CONFIG_X86_POWERNOW_K6 CONFIG_X86_POWERNOW_K7 
    CONFIG_X86_POWERNOW_K8 CONFIG_X86_GX_SUSPMOD CONFIG_X86_SPEEDSTEP_ICH CONFIG_X86_SPEEDSTEP_SMI 
    CONFIG_X86_P4_CLOCKMOD CONFIG_X86_CPUFREQ_NFORCE2 CONFIG_X86_LONGRUN CONFIG_X86_LONGHAUL 
    CONFIG_X86_SPEEDSTEP_RELAXED_CAP_CHECK CONFIG_CPU_IDLE CONFIG_INTEL_IDLE CONFIG_I7300_IDLE"
    disks="CONFIG_ATA_NONSTANDARD CONFIG_ATA_VERBOSE_ERROR CONFIG_SATA_PMP CONFIG_SATA_SIL24 
    CONFIG_ATA_SFF CONFIG_SATA_SVW CONFIG_ATA_PIIX CONFIG_SATA_MV CONFIG_SATA_NV CONFIG_PDC_ADMA 
    CONFIG_SATA_QSTOR CONFIG_SATA_PROMISE CONFIG_SATA_SX4 CONFIG_SATA_SIL CONFIG_SATA_SIS 
    CONFIG_SATA_ULI CONFIG_SATA_VIA CONFIG_SATA_VITESSE CONFIG_SATA_INIC162X CONFIG_PATA_ACPI 
    CONFIG_PATA_ALI CONFIG_PATA_AMD CONFIG_PATA_ARTOP CONFIG_PATA_ATP867X CONFIG_PATA_ATIIXP 
    CONFIG_PATA_CMD640_PCI CONFIG_PATA_CMD64X CONFIG_PATA_CS5520 CONFIG_PATA_CS5530 CONFIG_PATA_CS5535 
    CONFIG_PATA_CS5536 CONFIG_PATA_CYPRESS CONFIG_PATA_EFAR CONFIG_PATA_HPT366 CONFIG_PATA_HPT37X 
    CONFIG_PATA_HPT3X2N CONFIG_PATA_HPT3X3 CONFIG_PATA_IT821X CONFIG_PATA_IT8213 CONFIG_PATA_JMICRON 
    CONFIG_PATA_TRIFLEX CONFIG_PATA_MARVELL CONFIG_PATA_MPIIX CONFIG_PATA_OLDPIIX CONFIG_PATA_NETCELL 
    CONFIG_PATA_NINJA32 CONFIG_PATA_NS87410 CONFIG_PATA_NS87415 CONFIG_PATA_OPTI CONFIG_PATA_OPTIDMA 
    CONFIG_PATA_PDC2027X CONFIG_PATA_PDC_OLD CONFIG_PATA_RADISYS CONFIG_PATA_RDC CONFIG_PATA_RZ1000 
    CONFIG_PATA_SC1200 CONFIG_PATA_SERVERWORKS CONFIG_PATA_SIL680 CONFIG_PATA_SIS CONFIG_PATA_TOSHIBA 
    CONFIG_PATA_VIA CONFIG_PATA_WINBOND CONFIG_PATA_SCH"
    disks_ata="CONFIG_ATA_BMDMA CONFIG_SATA_AHCI_PLATFORM CONFIG_IDE CONFIG_IDE_GD CONFIG_IDE_GD_ATA 
    CONFIG_BLK_DEV_IDECS CONFIG_BLK_DEV_DELKIN CONFIG_BLK_DEV_IDECD CONFIG_BLK_DEV_IDEACPI 
    CONFIG_IDE_PROC_FS CONFIG_IDE_GENERIC CONFIG_BLK_DEV_PLATFORM CONFIG_BLK_DEV_CMD640 
    CONFIG_BLK_DEV_CMD640_ENHANCED CONFIG_BLK_DEV_IDEPNP CONFIG_BLK_DEV_GENERIC CONFIG_BLK_DEV_OPTI621 
    CONFIG_BLK_DEV_RZ1000 CONFIG_BLK_DEV_AEC62XX CONFIG_BLK_DEV_ALI15X3 CONFIG_BLK_DEV_AMD74XX 
    CONFIG_BLK_DEV_ATIIXP CONFIG_BLK_DEV_CMD64X CONFIG_BLK_DEV_TRIFLEX CONFIG_BLK_DEV_CY82C693 
    CONFIG_BLK_DEV_CS5520 CONFIG_BLK_DEV_CS5530 CONFIG_BLK_DEV_CS5535 CONFIG_BLK_DEV_CS5536 
    CONFIG_BLK_DEV_HPT366 CONFIG_BLK_DEV_JMICRON CONFIG_BLK_DEV_SC1200 CONFIG_BLK_DEV_PIIX 
    CONFIG_BLK_DEV_IT8172 CONFIG_BLK_DEV_IT8213 CONFIG_BLK_DEV_IT821X CONFIG_BLK_DEV_NS87415 
    CONFIG_BLK_DEV_PDC202XX_OLD CONFIG_BLK_DEV_PDC202XX_NEW CONFIG_BLK_DEV_SVWKS 
    CONFIG_BLK_DEV_SGIIOC4 CONFIG_BLK_DEV_SIIMAGE CONFIG_BLK_DEV_SIS5513 CONFIG_BLK_DEV_SL82C105 
    CONFIG_BLK_DEV_SLC90E66 CONFIG_BLK_DEV_TRM290 CONFIG_BLK_DEV_VIA82CXXX CONFIG_BLK_DEV_TC86C001 
    CONFIG_BLK_DEV_CELLEB CONFIG_BLK_DEV_IDE_PMAC CONFIG_BLK_DEV_IDE_PMAC_ATA100FIRST 
    CONFIG_BLK_DEV_IDE_AU1XXX CONFIG_BLK_DEV_IDE_AU1XXX_PIO_DBDMA CONFIG_BLK_DEV_IDE_AU1XXX_MDMA2_DBDMA 
    CONFIG_BLK_DEV_IDE_TX4938 CONFIG_BLK_DEV_IDE_TX4939 CONFIG_BLK_DEV_IDE_AT91 
    CONFIG_BLK_DEV_IDE_ICSIDE CONFIG_BLK_DEV_IDEDMA_ICS CONFIG_BLK_DEV_IDE_RAPIDE CONFIG_IDE_H8300 
    CONFIG_BLK_DEV_GAYLE CONFIG_BLK_DEV_BUDDHA CONFIG_BLK_DEV_FALCON_IDE CONFIG_BLK_DEV_MAC_IDE 
    CONFIG_BLK_DEV_Q40IDE CONFIG_BLK_DEV_PALMCHIP_BK3710 CONFIG_BLK_DEV_4DRIVES CONFIG_BLK_DEV_ALI14XX 
    CONFIG_BLK_DEV_DTC2278 CONFIG_BLK_DEV_HT6560B CONFIG_BLK_DEV_QD65XX CONFIG_BLK_DEV_UMC8672"
    disks_scsi="CONFIG_SCSI CONFIG_SCSI_PROC_FS CONFIG_BLK_DEV_SD CONFIG_BLK_DEV_SR 
    CONFIG_BLK_DEV_SR_VENDOR CONFIG_CHR_DEV_SG CONFIG_BLK_DEV_SD CONFIG_SCSI_LOWLEVEL CONFIG_ISCSI_TCP 
    CONFIG_SCSI_CXGB3_ISCSI CONFIG_SCSI_BNX2_ISCSI CONFIG_BE2ISCSI CONFIG_SGIWD93_SCSI CONFIG_BLK_DEV_3W_XXXX_RAID CONFIG_SCSI_HPSA CONFIG_SCSI_3W_9XXX CONFIG_SCSI_3W_SAS CONFIG_SCSI_7000FASST CONFIG_SCSI_ACARD CONFIG_SCSI_AHA152X CONFIG_SCSI_AHA1542 CONFIG_SCSI_AHA1740 CONFIG_SCSI_AACRAID CONFIG_SCSI_AIC7XXX CONFIG_SCSI_AIC7XXX CONFIG_SCSI_AIC7XXX_OLD CONFIG_SCSI_AIC79XX CONFIG_SCSI_AIC94XX CONFIG_SCSI_MVSAS CONFIG_SCSI_DPT_I2O CONFIG_SCSI_ADVANSYS CONFIG_SCSI_IN2000 CONFIG_SCSI_ARCMSR CONFIG_SCSI_ARCMSR_AER CONFIG_MEGARAID_NEWGEN CONFIG_MEGARAID_MM CONFIG_MEGARAID_MAILBOX CONFIG_MEGARAID_LEGACY CONFIG_MEGARAID_SAS CONFIG_SCSI_MPT2SAS CONFIG_SCSI_HPTIOP CONFIG_SCSI_BUSLOGIC CONFIG_VMWARE_PVSCSI CONFIG_LIBFC CONFIG_LIBFCOE CONFIG_FCOE CONFIG_FCOE_FNIC CONFIG_SCSI_DMX3191D CONFIG_SCSI_DTC3280 CONFIG_SCSI_EATA CONFIG_SCSI_EATA_PIO CONFIG_SCSI_FUTURE_DOMAIN CONFIG_SCSI_FD_MCS CONFIG_SCSI_GDTH CONFIG_SCSI_GENERIC_NCR5380 CONFIG_SCSI_GENERIC_NCR5380_MMIO CONFIG_SCSI_GENERIC_NCR53C400 CONFIG_SCSI_IBMMCA CONFIG_SCSI_IPS CONFIG_SCSI_IBMVSCSI CONFIG_SCSI_IBMVSCSIS CONFIG_SCSI_IBMVFC CONFIG_SCSI_INITIO CONFIG_SCSI_INIA100 CONFIG_SCSI_PPA CONFIG_SCSI_IMM CONFIG_SCSI_IZIP_EPP16 CONFIG_SCSI_IZIP_SLOW_CTR CONFIG_SCSI_NCR53C406A CONFIG_SCSI_NCR_D700 CONFIG_SCSI_LASI700 CONFIG_SCSI_SNI_53C710 CONFIG_SCSI_STEX CONFIG_SCSI_SYM53C8XX_2 CONFIG_SCSI_IPR CONFIG_SCSI_ZALON CONFIG_SCSI_NCR_Q720 CONFIG_SCSI_PAS16 CONFIG_SCSI_QLOGIC_FAS CONFIG_SCSI_QLOGIC_1280 CONFIG_SCSI_QLOGICPTI CONFIG_SCSI_QLA_FC CONFIG_SCSI_QLA_ISCSI CONFIG_SCSI_LPFC CONFIG_SCSI_SIM710 CONFIG_SCSI_SYM53C416 CONFIG_SCSI_DC395x CONFIG_SCSI_DC390T CONFIG_SCSI_T128 CONFIG_SCSI_U14_34F CONFIG_SCSI_ULTRASTOR CONFIG_SCSI_NSP32 CONFIG_SCSI_DEBUG CONFIG_SCSI_MESH CONFIG_SCSI_MAC53C94 CONFIG_SCSI_ACORNSCSI_3 CONFIG_SCSI_ARXESCSI CONFIG_SCSI_CUMANA_2 CONFIG_SCSI_EESOXSCSI CONFIG_SCSI_POWERTECSCSI CONFIG_SCSI_CUMANA_1 CONFIG_SCSI_OAK1 CONFIG_JAZZ_ESP CONFIG_A3000_SCSI CONFIG_A2091_SCSI CONFIG_GVP11_SCSI CONFIG_SCSI_A4000T CONFIG_SCSI_ZORRO7XX CONFIG_ATARI_SCSI CONFIG_MAC_SCSI CONFIG_SCSI_MAC_ESP CONFIG_MVME147_SCSI CONFIG_MVME16x_SCSI CONFIG_BVME6000_SCSI CONFIG_SUN3_SCSI CONFIG_SUN3X_ESP CONFIG_SCSI_SUNESP CONFIG_ZFCP CONFIG_SCSI_PMCRAID CONFIG_SCSI_PM8001 CONFIG_SCSI_SRP CONFIG_SCSI_BFA_FC CONFIG_FUSION CONFIG_FUSION_SPI CONFIG_FUSION_FC CONFIG_FUSION_SAS CONFIG_FUSION_CTL CONFIG_FUSION_LAN CONFIG_FUSION_LOGGING "
    ether_10_100="CONFIG_NET_ETHERNET CONFIG_NET_TULIP CONFIG_DE2104X CONFIG_TULIP CONFIG_DE4X5 CONFIG_WINBOND_840 CONFIG_DM9102 CONFIG_ULI526X CONFIG_PCMCIA_XIRCOM CONFIG_AT1700 CONFIG_DEPCA CONFIG_HP100 CONFIG_NET_ISA CONFIG_E2100 CONFIG_EWRK3 CONFIG_EEXPRESS CONFIG_EEXPRESS_PRO CONFIG_HPLAN_PLUS CONFIG_HPLAN CONFIG_LP486E CONFIG_ETH16Ib CONFIG_NE2000 CONFIG_ZNET CONFIG_SEEQ8005 CONFIG_NE2_MCA CONFIG_IBMLANA CONFIG_IBMVETH CONFIG_IBM_NEW_EMAC CONFIG_NET_PCI CONFIG_PCNET32 CONFIG_AMD8111_ETH CONFIG_ADAPTEC_STARFIRE CONFIG_AC3200 CONFIG_KSZ884X_PCI CONFIG_APRICOT CONFIG_B44 CONFIG_FORCEDETH CONFIG_CS89x0 CONFIG_TC35815 CONFIG_E100 CONFIG_LNE390 CONFIG_FEALNX CONFIG_NATSEMI CONFIG_NE2K_PCI CONFIG_NE3210 CONFIG_ES3210 CONFIG_8139CP CONFIG_8139TOO CONFIG_8139TOO_PIO CONFIG_8139TOO_TUNE_TWISTER CONFIG_8139TOO_8129 CONFIG_8139_OLD_RX_RESET CONFIG_R6040 CONFIG_SIS900 CONFIG_EPIC100 CONFIG_SMSC9420 CONFIG_SUNDANCE CONFIG_TLAN CONFIG_KS8842 CONFIG_KS8851 CONFIG_KS8851_MLL CONFIG_VIA_RHINE CONFIG_SC92031 CONFIG_CPMAC CONFIG_NET_POCKET CONFIG_ATP CONFIG_DE600 CONFIG_DE620 CONFIG_SGISEEQ CONFIG_DECLANCE CONFIG_68360_ENET CONFIG_FEC CONFIG_FEC2 CONFIG_FEC_MPC52xx CONFIG_FEC_MPC52xx_MDIO CONFIG_NE_H8300 CONFIG_ATL2 CONFIG_XILINX_EMACLITE CONFIG_BCM63XX_ENET CONFIG_FS_ENET CONFIG_OCTEON_MGMT_ETHERNET"
    ether_1000="CONFIG_NETDEV_1000 CONFIG_ACENIC CONFIG_ACENIC_OMIT_TIGON_I CONFIG_DL2K CONFIG_E1000 CONFIG_E1000E CONFIG_IP1000 CONFIG_IGB CONFIG_IGB_DCA CONFIG_IGBVF CONFIG_ENP2611_MSF_NET CONFIG_MYRI_SBUS CONFIG_NS83820 CONFIG_HAMACHI CONFIG_YELLOWFIN CONFIG_R8169 CONFIG_R8169_VLAN CONFIG_SB1250_MAC CONFIG_SIS190 CONFIG_SKGE CONFIG_SKY2 CONFIG_VIA_VELOCITY CONFIG_TIGON3 CONFIG_BNX2 CONFIG_CNIC CONFIG_SPIDER_NET CONFIG_TSI108_ETH CONFIG_GELIC_NET CONFIG_GELIC_WIRELESS CONFIG_FSL_PQ_MDIO CONFIG_GIANFAR CONFIG_UCC_GETH CONFIG_UGETH_TX_ON_DEMAND CONFIG_MV643XX_ETH CONFIG_XILINX_LL_TEMAC CONFIG_QLA3XXX CONFIG_ATL1 CONFIG_ATL1E CONFIG_ATL1C CONFIG_JME CONFIG_S6GMAC CONFIG_STMMAC_ETH"
    ether_10000="CONFIG_NETDEV_10000 CONFIG_CHELSIO_T1 CONFIG_CHELSIO_T1_1G CONFIG_CHELSIO_T3 CONFIG_CHELSIO_T4 CONFIG_EHEA CONFIG_ENIC CONFIG_IXGBE CONFIG_IXGBE_DCA CONFIG_IXGBE_DCB CONFIG_IXGBEVF CONFIG_IXGB CONFIG_S2IO CONFIG_VXGE CONFIG_MYRI10GE CONFIG_MYRI10GE_DCA CONFIG_NETXEN_NIC CONFIG_NIU CONFIG_PASEMI_MAC CONFIG_MLX4_EN CONFIG_MLX4_DEBUG CONFIG_TEHUTI CONFIG_BNX2X CONFIG_QLCNIC CONFIG_QLGE CONFIG_SFC CONFIG_SFC_MTD CONFIG_BE2NET"
    filesystems="CONFIG_EXT2_FS CONFIG_EXT3_FS CONFIG_EXT3_DEFAULTS_TO_ORDERED CONFIG_EXT4_FS CONFIG_REISER4_FS CONFIG_REISERFS_FS CONFIG_JFS_FS CONFIG_XFS_FS CONFIG_GFS2_FS CONFIG_OCFS2_FS CONFIG_BTRFS_FS CONFIG_NILFS2_FS CONFIG_ISO9660_FS CONFIG_JOLIET CONFIG_ZISOFS CONFIG_UDF_FS CONFIG_MSDOS_FS CONFIG_VFAT_FS CONFIG_FAT_DEFAULT_CODEPAGE CONFIG_FAT_DEFAULT_IOCHARSET CONFIG_NTFS_FS CONFIG_NTFS_DEBUG CONFIG_NTFS_RW CONFIG_PROC_FS CONFIG_PROC_KCORE CONFIG_PROC_VMCORE CONFIG_PROC_SYSCTL CONFIG_PROC_PAGE_MONITOR CONFIG_SYSFS CONFIG_TMPFS CONFIG_TMPFS_POSIX_ACL CONFIG_HUGETLBFS CONFIG_AUTOFS_FS CONFIG_AUTOFS4_FS CONFIG_FUSE_FS CONFIG_CUSE"
    gcov="CONFIG_MODULES CONFIG_MODULE_FORCE_LOAD CONFIG_MODULE_UNLOAD CONFIG_MODULE_FORCE_UNLOAD CONFIG_MODVERSIONS CONFIG_MODULE_SRCVERSION_ALL CONFIG_BLOCK CONFIG_LBDAF CONFIG_BLK_DEV_BSG CONFIG_BLK_DEV_INTEGRITY CONFIG_BLK_CGROUP"
    general="CONFIG_64BIT CONFIG_EXPERIMENTAL CONFIG_KERNEL_GZIP CONFIG_KERNEL_BZIP2 CONFIG_KERNEL_LZMA CONFIG_KERNEL_LZO CONFIG_SWAP"
    input="CONFIG_INPUT CONFIG_INPUT_FF_MEMLESS CONFIG_INPUT_POLLDEV CONFIG_INPUT_SPARSEKMAP CONFIG_INPUT_EVDEV CONFIG_INPUT_EVBUG CONFIG_INPUT_KEYBOARD CONFIG_INPUT_MOUSE CONFIG_MOUSE_PS2 CONFIG_MOUSE_PS2_ALPS CONFIG_MOUSE_PS2_LOGIPS2PP CONFIG_MOUSE_PS2_SYNAPTICS CONFIG_MOUSE_PS2_LIFEBOOK CONFIG_MOUSE_PS2_TRACKPOINT CONFIG_MOUSE_PS2_ELANTECH CONFIG_MOUSE_PS2_SENTELIC CONFIG_MOUSE_PS2_TOUCHKIT CONFIG_MOUSE_PS2_OLPC CONFIG_MOUSE_SERIAL CONFIG_MOUSE_SYNAPTICS_I2C"
    khacking="CONFIG_PRINTK_TIME CONFIG_ENABLE_WARN_DEPRECATED CONFIG_ENABLE_MUST_CHECK CONFIG_FRAME_WARN CONFIG_MAGIC_SYSRQ CONFIG_STRIP_ASM_SYMS CONFIG_UNUSED_SYMBOLS CONFIG_DEBUG_FS CONFIG_HEADERS_CHECK CONFIG_DEBUG_SECTION_MISMATCH CONFIG_DEBUG_KERNEL CONFIG_SLUB_DEBUG_ON CONFIG_SLUB_STATS CONFIG_DEBUG_KMEMLEAK CONFIG_DEBUG_PREEMPT CONFIG_DEBUG_RT_MUTEXES CONFIG_RT_MUTEX_TESTER CONFIG_DEBUG_SPINLOCK CONFIG_DEBUG_MUTEXES CONFIG_DEBUG_LOCK_ALLOC CONFIG_PROVE_LOCKING CONFIG_LOCK_STAT CONFIG_DEBUG_LOCKDEP CONFIG_DEBUG_SPINLOCK_SLEEP CONFIG_DEBUG_LOCKING_API_SELFTESTS CONFIG_DEBUG_KOBJECT CONFIG_DEBUG_HIGHMEM CONFIG_DEBUG_BUGVERBOSE CONFIG_DEBUG_INFO CONFIG_DEBUG_VM CONFIG_DEBUG_VIRTUAL CONFIG_DEBUG_NOMMU_REGIONS CONFIG_DEBUG_WRITECOUNT CONFIG_DEBUG_MEMORY_INIT CONFIG_DEBUG_LIST CONFIG_DEBUG_SG CONFIG_DEBUG_NOTIFIERS CONFIG_DEBUG_CREDENTIALS CONFIG_FRAME_POINTER CONFIG_BOOT_PRINTK_DELAY CONFIG_RCU_TORTURE_TEST CONFIG_RCU_CPU_STALL_DETECTOR CONFIG_KPROBES_SANITY_TEST CONFIG_BACKTRACE_SELF_TEST CONFIG_DEBUG_BLOCK_EXT_DEVT CONFIG_DEBUG_FORCE_WEAK_PER_CPU CONFIG_LKDTM CONFIG_FAULT_INJECTION CONFIG_LATENCYTOP CONFIG_SYSCTL_SYSCALL_CHECK CONFIG_DEBUG_PAGEALLOC CONFIG_PAGE_POISONING CONFIG_FTRACE CONFIG_PROVIDE_OHCI1394_DMA_INIT"
    laptops="CONFIG_ACER_WMI CONFIG_ACERHDF CONFIG_ASUS_LAPTOP CONFIG_DELL_LAPTOP CONFIG_DELL_WMI CONFIG_FUJITSU_LAPTOP CONFIG_TC1100_WMI CONFIG_HP_WMI CONFIG_MSI_LAPTOP CONFIG_PANASONIC_LAPTOP CONFIG_COMPAL_LAPTOP CONFIG_SONY_LAPTOP CONFIG_SONYPI_COMPAT CONFIG_THINKPAD_ACPI CONFIG_THINKPAD_ACPI_ALSA_SUPPORT CONFIG_THINKPAD_ACPI_DEBUGFACILITIES CONFIG_THINKPAD_ACPI_DEBUG CONFIG_THINKPAD_ACPI_UNSAFE_LEDS CONFIG_THINKPAD_ACPI_VIDEO CONFIG_THINKPAD_ACPI_HOTKEY_POLL CONFIG_INTEL_MENLOW CONFIG_EEEPC_LAPTOP CONFIG_EEEPC_WMI CONFIG_ACPI_WMI CONFIG_MSI_WMI CONFIG_ACPI_ASUS CONFIG_TOPSTAR_LAPTOP CONFIG_ACPI_TOSHIBA CONFIG_TOSHIBA_BT_RFKILL CONFIG_ACPI_CMPC"
    misc="CONFIG_AUDITSYSCALL CONFIG_DEVTMPFS CONFIG_DEVTMPFS_MOUNT CONFIG_AUDIT CONFIG_HOTPLUG CONFIG_COMPACTION CONFIG_PACKET CONFIG_MISC_FILESYSTEMS CONFIG_MISC_DEVICES CONFIG_X86_PLATFORM_DEVICES CONFIG_HOTPLUG CONFIG_HOTPLUG_CPU CONFIG_HPET_TIMER CONFIG_HPET_EMULATE_RTC CONFIG_BLK_DEV_MD CONFIG_DM_DEBUG CONFIG_DM_CRYPT CONFIG_DM_SNAPSHOT CONFIG_DM_MIRROR CONFIG_DM_ZERO CONFIG_DM_MULTIPATH CONFIG_DM_DELAY CONFIG_DM_UEVENT CONFIG_BLK_DEV_DM_BBR CONFIG_X86_POWERNOW_K6 CONFIG_X86_POWERNOW_K7 CONFIG_X86_POWERNOW_K8 CONFIG_X86_GX_SUSPMOD CONFIG_X86_SPEEDSTEP_CENTRINO CONFIG_X86_SPEEDSTEP_ICH CONFIG_X86_SPEEDSTEP_SMI CONFIG_X86_P4_CLOCKMOD CONFIG_X86_LONGRUN CONFIG_X86_LONGHAUL CONFIG_X86_E_POWERSAVER CONFIG_X86_SPEEDSTEP_LIB CONFIG_PPP CONFIG_PPP_MULTILINK CONFIG_PPP_FILTER CONFIG_PPP_ASYNC CONFIG_PPP_SYNC_TTY CONFIG_PPP_DEFLATE CONFIG_PPP_BSDCOMP CONFIG_PPP_MPPE CONFIG_PPPOE CONFIG_PPPOL2TP CONFIG_TR CONFIG_WATCHDOG CONFIG_HAMRADIO CONFIG_DISPLAY_SUPPORT"
    net="CONFIG_UNIX CONFIG_UNIX_DIAG CONFIG_XFRM_USER CONFIG_INET CONFIG_IP_MULTICAST CONFIG_IP_ADVANCED_ROUTER CONFIG_IP_MULTIPLE_TABLES CONFIG_IP_ROUTE_MULTIPATH CONFIG_IP_ROUTE_VERBOSE CONFIG_IP_PNP CONFIG_IP_PNP_DHCP CONFIG_IP_PNP_BOOTP CONFIG_IP_PNP_RARP CONFIG_IP_MROUTE CONFIG_IP_PIMSM_V1 CONFIG_IP_PIMSM_V2 CONFIG_SYN_COOKIES CONFIG_INET_LRO"
    out="CONFIG_USB_PRINTER CONFIG_NETWORK_FILESYSTEMS"
    usb="CONFIG_USB_SUPPORT CONFIG_USB CONFIG_USB_DEBUG CONFIG_USB_ANNOUNCE_NEW_DEVICES CONFIG_USB_SUSPEND CONFIG_USB_MON CONFIG_USB_WUSB CONFIG_USB_XHCI_HCD CONFIG_USB_EHCI_HCD CONFIG_USB_OHCI_HCD CONFIG_USB_UHCI_HCD CONFIG_USB_PRINTER CONFIG_USB_STORAGE CONFIG_USB_STORAGE_DEBUG CONFIG_USB_STORAGE_DATAFAB CONFIG_USB_STORAGE_FREECOM CONFIG_USB_STORAGE_ISD200 CONFIG_USB_STORAGE_USBAT CONFIG_USB_STORAGE_SDDR09 CONFIG_USB_STORAGE_SDDR55 CONFIG_USB_STORAGE_JUMPSHOT CONFIG_USB_STORAGE_ALAUDA CONFIG_USB_STORAGE_ONETOUCH CONFIG_USB_STORAGE_KARMA CONFIG_USB_STORAGE_CYPRESS_ATACB CONFIG_USB_MDC800 CONFIG_USB_MICROTEK CONFIG_USB_USS720 CONFIG_PM_RUNTIME"
    rcu="CONFIG_BLK_DEV_INITRD CONFIG_RD_GZIP CONFIG_RD_BZIP2 CONFIG_RD_LZMA CONFIG_RD_LZO CONFIG_INITRAMFS_COMPRESSION_NONE CONFIG_INITRAMFS_COMPRESSION_GZIP CONFIG_INITRAMFS_COMPRESSION_BZIP2 CONFIG_INITRAMFS_COMPRESSION_LZMA CONFIG_INITRAMFS_COMPRESSION_LZO CONFIG_CC_OPTIMIZE_FOR_SIZE"
    video="CONFIG_DRM CONFIG_DRM_TDFX CONFIG_DRM_R128 CONFIG_DRM_RADEON CONFIG_DRM_I810 CONFIG_DRM_I830 CONFIG_DRM_I915 CONFIG_DRM_I915_KMS CONFIG_DRM_MGA CONFIG_DRM_SIS CONFIG_DRM_VIA CONFIG_DRM_SAVAGE"
    wireless="CONFIG_ATH9K_HTC CONFIG_IWM CONFIG_HERMES CONFIG_HERMES_PRISM CONFIG_ORINOCO_USB CONFIG_WL12XX CONFIG_WL1271 CONFIG_WL1271_SPI CONFIG_WL1271_SDIO CONFIG_WLAN CONFIG_PCMCIA_RAYCS CONFIG_LIBERTAS_THINFIRM CONFIG_LIBERTAS_THINFIRM_USB CONFIG_AIRO CONFIG_ATMEL CONFIG_PCI_ATMEL CONFIG_PCMCIA_ATMEL CONFIG_AT76C50X_USB CONFIG_AIRO_CS CONFIG_PCMCIA_WL3501 CONFIG_PRISM54 CONFIG_USB_ZD1201 CONFIG_USB_NET_RNDIS_WLAN CONFIG_RTL8180 CONFIG_RTL8187 CONFIG_ADM8211 CONFIG_MAC80211_HWSIM CONFIG_MWL8K CONFIG_ATH_COMMON CONFIG_ATH_DEBUG CONFIG_ATH5K CONFIG_ATH5K_DEBUG CONFIG_ATH9K CONFIG_ATH9K_DEBUGFS CONFIG_AR9170_USB CONFIG_B43 CONFIG_B43_PCMCIA CONFIG_B43_SDIO CONFIG_B43_NPHY CONFIG_B43_PHY_LP CONFIG_B43_DEBUG CONFIG_B43_FORCE_PIO CONFIG_B43LEGACY CONFIG_B43LEGACY_DEBUG CONFIG_IPW2100 CONFIG_IPW2100_MONITOR CONFIG_IPW2100_DEBUG CONFIG_IPW2200 CONFIG_IPW2200_MONITOR CONFIG_IPW2200_RADIOTAP CONFIG_IPW2200_PROMISCUOUS CONFIG_IPW2200_QOS CONFIG_IPW2200_DEBUG CONFIG_LIBIPW_DEBUG CONFIG_IWLWIFI CONFIG_IWLWIFI_DEBUG CONFIG_IWLWIFI_DEBUGFS CONFIG_IWLWIFI_DEVICE_TRACING CONFIG_IWLAGN CONFIG_IWL4965 CONFIG_IWL5000 CONFIG_IWL3945 CONFIG_IWM CONFIG_IWM_DEBUG CONFIG_LIBERTAS CONFIG_LIBERTAS_USB CONFIG_LIBERTAS_CS CONFIG_LIBERTAS_SDIO CONFIG_LIBERTAS_SPI CONFIG_LIBERTAS_DEBUG CONFIG_LIBERTAS_MESH CONFIG_HERMES CONFIG_HERMES_CACHE_FW_ON_INIT CONFIG_APPLE_AIRPORT CONFIG_PLX_HERMES CONFIG_TMD_HERMES CONFIG_NORTEL_HERMES CONFIG_PCI_HERMES CONFIG_PCMCIA_HERMES CONFIG_PCMCIA_SPECTRUM CONFIG_P54_COMMON CONFIG_P54_USB CONFIG_P54_PCI CONFIG_P54_SPI CONFIG_RT2X00 CONFIG_RT2400PCI CONFIG_RT2500PCI CONFIG_RT61PCI CONFIG_RT2800PCI CONFIG_RT2800PCI_RT30XX CONFIG_RT2800PCI_RT35XX CONFIG_RT2500USB CONFIG_RT73USB CONFIG_RT2800USB CONFIG_RT2800USB_RT30XX CONFIG_RT2800USB_RT35XX CONFIG_RT2800USB_UNKNOWN CONFIG_RT2X00_LIB_DEBUGFS CONFIG_RT2X00_DEBUG CONFIG_WL12XX CONFIG_WL1251 CONFIG_WL1251_SPI CONFIG_WL1251_SDIO CONFIG_WL1271 CONFIG_ZD1211RW CONFIG_ZD1211RW_DEBUG"

    if [ "${type}" == "laptop" ]; then
        agp="${agp} CONFIG_VGA_SWITCHEROO"
        misc="${misc} CONFIG_TOSHIBA CONFIG_I8K"
        in="${m1} ${m2} ${agp} ${cpu} ${cpufreq} ${disks} ${disks_ata} ${disks_scsi} ${filesystems} ${gcov} ${general} ${input} ${khacking} ${laptops} ${misc} ${rcu} ${usb} ${wireless}"
    else
        out="${laptops} ${wireless} CONFIG_TOSHIBA CONFIG_I8K CONFIG_VGA_SWITCHEROO ${out}"
        in="${m1} ${m2} ${agp} ${cpu} ${cpufreq} ${disks} ${disks_ata} ${disks_scsi} ${filesystems} ${gcov} ${general} ${input} ${khacking} ${misc} ${net} ${rcu} ${usb}"
    fi

    module="${audio} ${cam} ${ether_10_100} ${ether_1000} ${ether_10000} ${video}"
    
    fl "easygentoo.config" "0" "0"
    
    for cv in ${in}
    do
        case ${cv} in
        CONFIG_64BIT)
            case ${arch} in
            i686)
                value="n"
            ;;
            amd64)
                value="y"
            ;;
            esac
        ;;
        CONFIG_FAT_DEFAULT_CODEPAGE)
            value="857"
        ;;
        CONFIG_FAT_DEFAULT_IOCHARSET)
            value='"iso8859-9"'
        ;;
        CONFIG_NLS_DEFAULT)
            value='"utf8"'
        ;;
        CONFIG_FRAME_WARN)
            value="0"
        ;;
        CONFIG_PRINTK_TIME|CONFIG_ENABLE_WARN_DEPRECATED|CONFIG_ENABLE_MUST_CHECK|CONFIG_STRIP_ASM_SYMS|CONFIG_UNUSED_SYMBOLS|CONFIG_DEBUG_FS|CONFIG_HEADERS_CHECK|CONFIG_DEBUG_SECTION_MISMATCH|CONFIG_DEBUG_KERNEL|CONFIG_SLUB_DEBUG_ON|CONFIG_SLUB_STATS|CONFIG_DEBUG_KMEMLEAK|CONFIG_DEBUG_PREEMPT|CONFIG_DEBUG_RT_MUTEXES|CONFIG_RT_MUTEX_TESTER|CONFIG_DEBUG_SPINLOCK|CONFIG_DEBUG_MUTEXES|CONFIG_DEBUG_LOCK_ALLOC|CONFIG_PROVE_LOCKING|CONFIG_LOCK_STAT|CONFIG_DEBUG_LOCKDEP|CONFIG_DEBUG_SPINLOCK_SLEEP|CONFIG_DEBUG_LOCKING_API_SELFTESTS|CONFIG_DEBUG_KOBJECT|CONFIG_DEBUG_HIGHMEM|CONFIG_DEBUG_BUGVERBOSE|CONFIG_DEBUG_INFO|CONFIG_DEBUG_VM|CONFIG_DEBUG_VIRTUAL|CONFIG_DEBUG_NOMMU_REGIONS|CONFIG_DEBUG_WRITECOUNT|CONFIG_DEBUG_MEMORY_INIT|CONFIG_DEBUG_LIST|CONFIG_DEBUG_SG|CONFIG_DEBUG_NOTIFIERS|CONFIG_DEBUG_CREDENTIALS|CONFIG_BOOT_PRINTK_DELAY|CONFIG_RCU_TORTURE_TEST|CONFIG_RCU_CPU_STALL_DETECTOR|CONFIG_KPROBES_SANITY_TEST|CONFIG_BACKTRACE_SELF_TEST|CONFIG_DEBUG_BLOCK_EXT_DEVT|CONFIG_DEBUG_FORCE_WEAK_PER_CPU|CONFIG_LKDTM|CONFIG_FAULT_INJECTION|CONFIG_LATENCYTOP|CONFIG_DEBUG_PAGEALLOC|CONFIG_PAGE_POISONING|CONFIG_FTRACE|CONFIG_PROVIDE_OHCI1394_DMA_INIT)
            value="n"
        ;;
        CONFIG_MODULE_FORCE_LOAD|CONFIG_MODVERSIONS|CONFIG_MODULE_SRCVERSION_ALL|CONFIG_MTRR_SANITIZER|CONFIG_KERNEL_GZIP|CONFIG_KERNEL_BZIP2|CONFIG_KERNEL_LZO|CONFIG_IPV6|CONFIG_PREEMPT_NONE|CONFIG_PREEMPT|CONFIG_NET_SCHED|CONFIG_INITRAMFS_COMPRESSION_NONE|CONFIG_INITRAMFS_COMPRESSION_GZIP|CONFIG_INITRAMFS_COMPRESSION_BZIP2|CONFIG_INITRAMFS_COMPRESSION_LZO|CONFIG_AUTOFS_FS)
            value="n"
        ;;
        CONFIG_M386|CONFIG_M486|CONFIG_M586|CONFIG_M586TSC|CONFIG_M586MMX|CONFIG_M686|CONFIG_MPENTIUMII|CONFIG_MPENTIUMIII|CONFIG_MPENTIUMM|CONFIG_MPENTIUM4|CONFIG_MK6|CONFIG_MK7|CONFIG_MK8|CONFIG_MCRUSOE|CONFIG_MEFFICEON|CONFIG_MWINCHIPC6|CONFIG_MWINCHIP3D|CONFIG_MGEODEGX1|CONFIG_MGEODE_LX|CONFIG_MCYRIXIII|CONFIG_MVIAC3_2|CONFIG_MVIAC7|CONFIG_MPSC|CONFIG_MCORE2|CONFIG_MATOM)
            value="n"
        ;;
        CONFIG_IDE|CONFIG_MISC_FILESYSTEMS|CONFIG_MISC_DEVICES|CONFIG_DEBUG_STACK_USAGE|CONFIG_FB_NVIDIA|CONFIG_FB_RADEON|CONFIG_TR|CONFIG_WATCHDOG|CONFIG_INPUT_EVBUG|CONFIG_HAMRADIO)
            value="n"
        ;;
        CONFIG_HZ_100|CONFIG_HZ_250|CONFIG_HZ_300)
            value="n"
        ;;
        *)
            value="y"
        ;;
        esac
        
        avoid_dup ${cv}'='${value}
    done

    for cv in ${module}
    do
        case ${cv} in
        CONFIG_SND_PCI|CONFIG_SND_HDA_INTEL|CONFIG_SND_HDA_HWDEP|CONFIG_SND_HDA_CODEC_REALTEK|CONFIG_SND_HDA_CODEC_ANALOG|CONFIG_SND_HDA_CODEC_SIGMATEL|CONFIG_SND_HDA_CODEC_VIA|CONFIG_SND_HDA_CODEC_ATIHDMI|CONFIG_SND_HDA_CODEC_NVHDMI|CONFIG_SND_HDA_CODEC_INTELHDMI|CONFIG_SND_HDA_CODEC_CIRRUS|CONFIG_SND_HDA_CODEC_CONEXANT|CONFIG_SND_HDA_CODEC_CA0110|CONFIG_SND_HDA_CODEC_CMEDIA|CONFIG_SND_HDA_CODEC_SI3054|CONFIG_SND_HDA_GENERIC)
            value="y"
        ;;
        CONFIG_CPU_FREQ|CONFIG_CPU_FREQ_DEFAULT_GOV_USERSPACE|CONFIG_AGP|CONFIG_VGA_ARB|CONFIG_VGA_SWITCHEROO|CONFIG_DRM)
            value="y"
        ;;
        CONFIG_NET_ETHERNET|CONFIG_NETDEV_1000|CONFIG_NETDEV_10000|CONFIG_NET_VENDOR_3COM|CONFIG_NET_VENDOR_SMC|CONFIG_BFIN_MAC|CONFIG_DM9000|CONFIG_ENC28J60|CONFIG_NET_VENDOR_RACAL|CONFIG_NET_TULIP|CONFIG_NET_ISA|CONFIG_IBM_NEW_EMAC|CONFIG_NET_PCI|CONFIG_FORCEDETH|CONFIG_8139TOO|CONFIG_8139TOO_TUNE_TWISTER|CONFIG_8139TOO_8129|CONFIG_SUNDANCE|CONFIG_VIA_RHINE|CONFIG_NET_POCKET|CONFIG_FEC|CONFIG_FEC_MPC52xx)
            value="y"
        ;;
        CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE|CONFIG_CPU_FREQ_DEFAULT_GOV_POWERSAVE|CONFIG_CPU_FREQ_DEFAULT_GOV_ONDEMAND|CONFIG_CPU_FREQ_DEFAULT_GOV_CONSERVATIVE)
            value="n"
        ;;
        *)
            value="m"
        ;;
        esac
        
        avoid_dup ${cv}'='${value}
    done

    for cv in ${out}
    do
        value="n"
        avoid_dup ${cv}'='${value}
    done

    [[ ! -d "/etc/kernels" ]] && mkdir -p /etc/kernels

    cp easygentoo.config /etc/kernels
    echo; eb2 "* "; eg2 "Compiling kernel... "; er "(genkernel)"; echo; sleep 0.5s
    genkernel --bootdir=/boot --bootloader=grub --disklabel --install --kernel-config=/etc/kernels/easygentoo.config --kernname=${eg} --makeopts=-j${core} --no-mountboot --postclear --save-config all
    
    [[ $(ls /boot/kernel-${eg}-*) ]] || genkernel --bootdir=/boot --bootloader=grub --disklabel --install --kernel-config=/etc/kernels/easygentoo.config --kernname=${eg} --makeopts=-j${core} --no-mountboot --postclear --save-config all
}

k_must() {
    cl
    step=$(echo; eb2 "* "; eg2 "Emerging "; er2 "dhcpcd"; eg2 " and "; er2 "gentoolkit"; eg "... "; echo; sleep 0.5s)
    inst "dhcpcd gentoolkit";

    step=$(echo; eb2 "* "; eg2 "Emerging "; er2 "dmidecode" ; eg2 " and "; er2 "lafilefixer"; eg "... "; echo; sleep 0.5s)
    inst "--oneshot dmidecode lafilefixer"
}

k_needed() {
    step=$(echo; eb2 "* "; eg "Emerging basic tools..."; echo; sleep 0.5s)
    inst "acpid bash-completion consolekit dbus localepurge net-misc/ntp sudo"
    
    sntp -s 0.gentoo.pool.ntp.org &>/dev/null
    
    eselect bashcomp enable --global gentoo

    echo; eb2 "* "; eg2 "Starting services... "; er "(dbus consolekit udev)"; echo; sleep 0.5s
    
    for srv in "dbus consolekit udev"
    do
        /etc/init.d/${srv} stop &>/dev/null
        /etc/init.d/${srv} start &>/dev/null
    done
    
    echo; eb2 "* "; eg "Adjusting basic tools to start at boot..."; sleep 0.5s

    for adapter in ${adapters_found}
    do
        net="net.${adapter}"

        [[ ! -e "/etc/init.d/${net}" ]] && ln -s /etc/init.d/net.lo /etc/init.d/${net}

        if [ "setup" == "basic" ]; then
            rc-update add ${net} default &>/dev/null
        fi
    done
    
    rc-update add acpid default &>/dev/null
    rc-update add consolekit default &>/dev/null
    rc-update add dbus default &>/dev/null
    rc-update add udev sysinit &>/dev/null
    rc-update add udev-mount default &>/dev/null
    rc-update add udev-postmount default &>/dev/null
    
    case ${type} in
    pc)
        rc-update add numlock default &>/dev/null
    ;;
    esac
}

k_portage() {
    step=$(echo; eb2 "* "; eg2 "Updating "; er2 "portage"; eg "... "; sleep 0.5s)
    rm -rf /etc/make.profile

    case ${setup} in
    basic)
        case ${kw} in
        amd64)
            p_num="$(eselect profile list | tr -d '[]' | awk '/amd64\/13.0$/ {print $1}')"
        ;;
        x86)
            p_num="$(eselect profile list | tr -d '[]' | awk '/x86\/13.0$/ {print $1}')"
        ;;
        esac
    ;;
    normal)
        case ${kw} in
        amd64)
            p_num="$(eselect profile list | tr -d '[]' | awk '/amd64\/13.0\/desktop$/ {print $1}')"
        ;;
        x86)
            p_num="$(eselect profile list | tr -d '[]' | awk '/x86\/13.0\/desktop$/ {print $1}')"
        ;;
        esac
    ;;
    esac
    
    eselect profile set "${p_num}"
    
    eb2 "* "; eg "emerge --sync (this may take a while)"
    inst "sync"
    inst "--nodeps portage"
}

wm() {
    inst "-N system"
    k_x
    
    fl "/home/${username}/.fonts.conf" "b" "d"

    cf '<?xml version="1.0" encoding="UTF-8"?>'
    cf '<!DOCTYPE fontconfig SYSTEM "fonts.dtd">'
    cf '<fontconfig>'
    cf '    <alias>'
    cf '        <family>serif</family>'
    cf '        <prefer>'
    cf '            <family>DejaVu Serif</family>'
    cf '            <family>Bitstream Vera Serif</family>'
    cf '        </prefer>'
    cf '    </alias>'
    cf ''
    cf '    <alias>'
    cf '        <family>sans-serif</family>'
    cf '        <prefer>'
    cf '            <family>DejaVu Sans</family>'
    cf '            <family>Bitstream Vera Sans</family>'
    cf '            <family>Verdana</family>'
    cf '            <family>Arial</family>'
    cf '        </prefer>'
    cf '    </alias>'
    cf ''
    cf '    <alias>'
    cf '        <family>monospace</family>'
    cf '        <prefer>'
    cf '            <family>DejaVu Sans Mono</family>'
    cf '            <family>Bitstream Vera Sans Mono</family>'
    cf '        </prefer>'
    cf '    </alias>'
    cf ''
    cf '    <match target="font">'
    cf '        <edit name="rgba" mode="assign">'
    cf '            <const>none</const>'
    cf '        </edit>'
    cf '        <edit name="autohint" mode="assign">'
    cf '            <bool>true</bool>'
    cf '        </edit>'
    cf '        <edit name="antialias" mode="assign">'
    cf '            <bool>true</bool>'
    cf '        </edit>'
    cf '        <edit name="hinting" mode="assign">'
    cf '            <bool>true</bool>'
    cf '        </edit>'
    cf '        <edit name="hintstyle" mode="assign">'
    cf '            <const>hintfull</const>'
    cf '        </edit>'
    cf '    </match>'
    cf ''
    cf '    <!-- Disable autohint for bold fonts -->'
    cf '    <match target="font">'
    cf '           <test name="weight" compare="more">'
    cf '            <const>medium</const>'
    cf '        </test>'
    cf '           <edit name="autohint" mode="assign">'
    cf '            <bool>false</bool>'
    cf '        </edit>'
    cf '    </match>'
    cf ''
    cf '    <!-- Reject bitmap fonts in favour of Truetype, Postscript, etc. -->'
    cf '    <selectfont>'
    cf '        <rejectfont>'
    cf '            <pattern>'
    cf '                <patelt name="scalable">'
    cf '                    <bool>false</bool>'
    cf '                </patelt>'
    cf '            </pattern>'
    cf '        </rejectfont>'
    cf '    </selectfont>'
    cf ''
    cf '</fontconfig>'

    for cfg in "10-autohint.conf" "10-sub-pixel-rgb.conf" "20-unhint-small-dejavu-sans-mono.conf" "20-unhint-small-dejavu-sans.conf" "20-unhint-small-dejavu-serif.conf" "25-unhint-nonlatin.conf" "57-dejavu-sans-mono.conf" "57-dejavu-sans.conf" "57-dejavu-serif.conf"
    do
        no=$(eselect fontconfig list | grep "${cfg}" | tr '[]' ' ' | awk '{print $1}')
        eselect fontconfig enable "${no}" &>/dev/null
    done
}

k_nm() {
    step=$(echo; eb2 "* "; eg2 "Emerging "; er2 "NetworkManager"; eg "..."; sleep 0.5s; echo)
    inst "networkmanager nm-applet"

    rc-update add NetworkManager default &>/dev/null
    
    fl "/usr/share/polkit-1/actions/org.freedesktop.NetworkManager.policy" "b" "0"
    sed -i s/"<allow_active>.*<\/allow_active>"/"<allow_active>yes<\/allow_active>"/ ${trg_file}
}

k_alsa() {
    step=$(echo; eb2 "* "; eg2 "Emerging "; er2 "Alsa"; eg "..."; echo)
    inst "alsa-utils"
    rc-update add alsasound boot
    
    sound_card_guess="$(aplay -l | grep card | awk '{print $3}' | grep -iv dummy | grep -iv pcsp | uniq | sed q)"
    
    if [ -n "${sound_card_guess}" ]; then
        echo "pcm.!default { type hw card ${sound_card_guess} }" > /etc/asound.conf
        echo "ctl.!default { type hw card ${sound_card_guess} }" >> /etc/asound.conf
    fi
    
    fl "/etc/conf.d/alsasound" "0" "0"
    avoid_dup 'RESTORE_ON_START="yes"'
    avoid_dup 'SAVE_ON_STOP="yes"'
    avoid_dup 'LOAD_ON_START="yes"'
    
    amixer set Master unmute
    amixer set PCM unmute
    
    alsactl -f /var/lib/alsa/asound.state store
}

k_x() {
    step=$(echo; eb2 "* "; eg2 "Emerging "; er2 "Xorg server"; eg "..."; echo)
    inst "xorg-server"
    
    step=$(echo; eb2 "* "; eg2 "Emerging necessary tools"; sleep 0.5s; echo)
    inst "dejavu eselect-fontconfig fontconfig mesa-progs setxkbmap"
    
    fl "/home/${username}/.xinitrc" "b" "0"

    case ${keymap} in
    trq)
        cf "setxkbmap -model evdev -layout tr"
    ;;
    trf)
        cf "setxkbmap -model evdev -layout tr -variant f"
    ;;
    us)
        cf "setxkbmap -model evdev -layout us"
    ;;
    esac
    
    k_xfce
    
    usermod -a -G plugdev ${username}
    
    session="Xfce4"
    
    fl "/etc/env.d/90xsession" "0" "d"
    
    avoid_dup 'XSESSION="'${session}'"'
    
    fl "/home/${username}/.gtkrc-2.0" "b" "d"
    
    cf "include \"/usr/share/themes/MurrinaBlu/gtk-2.0/gtkrc\""
    cf ''
    cf 'style "user-font" {'
    cf '    font_name = "DejaVu Sans 9"'
    cf '}'
    cf ''
    cf 'style "xfdesktop-icon-view" {'
    cf '    XfdesktopIconView::label-alpha = 10'
    cf '    base[NORMAL] = "#000000"'
    cf '    base[SELECTED] = "#71B9FF"'
    cf '    base[ACTIVE] = "#71FFAD"'
    cf '    fg[NORMAL] = "#ffffff"'
    cf '    fg[SELECTED] = "#71B9FF"'
    cf '    fg[ACTIVE] = "#71FFAD"'
    cf '}'
    cf ''
    cf 'widget_class "*XfdesktopIconView*" style "xfdesktop-icon-view"'
    cf ''
    cf 'widget_class "*" style "user-font"'
    cf 'gtk-font-name = "DejaVu Sans 9"'
    cf 'gtk-theme-name = "MurrinaBlu"'
    
    step=$(echo; eb2 "* "; eg2 "Emerging "; er2 "Gdm"; eg " login manager..."; echo)
    k_gdm
    
    active=$(eselect opengl list | grep "xorg-x11" | grep "*")

    if [ -z "${active}" ]; then
        eselect opengl set xorg-x11
    fi

    hwsetup
    usermod -a -G plugdev pulse &>/dev/null
    refresh
    
    echo; eb2 "* "; eg2 "Making adjustments for "; er "evdev "; echo
    
    fl "/etc/X11/xorg.conf.d/05-evdev.conf" "b" "d"

    cf 'Section "InputClass"'
    cf '    Identifier "mouse-all"'
    cf '    MatchIsPointer "on"'
    cf '    MatchDevicePath "/dev/input/event*"'
    cf '    Driver "evdev"'
    cf 'EndSection'
    cf ''
    cf 'Section "InputClass"'
    cf '    Identifier "keyboard-all"'
    cf '    MatchIsKeyboard "on"'
    cf '    MatchDevicePath "/dev/input/event*"'
    cf '    Driver "evdev"'
        case ${keymap} in
        trq|trf)
            cf '    Option "XkbLayout" "tr"'
            case ${keymap} in
            trf)
                cf '    Option "XkbVariant" "f"'
            ;;
            esac
        ;;
        us)
            cf '    Option "XkbLayout" "us"'
        ;;
        esac
    cf 'EndSection'
    cf ''
    cf 'Section "InputClass"'
    cf '    Identifier "touchpad-all"'
    cf '    MatchIsTouchpad "on"'
    cf '    MatchDevicePath "/dev/input/event*"'
    cf '    Driver "evdev"'
    cf 'EndSection'
    cf ''
    cf 'Section "InputClass"'
    cf '    Identifier "tablet-all"'
    cf '    MatchIsTablet "on"'
    cf '    MatchDevicePath "/dev/input/event*"'
    cf '    Driver "evdev"'
    cf 'EndSection'
    cf ''
    cf 'Section "InputClass"'
    cf '    Identifier "touchscreen-all"'
    cf '    MatchIsTouchscreen "on"'
    cf '    MatchDevicePath "/dev/input/event*"'
    cf '    Driver "evdev"'
    cf 'EndSection'

    fl "/etc/X11/xorg.conf.d/10-synaptics.conf" "b" "d"

    cf 'Section "InputClass"'
    cf '  Identifier "touchpad catchall"'
    cf '  MatchIsTouchpad "on"'
    cf '  MatchDevicePath "/dev/input/event*"'
    cf '  Driver "synaptics"'
    cf 'EndSection'
    cf ''
    cf 'Section "InputClass"'
    cf '  Identifier "Dell Inspiron embedded buttons quirks"'
    cf '  MatchTag "inspiron_1011|inspiron_1012"'
    cf '  MatchDevicePath "/dev/input/event*"'
    cf '  Driver "synaptics"'
    cf '  Option "JumpyCursorThreshold" "90"'
    cf '  Option "AreaBottomEdge" "4100"'
    cf 'EndSection'
    cf ''
    cf 'Section "InputClass"'
    cf '  Identifier "Dell Inspiron quirks"'
    cf '  MatchTag "inspiron_1120"'
    cf '  MatchDevicePath "/dev/input/event*"'
    cf '  Driver "synaptics"'
    cf '  Option "JumpyCursorThreshold" "250"'
    cf 'EndSection'
    cf ''
    cf 'Section "InputClass"'
    cf '  Identifier "HP Mininote quirks"'
    cf '  MatchTag "mininote_1000"'
    cf '  MatchDevicePath "/dev/input/event*"'
    cf '  Driver "synaptics"'
    cf '  Option "JumpyCursorThreshold" "20"'
    cf 'EndSection'

    fl "/etc/X11/xorg.conf.d/10-vmmouse.conf" "b" "d"

    cf 'Section "InputClass"'
    cf '  Identifier "vmmouse catchall"'
    cf '  MatchTag "vmmouse"'
    cf '  MatchDevicePath "/dev/input/event*"'
    cf '  Driver "vmmouse"'
    cf 'EndSection'

    fl "/etc/X11/xorg.conf.d/10-wacom.conf" "b" "d"

    cf 'Section "InputClass"'
    cf '  Identifier "Wacom Class"'
    cf '  MatchProduct "Wacom|WACOM"'
    cf '  MatchDevicePath "/dev/input/event*"'
    cf '  Driver "wacom"'
    cf 'EndSection'
    cf ''
    cf 'Section "InputClass"'
    cf '  Identifier "Wacom serial class"'
    cf '  MatchProduct "Serial Wacom Tablet"'
    cf '  Driver "wacom"'
    cf '  Option "ForceDevice" "ISDV4"'
    cf 'EndSection'
    cf ''
    cf 'Section "InputClass"'
    cf '  Identifier "Wacom serial class identifiers"'
    cf '  MatchProduct "WACf|FUJ02e5|FUJ02e7"'
    cf '  Driver "wacom"'
    cf 'EndSection'
    cf ''
    cf '# N-Trig Duosense Electromagnetic Digitizer'
    cf 'Section "InputClass"'
    cf '  Identifier "Wacom N-Trig class"'
    cf '  MatchProduct "HID 1b96:0001|N-Trig Pen"'
    cf '  MatchDevicePath "/dev/input/event*"'
    cf '  Driver "wacom"'
    cf '  Option "Button2" "3"'
    cf 'EndSection'
    
    fl "/etc/X11/xorg.conf.d/20-magictrackpad.conf" "b" "d"
    
    cf 'Section "InputClass"'
    cf '  Identifier "Magic Trackpad"'
    cf '  MatchUSBID "05ac:030e"'
    cf '  Driver "evdev"'
    cf 'EndSection'

    fl "xorg.eg" "0" "0"
    
    cf 'Section "Files"'
    
    ls /usr/share/fonts >> fonts.eg
    
    while read fontdir
    do
        if [ "${fontdir}" == "75dpi" ] || [ "${fontdir}" == "100dpi" ] || [ "${fontdir}" == "misc" ]; then
            cf '  FontPath "/usr/share/fonts/'${fontdir}':unscaled"'
        else
            cf '  FontPath "/usr/share/fonts/'${fontdir}'"'
        fi
    done < fonts.eg
    
    cf 'EndSection'
    cf ''
    cf 'Section "ServerFlags"'
    cf '    Option  "DontZap" "off"'
    cf 'EndSection'
    cf ''
    cf 'Section "Device"'
    cf '    Identifier "video-card"'
    cf '    Driver  "vesa"'
    cf '    Option  "Monitor-default" "monitor"'
    cf 'EndSection'
    cf ''
    cf 'Section "Monitor"'
    cf '    Identifier  "monitor"'
    cf '    VertRefresh  50-70'
    cf '    HorizSync  30-80'
    cf '    Option  "Enable" "true"'
    cf '    Option  "TargetRefresh" "60"'
    cf '    Option "RenderAccel" "True"'
        case ${type} in
        laptop)
            cf '    Option  "DPMS" "true"'
        ;;
        esac
    cf 'EndSection'
    cf ''
    cf 'Section "Screen"'
    cf '    Identifier  "general"'
    cf '    Device  "video-card"'
    cf '    Monitor  "monitor"'
    cf 'EndSection'
    cf ''
    cf 'Section "ServerLayout"'
    cf '    Identifier  "general-layout"'
    cf '    Screen  "general"'
    cf '    Option "BackingStore" "True"'
    cf 'EndSection'
    cf ''
    cf 'Section "Module"'
    cf '    Load  "dbe"'
    cf '    Load  "dri"'
    cf '    Load  "dri2"'
    cf '    Load  "evdev"'
    cf '    Load  "extmod"'
    cf '    SubSection  "extmod"'
    cf '      Option    "omit xfree86-dga"'
    cf '    EndSubSection'
    cf '    Load  "freetype"'
    cf '    Load  "glx"'
    cf 'EndSection'
    cf ''
    cf 'Section "Extensions"'
    cf '    Option  "Composite"  "Enable"'
    cf 'EndSection'
    
    fl "/etc/X11/xorg.conf" "b" "d"
    
    cp xorg.eg ${trg_file}
}

k_gdm() {
    inst "gdm gdm-themes"
    
    h=$(grep gdm /etc/group | cut -d: -f1)
    if [ "${h}" != "gdm" ]; then
        groupadd gdm
    fi

    if [ -z "$(grep gdm /etc/passwd | cut -d: -f1)" ]; then
        useradd gdm -s /sbin/nologin -g gdm
    fi
    
    session_name="$(ls /usr/share/xsessions/ | grep -iv fluxbox | grep -iv gnome | grep -iv kde | grep -iv lxde | grep -iv openbox | grep -i xfce)"
    
    fl "/etc/X11/gdm/custom.conf" "b" "d"
    
    cf "[daemon]"
    cf "DefaultSession=${session_name}"
    cf "[greeter]"
    cf "GraphicalTheme=soft-flower-gdm"
    cf "Use24Clock=true"
    
    chown -fP ${username} ${trg_file}
    
    session_name2="$(echo ${session_name} | cut -d'.' -f1)"
    
    fl "/home/${username}/.dmrc" "0" "d"
    
    cf "[Desktop]"
    cf "Session=${session_name2}"
    
    chown -fP ${username} ${trg_file}
}

k_xfce() {
    step=$(echo; eb2 "* "; eg2 "Emerging "; er2 "Xfce"; eg " desktop environment..."; sleep 0.5s; echo)
    inst "xfce4-meta xfce4-notifyd"
    step=$(echo; eb2 "* "; eg "Emerging other Xfce packages..."; sleep 0.5s; echo)
    inst "app-editors/leafpad x11-terms/xfce4-terminal x11-themes/murrine-themes xarchiver xfce4-mixer xfce4-taskmanager"
    
    if [ "${type}" == "laptop" ]; then
        step=$(echo; eb2 "* "; eg "Emerging packages needed for laptops..."; sleep 0.5s; echo)
        inst "xfce4-battery-plugin xfce4-power-manager laptop-mode-tools"
        rc-update add laptop_mode default &>/dev/null
    fi
    
    step=$(echo; eb2 "* "; eg2 "Emerging "; er2 "Thunar"; eg "..."; sleep 0.5s; echo)
    inst "thunar thunar-archive-plugin thunar-volman trayer"
    
    fl "/home/${username}/.xinitrc" "0" "0"
    
    cf "export GDK_USE_XFT=1"
    cf "export QT_XFT=true"
    cf "exec $(which ck-launch-session) $(which dbus-launch) --exit-with-session xfce4-session"
    
    if [ ! -d "/home/${username}/.config/xfce4/panel" ]; then
        mkdir -p /home/${username}/.config/xfce4/panel
    fi
    
    cp /etc/xdg/xfce4/panel/default.xml /home/${username}/.config/xfce4/panel/
    
    rc-update add xdm default &>/dev/null

    fl "/etc/conf.d/xdm" "0" "0"
    
    avoid_dup 'DISPLAYMANAGER="gdm"'
    avoid_dup 'NEEDS_HALD="no"'
    
    chown -fP ${username} ${trg_file}
}

k_system() {
    touch sys.eg
    step=$(echo; eb2 "* "; eg "Updating system..."; echo; sleep 0.5s)
    inst "-e system"
    rm -rf sys.eg
}

k_check() {
    step=$(echo; eb2 "* "; eg "Checking system..."; echo; sleep 0.5s)
    inst "-uDN world"
    rdr
}

set_gcc() {
    gcc_version="$(emerge -pq gcc | sed -e 's:.*sys-devel/gcc-::' -e 's: .*::')"
    gcc_number=$(gcc-config -l | tr '[]' ' ' | awk '/'${gcc_version}'/ { print $1 }')
    
    if [ -z "${gcc_number}" ]; then
        gcc_number="$(gcc-config -l | grep -v '*' | tr '[]' ' ' | awk '{ print $1 }')"
    else
        case "${gcc_number}" in
        1|2)
            e="x"
        ;;
        *)
            gcc_number="2"
        ;;
        esac
    fi
    
    echo
    gcc-config ${gcc_number} &>/dev/null
    gcc-config ${gcc_number} &>/dev/null
    gcc-config ${gcc_number} &>/dev/null
}

refresh() {
    echo "-5" | CONFIG_PROTECT_MASK="/etc" etc-update &>/dev/null; env-update &>/dev/null; source /etc/profile &>/dev/null
    vlist
    echo
}

lff() {
    which lafilefixer &>/dev/null && { echo; eb2 "* "; eg "lafilefixer --justfixit"; echo; lafilefixer --justfixit; }
}

rdr() {
    which revdep-rebuild &>/dev/null && { echo; eb2 "* "; eg "revdep-rebuild"; echo; revdep-rebuild; }
}

vlist() {
    source "$(pwd)/${vl}"
}

start() {
    export SHELL=$(which bash); setterm -blank 0; cl
    
    eg="easygentoo"; profile="profile"; vl="variables"; mnt="/mnt/gentoo"
    lt="latest-stage3.txt"; compiled="compiled.txt"
    
    [[ -e "/chroot.eg" ]] && inside || { intro; check; prepare; get_tar; move; }

    exit 0
}

intro() {
    cl; echo; echo
    echo; eg "  Welcome to Easy Gentoo!"; echo; sleep 0.5s
    echo; ey "  Please make sure that your profile is configured the way you exactly need it."
    ey "  The setup is automated and not even a single key press is needed till the end (if everything goes as planned ^^).";
    sleep 0.5s; echo; ew2 "  Press any key to continue..."; echo; read -n1 key; echo
    cl; eg "  Good luck ;)"; sleep 1s
}

check() {
    [[ "$(pwd)" != "/root" ]] && { echo; er2 "Please move the script to "; ey2 "/root"; er " and start it again."; exit 1; }
    
    [[ ! -e "${profile}" ]] && { cl; er "  Looks like you don't have a profile. Please create one."; echo; exit 1; }
    
    rm -rf easygentoo.config *.DIGESTS *.eg *.md5sum *.tmp *.lst ${lt} ${vl}
    
    for var in "arch blimit domainname grub hostname keymap setup rootpass userpass username windows"
    do
        unset ${var}
    done
    
    for var2 in "boot swap root home extra"
    do
        unset ${var2}_part ${var2}_label ${var2}_fs ${var2}_mp
    done
    
    for var3 in "fse fs_exist progs adapters_found core kw tarball type available_cpu_flags"
    do
        unset ${var3}
    done
    
    echo "$(tr -s '[:blank:]' ' ' < ${profile})" > ${profile}
    
    lc_e=$(grep -c emerge ${profile})
    
    case ${lc_e} in
    [1-9]|[1-9][0-9])
        new_line="$(grep emerge ${profile} | cut -c 8- | sed '{:q;N;s/\n/ /g;t q}')"
        sed -i "\!.*emerge.*!d" ${profile}
        echo "emerge ${new_line}" >> ${profile}
    ;;
    esac

    [[ ! -d "${mnt}" ]] && mkdir -p ${mnt}
    
    necessary="awk bash cat chmod chroot clear cp cut fdisk free grep ip loadkeys md5sum mkdir mount mv rm sed setterm sha512sum sleep swapoff swapon tar touch tr umount wc wget"
    nicknames="boot extra home root swap"
    
    a2v "fs_list=\"btrfs ext2 ext3 ext4 ntfs reiserfs xfs\""
    
    for nick in ${nicknames}
    do
        for a in ${fs_list}
        do
            t=$(grep "${nick} " "${profile}" | grep "${a}")
            if [ -n "${t}" ]; then
                added1=$(echo "${fse}" | grep "${a}")
                if [ -z "${added1}" ]; then
                    [[ -z "${fse}" ]] && fse="${a}" || fse="${a} ${fse}"
                fi

                added2=$(echo "${necessary}" | grep "mkfs.${a}")
                [[ -z "${added2}" ]] && necessary="mkfs.${a} ${necessary}"
            fi
        done
    done
    
    a2v "fs_exist=\"${fse}\""

    echo; eb2 "* "; eg "Checking the existence of necessary tools..."; echo; sleep 1s
    
    for b in ${necessary}
    do
        exist "${b}"
    done
    
    sleep 1s
    
    progs="ntfs3g pcmciautils procps"

    for g in ${fs_list}
    do
        pr_need=$(echo "${fs_exist}" | grep "${g}")

        if [ -n "${pr_need}" ]; then
            case ${g} in
            btrfs)
                fsprogs="btrfs-progs"
            ;;
            ext2|ext3|ext4)
                fsprogs="e2fsprogs e2fsprogs-libs"
            ;;
            nfs)
                fsprogs="nfs-utils"
            ;;
            reiserfs)
                fsprogs="libaal reiserfsprogs"
            ;;
            xfs)
                fsprogs="xfsprogs"
            ;;
            esac

            added3=$(echo "${progs}" | grep "${fsprogs}")
            [[ -z "${added3}" ]] && progs="${fsprogs} ${progs}"
        fi
    done
    
    a2v "progs=\"${progs}\""

    unset adapter
    for adapter in eth0 eth1 eth2 eth3 eth4 eth5
    do
        ip -s link show "${adapter}" &>/dev/null && echo "${adapter}" >> adapters.eg
    done
    
    [[ -e adapters.eg ]] && adapters_found="$(cat adapters.eg | tr '\n' ' ' | sed 's/ *$//')"
    [[ -z "${adapters_found}" ]] && { echo; er "Looks like there aren't any network adapters. Setup is unable to continue. Exiting now..." ; echo; echo; exit 1; }

    a2v "adapters_found=\"${adapters_found}\""
    
    fdisk -l 2>/dev/null | awk '/^\/dev\/[s:h]d/ {print $1}' > partition_list.tmp
}

prepare() {
    file_format() {
        case ${fs} in
        swap)
            prm="sw,noatime,loop"
            echo "swapoff /dev/${part} > /dev/null 2>&1" >> format.eg
            echo "mkswap -L ${label} /dev/${part} > /dev/null 2>&1" >> format.eg
        ;;
        btrfs)
            prm="defaults,noatime,autodefrag,noacl,compress-force=lzo"
            echo "umount -l /dev/${part} > /dev/null 2>&1" >> format.eg
            echo "mkfs.${fs} -L ${label} -s 1024 /dev/${part} > /dev/null 2>&1" >> format.eg
        ;;
        ext2)
            prm="defaults,noatime"
            echo "umount -l /dev/${part} > /dev/null 2>&1" >> format.eg
            echo "mkfs.${fs} -L ${label} -b 1024 /dev/${part} > /dev/null 2>&1" >> format.eg
        ;;
        ext3)
            prm="defaults,noatime,data=ordered"
            echo "umount -l /dev/${part} > /dev/null 2>&1" >> format.eg
            echo "mkfs.${fs} -L ${label} -b 1024 /dev/${part} > /dev/null 2>&1" >> format.eg
            echo "tune2fs -c 0 -i 1m -I 256 -O dir_index,has_journal -o journal_data_ordered -m 1 /dev/${part} > /dev/null 2>&1" >> format.eg
            echo "e2fsck -fpDC0 /dev/${part} > /dev/null 2>&1" >> format.eg
        ;;
        ext4)
            prm="defaults,noatime,data=ordered"
            echo "umount -l /dev/${part} > /dev/null 2>&1" >> format.eg
            echo "mkfs.${fs} -L ${label} -b 1024 /dev/${part} > /dev/null 2>&1" >> format.eg
            echo "tune2fs -c 0 -i 1m -O dir_index,has_journal -o journal_data_ordered -m 1 /dev/${part} > /dev/null 2>&1" >> format.eg
            echo "e2fsck -fpDC0 /dev/${part} > /dev/null 2>&1" >> format.eg
        ;;
        ntfs)
            prm="defaults,locale=tr_TR.utf8,users,nls=utf8,umask=000"
            echo "umount -l /dev/${part} > /dev/null 2>&1" >> format.eg
            echo "mkfs.${fs} -L ${label} --no-indexing -f /dev/${part} > /dev/null 2>&1" >> format.eg
        ;;
        reiserfs)
            prm="defaults,noatime"
            echo "umount -l /dev/${part} > /dev/null 2>&1" >> format.eg
            echo "mkfs.${fs} -q -l ${label} /dev/${part} > /dev/null 2>&1" >> format.eg
        ;;
        xfs)
            prm="defaults,noatime,logbufs=8,logbsize=32k,osyncisdsync"
            echo "umount -l /dev/${part} > /dev/null 2>&1" >> format.eg
            echo "mkfs.${fs} -L ${label} -f -l internal,lazy-count=1,size=64m -d agcount=2 -n size=8k -i size=1024 /dev/${part} > /dev/null 2>&1 || 
            mkfs.${fs} -L ${label} -f -l internal,lazy-count=1,size=32m -d agcount=2 -n size=8k -i size=1024 /dev/${part} > /dev/null 2>&1 || 
            mkfs.${fs} -L ${label} -f -l internal,lazy-count=1 -n size=8k -i size=1024 /dev/${part} > /dev/null 2>&1" >> format.eg
        ;;
        esac
        
        echo " " >> format.eg
    }

    file_fstab() {
        case "${fs}" in
        ntfs)
            echo "LABEL=${label}   ${mp}   ntfs-3g   ${prm}   ${dp}"  >> fstab.eg
        ;;
        *)
            echo "LABEL=${label}   ${mp}   ${fs}   ${prm}   ${dp}"  >> fstab.eg
        ;;
        esac
    }

    file_mount() {
        case ${fs} in
        swap)
            echo "swapoff /dev/${part} > /dev/null 2>&1" >> mount.eg
            echo "swapon /dev/${part} > /dev/null 2>&1" >> mount.eg
        ;;
        root)
            echo "umount -l /dev/${part} > /dev/null 2>&1" >> mount.eg
            echo "mount -t ${fs} /dev/${part} ${mnt}${mp} -o ${prm} || mount /dev/${part} ${mnt}${mp} > /dev/null 2>&1" >> mount.eg
        ;;
        *)
            echo "umount -l /dev/${part} > /dev/null 2>&1" >> mount.eg
            
            [[ ! -d "${mnt}${mp}" ]] && echo "mkdir -p ${mnt}${mp}" >> mount.eg
            
            echo "mount -t ${fs} /dev/${part} ${mnt}${mp} -o ${prm} > /dev/null 2>&1 || mount /dev/${part} ${mnt}${mp} > /dev/null 2>&1" >> mount.eg
        ;;
        esac
    }

    default_value() {
        case ${1} in
        arch)
            value="$(uname -m)"
            
            case ${value} in
            x86_64)
                value="amd64"
            ;;
            esac
        ;;
        blimit)
            value="0"
        ;;
        keymap)
            value="us"
        ;;
        domainname)
            value="easygentoo"
        ;;
        username)
            value="owner"
        ;;
        hostname)
            value="freshinstall"
        ;;
        rootpass)
            value="toor"
        ;;
        userpass)
            value="resu"
        ;;
        root)
            echo; er "  /root partition is not specified in profile. Please change your profile and start again."; echo; exit 1
        ;;
        setup)
            value="basic"
        ;;
        grub)
            value="$(echo ${root_part} | sed s:[0-9].*::)"
        ;;
        windows)
            value=""
        ;;
        esac
    }
    
    rm -rf mount.eg
    echo "normal=$'\e[0m'" >> mount.eg
    echo "red=$'\e[31;01m'" >> mount.eg
    echo "blue=$'\e[34;01m'" >> mount.eg

    rm -rf format.eg
    echo "normal=$'\e[0m'" >> format.eg
    echo "red=$'\e[31;01m'" >> format.eg
    echo "blue=$'\e[34;01m'" >> format.eg
    
    if [ -n "$(grep '^root ' ${profile})" ]; then
        grep '^root ' ${profile} > p.tmp
        part="$(awk '{print $2}' p.tmp)"; label="$(awk '{print $3}' p.tmp)"
        fs="$(awk '{print $4}' p.tmp)"; mp="/"; dp="0 1"
        a2v "root_part=\"${part}\"   root_label=\"${label}\"   root_fs=\"${fs}\"   root_mp=\"${mp}\""
        
        echo 'echo -n ${red} "      * "; echo ${blue}"formatting root partition..."${normal}; sleep 0.5s' >> format.eg
        file_format; file_fstab
        echo 'echo -n ${red} "      * "; echo ${blue}"mounting root partition..."${normal}; sleep 0.5s' >> mount.eg
        file_mount
    fi

    if [ -n "$(grep '^boot ' ${profile})" ]; then
        grep '^boot ' ${profile} > p.tmp
        part="$(awk '{print $2}' p.tmp)"; label="$(awk '{print $3}' p.tmp)"
        fs="ext2"; mp="/boot"; dp="1 2"
        a2v "boot_part=\"${part}\"   boot_label=\"${label}\"   boot_fs=\"${fs}\"   boot_mp=\"${mp}\""
        
        echo 'echo -n ${red} "      * "; echo ${blue}"formatting boot partition..."${normal}; sleep 0.5s' >> format.eg
        file_format; file_fstab
        echo 'echo -n ${red} "      * "; echo ${blue}"mounting boot partition..."${normal}; sleep 0.5s' >> mount.eg
        file_mount
    fi

    if [ -n "$(grep '^swap ' ${profile})" ]; then
        grep '^swap ' ${profile} > p.tmp
        part="$(awk '{print $2}' p.tmp)"; label="$(awk '{print $3}' p.tmp)"
        fs="swap"; mp="none"; dp="0 0"
        a2v "swap_part=\"${part}\"   swap_label=\"${label}\"   swap_fs=\"${fs}\"   swap_mp=\"${mp}\""
        
        echo 'echo -n ${red} "      * "; echo ${blue}"formatting swap partition..."${normal}; sleep 0.5s' >> format.eg
        file_format; file_fstab
        echo 'echo -n ${red} "      * "; echo ${blue}"activating swap partition..."${normal}; sleep 0.5s' >> mount.eg
        file_mount
    fi

    if [ -n "$(grep '^home ' ${profile})" ]; then
        grep '^home ' ${profile} > p.tmp
        part="$(awk '{print $2}' p.tmp)"; label="$(awk '{print $3}' p.tmp)"
        fs="$(awk '{print $4}' p.tmp)"; mp="/home"; dp="0 0"
        a2v "home_part=\"${part}\"   home_label=\"${label}\"   home_fs=\"${fs}\"   home_mp=\"${mp}\""
        
        echo 'echo -n ${red} "      * "; echo ${blue}"formatting home partition..."${normal}; sleep 0.5s' >> format.eg
        file_format; file_fstab
        echo 'echo -n ${red} "      * "; echo ${blue}"mounting home partition..."${normal}; sleep 0.5s' >> mount.eg
        file_mount
    fi

    if [ -n "$(grep '^extra ' ${profile})" ]; then
        grep '^extra ' ${profile} > extra.eg
        dp="0 0"
        
        echo 'echo -n ${red} "      * "; echo ${blue}"formatting other specified partitions..."${normal}; sleep 0.5s' >> format.eg
        
        while read name part label fs mp
        do
            file_format; file_fstab
        done < extra.eg
        
        echo 'echo -n ${red} "      * "; echo ${blue}"mounting other specified partitions..."${normal}; sleep 0.5s' >> mount.eg
        
        while read name part label fs mp
        do
            file_mount
        done < extra.eg
    fi
    
    echo "shm    /dev/shm    tmpfs    nodev,nosuid,noexec    0 0"  >> fstab.eg

    chmod +x format.eg; chmod +x mount.eg
    
    settings="arch blimit domainname grub hostname keymap setup rootpass userpass username windows"

    for s in ${settings}
    do
        unset value value2
        if [ -z "$(grep ^${s} ${profile})" ]; then
            default_value "${s}"
        else
            grep "^${s} " ${profile} > p.tmp
            
            case ${s} in
            keymap)
                value="$(awk '{print $2}' p.tmp)"
                case ${value} in
                trq|trf|us)
                    e="x"
                ;;
                tr)
                    value="trq"
                ;;
                *)
                    value="us"
                ;;
                esac
            ;;
            *)
                value="$(awk '{print $2}' p.tmp)"
            ;;
            esac
        fi
        
        [[ -n "${value}" ]] && a2v "${s}=\"${value}\""
    done
    
    core=$(grep -c processor /proc/cpuinfo); ((core++))
    a2v "core=\"${core}\""

    case ${arch} in
    i686)
        kw="x86"
    ;;
    amd64)
        kw="amd64"
    ;;
    esac
    
    a2v "kw=\"${kw}\""

    case ${disk_size} in
    [1-9] | [1-9][0-9] | [1-9][0-9][0-9] | [2-5][0-9][0-9][0-9])
        echo; er "root partition (${root_part}) is smaller (${disk_size} MB) than the recommended partition size (6000 MB)."
        echo; er "This may cause some problems during setup. It is safer to choose/create a bigger partition for root."
        er "Press any key if you want to ignore this and continue..."; echo; read key
    ;;
    esac

    find_flags
    fdisk -l /dev/"${root_part}" 2>/dev/null | grep "${root_part}" | tr ':,' '\n' | grep -v "bytes" | grep -v "${root_part}" | grep "[0-9] [A-Z]" > psize.tmp
    
    while read g1 g2
    do
        psize="${g1}"
        stype="${g2}"
    done < psize.tmp
    
    psize="$(echo ${psize} | cut -d'.' -f1)"
    ram_size="$(grep -i memtotal < /proc/meminfo | sed -e 's:.* \([0-9].* kb\):\1:i' -e 's: .*::')"
    
    a2v "psize=\"${psize}\"   stype=\"${stype}\"   ram_size=\"${ram_size}\""
    
    echo; eb2 "* "; eg2 "Preparing partitions... "; ey "(formatting)"; echo; sleep 0.5s; ./format.eg
    echo; eb2 "* "; eg2 "Preparing partitions... "; ey "(mounting)"; echo; sleep 0.5s; ./mount.eg
    rm -rf format.eg mount.eg p.tmp psize.tmp
    loadkeys ${keymap} &>/dev/null
}

get_tar() {
    [[ "$(ping -nc1 www.google.com)" ]] && tch connected.eg || { [[ "$(ping -nc3 www.google.com)" ]] && tch connected.eg || connect_me &>/dev/null; }
    echo; eb2 "* "; eg "Checking mirrors..."; sleep 0.5s
    
    case ${keymap} in
    trq|trf)
        mirrorlist="http://ftp.linux.org.tr/gentoo ftp://ftp.linux.org.tr/gentoo ftp://mirrors.linuxant.fr/distfiles.gentoo.org"
    ;;
    us)
        mirrorlist="ftp://mirrors.linuxant.fr/distfiles.gentoo.org http://gentoo.supp.name http://portage.org.ua"
    ;;
    esac
    
    a2v "mirrorlist=\"${mirrorlist}\""
    
    mirror_check
    
    which sntp &>/dev/null && sntp -b -u pool.ntp.org &>/dev/null
    
    [[ -e "${lt}" ]] && rm -rf ${lt}
    
    echo; eb2 "* "; eg "Getting latest tarball name..."; sleep 1s
    
    case ${arch} in
    i686)
        get_files "${mirror}/releases/x86/autobuilds/${lt}"
    ;;
    amd64)
        get_files "${mirror}/releases/amd64/autobuilds/${lt}"
    ;;
    esac
    
    sed -i -e '\!^#!d' -e 's:^[ \t]*::' -e 's:[ \t]*$::' -e '\!^$!d' ${lt}
    
    ext=".tar.bz2"
    tardate="$(grep ${arch} ${lt} | cut -d'/' -f1 | uniq)"
    tarball="stage3-${arch}-${tardate}${ext}"
    
    a2v "tarball=\"${tarball}\""
    
    en2 "  Latest tarball:"; ey "  ${tarball}"; sleep 1s
    
    case ${arch} in
    i686)
        t_int="${mirror}/releases/x86/autobuilds/${tardate}/${tarball}"; t_dig="${t_int}.DIGESTS"
    ;;
    amd64)
        t_int="${mirror}/releases/amd64/autobuilds/${tardate}/${tarball}"; t_dig="${t_int}.DIGESTS"
    ;;
    esac
    
    check="x"
    while [ "${check}" != "ok" ]
    do
        [[ -e "${tarball}.DIGESTS" ]] && rm -rf ${tarball}.DIGESTS

        get_files "${t_dig}"; grep "${tarball}" "${tarball}.DIGESTS" | sed 1q > t_dig.eg

        if [ -e "${tarball}" ]; then
            echo; eb2 "* "; ew2 "stage3-${arch} tarball exists. "; eg "(previously downloaded)"
        else
            echo; eb2 "* "; er "Downloading stage3-${arch} tarball... "
            
            if [ "${blimit}" -gt "0" ]; then
                get_files "--limit-rate=${blimit}k ${t_int}"
            else
                get_files "${t_int}"
            fi
        fi
        
        ey2 "  Checking tarball integrity... "; shasum "t_dig.eg" "${tarball}"
    done
    
    echo "${tarball}" > tball.eg
    
    open_tar &
    
    p="portage-latest.tar.bz2"; p_md5="${p}.md5sum"; p_int="${mirror}/snapshots/${p}"

    check="x"
    while [ "${check}" != "ok" ]
    do
        [[ -e "${p_md5}" ]] && rm -rf ${p_md5}

        get_files "${mirror}/snapshots/${p_md5}"

        if [ -e "${p}" ]; then
            echo; eb2 "* "; ew2 "portage snapshot exists. "; eg "(previously downloaded)"
        else
            echo; eb2 "* "; er "Downloading portage snapshot... "
            
            if [ "${blimit}" -gt "0" ]; then
                get_files "--limit-rate=${blimit}k ${p_int}"
            else
                get_files "${p_int}"
            fi
        fi
        
        ey2 "  Checking portage snapshot integrity... "; csum "${p_md5}" "${p}"
    done
    
    echo "${p}" > sshot.eg
    
    [[ ! -e "move.eg" ]] && { echo; eb2 "* "; ey "Extracting downloaded files, this may take a while..."; echo; }
    
    while true
    do
        [[ -e "tball.done" ]] && { read t < tball.eg; eg2 "  ${t}"; ew " is successfully extracted."; break; } || sleep 1s
    done
    
    while true
    do
        [[ -e "sshot.done" ]] && { read p < sshot.eg; eg2 "  ${p}"; ew " is successfully extracted."; break; } || sleep 1s
    done

    until [ -e "move.eg" ]
    do
        sleep 1s
    done
    
    rm -rf tball.* sshot.* move.eg
}

open_tar() {
    echo
    until [ -e "tball.eg" ]
    do
        sleep 1s
    done
    
    read t < tball.eg
    tar xjpf ${t} -C ${mnt} && touch tball.done
    
    until [ -e "sshot.eg" ]
    do
        sleep 1s
    done
    
    read p < sshot.eg
    mkdir -p ${mnt}/usr/portage && tar xjf ${p} -C ${mnt}/usr && touch sshot.done

    touch move.eg
}

move() {
    cp -dpRL /dev/{console,kmem,mem,null,urandom,random,zero,ptmx,ram[0-6],tty[0-6]} ${mnt}/dev &>/dev/null
    
    [[ -e "${mnt}/etc/resolv.conf" ]] && cp ${mnt}/etc/resolv.conf ${mnt}/etc/resolv.conf.backup && rm -rf ${mnt}/etc/resolv.conf
    
    cp -L /etc/resolv.conf ${mnt}/etc/

    [[ ! -d "${mnt}/etc/portage" ]] && mkdir -p ${mnt}/etc/portage

    umount -l ${mnt}/proc ${mnt}/dev &>/dev/null
    mount -t proc none ${mnt}/proc &>/dev/null
    mount -R /dev ${mnt}/dev &>/dev/null
    
    cp ${eg} ${mnt} &>/dev/null
    mv ${profile} ${mnt} &>/dev/null
    mv ${compiled} ${mnt} &>/dev/null
    mv ${vl} ${mnt} &>/dev/null
    mv *.tar.bz2 ${mnt} &>/dev/null
    mv *.eg ${mnt} &>/dev/null
    mv *.tmp ${mnt} &>/dev/null
    
    rm -rf easygentoo.config *.DIGESTS *.eg *.md5sum *.tmp ${lt} ${vl}
    
    touch ${mnt}/chroot.eg &>/dev/null
    
    chroot ${mnt} ./${eg}
}

create_swap_file() {
    case ${stype} in
    MB)
        [[ "${psize}" -gt "8000" ]] && swap_file="yes"
    ;;
    GB)
        [[ "${psize}" -gt "8" ]] && swap_file="yes"
    ;;
    TB)
        swap_file="yes"
    ;;
    *)
        swap_file="no"
    ;;
    esac
    
    if [ "${swap_file}" == "yes" ]; then
        echo; eb2 "* "; eg2 "Creating a swap file"; er " (1GB)"; sleep 0.5s
        dd if=/dev/zero of=/egswap count=2M &>/dev/null
        mkswap /egswap &>/dev/null
        swapon /egswap &>/dev/null
    fi
}

shut() {
    [[ -e "stop.eg" ]] && break
}

inside() {
    [[ -e stop.eg ]] && rm -rf stop.eg
    [[ ! -e "${compiled}" ]] && touch ${compiled}
    on_off &
    net_watch &
    
    echo; eg "  !!--Chroot--!!"
    
    fl "/etc/etc-update.conf" "0" "0"
    
    avoid_dup 'rm_opts=""'
    avoid_dup 'cp_opts=""'

    refresh
    
    [[ -z "${swap_part}" ]] && (( "${ram_size}" < "1900000" )) && create_swap_file
    
    case ${type} in
    pc)
        echo 10 > /proc/sys/vm/swappiness
        echo 600 > /proc/sys/vm/dirty_expire_centisecs
        echo 600 > /proc/sys/vm/dirty_writeback_centisecs
        echo 5 > /proc/sys/vm/dirty_background_ratio
        echo 20 > /proc/sys/vm/dirty_ratio
        echo 0 > /proc/sys/vm/laptop_mode
        echo 50 > /proc/sys/vm/vfs_cache_pressure
    ;;
    laptop)
        echo 10 > /proc/sys/vm/swappiness
        echo 6000 > /proc/sys/vm/dirty_expire_centisecs
        echo 6000 > /proc/sys/vm/dirty_writeback_centisecs
        echo 50 > /proc/sys/vm/dirty_background_ratio
        echo 90 > /proc/sys/vm/dirty_ratio
        echo 5 > /proc/sys/vm/laptop_mode
        echo 50 > /proc/sys/vm/vfs_cache_pressure
    ;;
    esac
    
    echo; eb2 "* "; eg2 "Creating"; er " make.conf..."; sleep 0.5s

    fl "/etc/portage/make.conf" "0" "d"

    cf "CFLAGS=\"-march=native -O2 -pipe\""
    cf 'CXXFLAGS="${CFLAGS}"'
        case ${arch} in
        i686)
            cf 'CHOST="i686-pc-linux-gnu"'
        ;;
        amd64)
            cf 'CHOST="x86_64-pc-linux-gnu"'
        ;;
        esac
    cf 'LDFLAGS="-Wl,-O1 -Wl,--as-needed -Wl,--sort-common -Wl,--hash-style=gnu"'
    cf 'ACCEPT_KEYWORDS="'${kw}'"'
    cf 'ACCEPT_LICENSE="*"'
    cf 'MAKEOPTS="-j2"'
        case ${keymap} in
        trq|trf)
            cf 'LINGUAS="tr en"'
        ;;
        us)
            cf 'LINGUAS="en"'
        ;;
        esac
    cf 'AUTOCLEAN="no"'
    cf 'FEATURES="-ccache -distcc fixlafiles -news -parallel-fetch sandbox userpriv usersandbox"'
    cf 'USE="'${available_cpu_flags}'"'
    cf ''
    cf '# It is recommended to leave WANT_MP disabled because of the problems it may trigger.'
    cf '# WANT_MP="true"'
    cf ''
    cf 'PORTAGE_RSYNC_INITIAL_TIMEOUT="10"'
    cf 'PORTAGE_RSYNC_RETRIES="5"'
    cf 'GENTOO_MIRRORS="'${mirrorlist}'"'
    cf 'RSYNC="rsync://rsync2.us.gentoo.org rsync://rsync3.us.gentoo.org rsync://rsync25.us.gentoo.org"'
        if [ "${blimit}" -gt "0" ]; then
            cf 'FETCHCOMMAND="${FETCHCOMMAND} --limit-rate='${blimit}'k"'
            cf 'RESUMECOMMAND="${RESUMECOMMAND} --limit-rate='${blimit}'k"'
        fi
    cf 'EMERGE_DEFAULT_OPTS="--autounmask=y --autounmask-write=y --with-bdeps=y"'
    cf ''
    
    mkdir -p /etc/portage/env/dev-lang
    mkdir -p /etc/portage/env/dev-db
    mkdir -p /etc/portage/env/www-client
    mkdir -p /etc/portage/env/net-libs
    
    fl "/etc/portage/env/O3-cflags" "0" "d"
    cf "CFLAGS=\"-march=native -O3 -pipe\""
    cf 'CXXFLAGS="${CFLAGS}"'
    
    ln -sf /etc/portage/env/O3-cflags /etc/portage/env/dev-lang/python &>/dev/null
    ln -sf /etc/portage/env/O3-cflags /etc/portage/env/dev-db/sqlite &>/dev/null
    
    fl "/etc/portage/env/firefox-cflags" "0" "d"
    cf "CFLAGS=\"-march=native -Os -pipe -fomit-frame-pointer\""
    cf 'CXXFLAGS="${CFLAGS}"'
    cf 'LDFLAGS="${LDFLAGS} -Bdirect -Wl,-z,now"'
    
    ln -sf /etc/portage/env/firefox-cflags /etc/portage/env/www-client/firefox &>/dev/null
    
    fl "/etc/portage/env/xulrunner-cflags" "0" "d"
    cf "CFLAGS=\"-march=native -O2 -pipe -fomit-frame-pointer\""
    cf 'CXXFLAGS="${CFLAGS}"'
    cf 'LDFLAGS="${LDFLAGS} -Bdirect -Wl,-z,now"'
    
    ln -sf /etc/portage/env/xulrunner-cflags /etc/portage/env/net-libs/xulrunner &>/dev/null
    
    echo; k_portage; k_must
    
    case $(dmidecode -t 3 | awk '/Type: / {print $2}') in
    Notebook|Netbook|Laptop)
        a2v "type=\"laptop\""
    ;;
    *)
        a2v "type=\"pc\""
    ;;
    esac
    
    fl "/etc/locale.gen" "0" "0"
    
    case ${keymap} in
    trq|trf)
        cf "tr_TR.UTF-8 UTF-8"
        cf "tr_TR ISO-8859-9"
    ;;
    us)
        cf "en_US.UTF-8"
        cf "en_US ISO-8859-1"
    ;;
    esac
    
    locale-gen &>/dev/null
    
    echo; eb2 "* "; eg2 "Updating"; er " make.conf..."; sleep 0.5s

    fl "/etc/portage/make.conf" "0" "d"

    cf "CFLAGS=\"-march=native -O2 -pipe\""
    cf 'CXXFLAGS="${CFLAGS}"'
        case ${arch} in
        i686)
            cf 'CHOST="i686-pc-linux-gnu"'
        ;;
        amd64)
            cf 'CHOST="x86_64-pc-linux-gnu"'
        ;;
        esac
    cf 'LDFLAGS="-Wl,-O1 -Wl,--as-needed -Wl,--sort-common -Wl,--hash-style=gnu"'
    cf 'ACCEPT_KEYWORDS="'${kw}'"'
    cf 'ACCEPT_LICENSE="*"'
    cf 'MAKEOPTS="-j'${core}'"'
    cf ''
    cf '# It is recommended to leave WANT_MP disabled because of the problems it may trigger.'
    cf '# WANT_MP="true"'
    cf ''
    
    cf '#cpu'
    cf 'USE="${USE} '${available_cpu_flags}'"'
    cf ''
    cf '#file systems'
    cf 'USE="${USE} btrfs fat hfs inotify jfs nfs ntfs reiser4 reiserfs sysfs xfs"'
    cf ''
    cf '#base system'
    cf 'USE="${USE} acl acpi bash-completion berkdb bidi branding bzip2 consolekit '
    cf '    css dbus gdbm gnutls kmod lzo nptl pam policykit profile rar readline sqlite '
    cf '    sqlite3 symlink truetype udev unicode usb vdpau zlib"'
    cf ''
    cf '#disabled'
    cf 'USE="${USE} -apm -arts -avahi -beagle -cpudetection -debug -dhclient -doc '
    cf '    -dso -eds -esd -evo -git -gphoto2 -gpm -hal -hunspell -ieee1394 -introspection '
    cf '    -ipv6 -java -joystick -kdeprefix -kerberos -ldap -lm_sensors -minimal -mono '
    cf '    -mysql -ncurses -nss -openexr -oss -perl -spell -static -static-libs '
    cf '    -xscreensaver -zemberek"'
    cf ''
    cf '#printer'
    cf 'USE="${USE} -cups -foomaticdb -scanner"'
    cf ''
    cf '#laptop'
    
    case ${type} in
    laptop)
        cf 'USE="${USE} bluetooth irda pcmcia wifi"'
    ;;
    pc)
        cf 'USE="${USE} -bluetooth -irda -pcmcia -wifi"'
    ;;
    esac
    
    cf ''
    cf '#internet'
    cf 'USE="${USE} -aim -icq -imap -irc -jabber -msn -oscar -rss -slp -yahoo"'
    cf ''
    
    case ${setup} in
    normal)
        cf '#codecs'
        cf 'USE="${USE} a52 aac avi dts dv encode ffmpeg flac gsm lame '
        cf '    mad matroska mp3 mp4 mpeg musepack ogg openal quicktime real '
        cf '    speex theora vorbis win32codecs x264 xvid"'
        cf ''
        cf '#multimedia'
        cf 'USE="${USE} alsa audiofile cdda cddb cdr dri dvb dvd dvdr '
        cf '    fam -jack ipod -mjpeg -mp3rtp musicbrainz network -pulseaudio '
        cf '    sdl -v4l -v4l2 vcd vpx -wmf xine"'
        cf ''
        cf '#X'
        cf 'USE="${USE} cairo dga gif gtk opengl svg tiff X xinerama xpm"'
        cf ''
        cf '#xfce'
        cf 'USE="${USE} session startup-notification thunar xfce -gnome '
        cf '    -kde -nautilus -qt3support -qt4"'
    ;;
    basic)
        cf '#codecs'
        cf 'USE="${USE} -a52 -aac -avi -dts -dv -encode -ffmpeg -flac '
        cf '    -gsm -lame -mad -matroska -mp3 -mp4 -mpeg -musepack -ogg -openal '
        cf '    -quicktime -real -speex -theora -vorbis -win32codecs -x264 -xvid"'
        cf ''
        cf '#multimedia'
        cf 'USE="${USE} alsa -audiofile -cdda -cddb cdr dri -dvb dvd '
        cf '    dvdr fam -jack -ipod -mjpeg -mp3rtp -musicbrainz network -pulseaudio '
        cf '    sdl -v4l -v4l2 -vcd -vpx -wmf -xine"'
        cf ''
        cf '#X'
        cf 'USE="${USE} -cairo -dga -gif -gtk -opengl -svg -tiff -X -xinerama -xpm"'
        cf ''
        cf '#no desktop environment'
        cf 'USE="${USE} -gnome -kde -nautilus -qt3support -qt4 '
        cf '    -startup-notification -thunar -xfce"'
    ;;
    esac
    
    cf ''
    
    case ${arch} in
    amd64)
        cf '#64bit'
        cf 'USE="${USE} multilib"'
    ;;
    esac
    
    cf ''
    cf 'VIDEO_CARDS="vesa"'
    cf 'INPUT_DEVICES="evdev"'
        case ${keymap} in
        trq|trf)
            cf 'LINGUAS="tr"'
        ;;
        us)
            cf 'LINGUAS="en"'
        ;;
        esac
    cf 'AUTOCLEAN="yes"'
    cf 'CONFIG_PROTECT="/etc /etc/fstab /etc/hosts /etc/locale.gen 
    /etc/localtime /etc/rc.conf /etc/sudoers /etc/sysctl.conf 
    /etc/X11/xorg.conf.d /etc/portage/package.use /etc/conf.d/domainname 
    /etc/conf.d/hostname /etc/conf.d/hwclock /etc/conf.d/keymaps 
    /etc/conf.d/net /etc/modprobe.d/blacklist.conf /etc/portage/env 
    /etc/X11/gdm /usr/share/config/kdm"'
    cf 'PORTDIR="/usr/portage"'
    cf 'PORTAGE_TMPDIR="/var/tmp"'
    cf 'PORTAGE_COMPRESS="bzip2"'
    cf 'PORTAGE_COMPRESS_FLAGS="-9"'
    cf 'PORTAGE_NICENESS="15"'
    cf 'PORTAGE_RSYNC_INITIAL_TIMEOUT="10"'
    cf 'PORTAGE_RSYNC_RETRIES="5"'
    cf 'FEATURES="-ccache -distcc fixlafiles -news -parallel-fetch sandbox userpriv usersandbox"'
    cf 'GENTOO_MIRRORS="'${mirrorlist}'"'
    cf 'RSYNC="rsync://rsync2.us.gentoo.org rsync://rsync3.us.gentoo.org rsync://rsync25.us.gentoo.org"'
        if [ "${blimit}" -gt "0" ]; then
            cf 'FETCHCOMMAND="${FETCHCOMMAND} --limit-rate='${blimit}'k"'
            cf 'RESUMECOMMAND="${RESUMECOMMAND} --limit-rate='${blimit}'k"'
        fi
    cf 'EMERGE_DEFAULT_OPTS="--autounmask=y --autounmask-write=y --with-bdeps=y"'
        if [ "${setup}" == "normal" ]; then
            [[ "${type}" == "laptop" ]] && cf 'XFCE_PLUGINS="brightness menu trash"' || cf 'XFCE_PLUGINS="menu trash"'
        fi
    cf ''

    echo; eb2 "* "; eg2 "Creating"; er " package.use..."; sleep 0.5s

    fl "/etc/portage/package.use" "b" "d"

    cf "app-admin/conky hddtemp imlib mpd truetype weather-metar -wifi"
    cf "app-admin/gnome-system-tools nfs policykit"
    cf "app-admin/system-tools-backends policykit"
    cf "app-cdr/k3b alsa css dvd dvdr dvdread encode ffmpeg flac mp3 musepack musicbrainz vcd vorbis"
    cf "app-cdr/recorder dvdr vcd"
    cf "app-emulation/bochs vnc wxwidgets"
    cf "app-emulation/emul-linux-x86-java alsa X nsplugin"
    cf "app-emulation/libvirt network uml virtualbox libvirtd qemu"
    cf "app-emulation/wine fontconfig gphoto2"
    cf "app-office/abiword -collab openxml -plugins wordperfect"
    cf "app-office/gnumeric -perl -python"
    cf "app-office/lyx docbook dot html latex rtf dia"
    cf "app-office/planner libgda"
    cf "app-text/acroread nsplugin"
    cf "app-text/docbook-sgml-utils jadetex"
    cf "app-text/enchant aspell"
    cf "app-text/evince dvi t1lib"
    cf "app-text/tesseract tiff"
    cf "dev-db/mysql embedded"
    cf "dev-java/sun-jre-bin nsplugin"
    cf "dev-java/swt firefox"
    cf "dev-lang/perl ithreads"
    cf "dev-lang/python threads"
    cf "dev-lang/spidermonkey threadsafe"
    cf "dev-lang/swig guile"
    cf "dev-libs/glib -fam"
    cf "dev-libs/libcdio cddb"
    cf "dev-libs/libxslt crypt python"
    cf "dev-libs/xmlrpc-c curl libwww"
    cf "dev-python/PyQt4 sql webkit kde multimedia"
    cf "dev-python/pycairo numeric"
    cf "dev-vcs/git curl webdav -gtk"
    cf "games-board/pysolfc extra-cardsets"
    cf "games-engines/scummvm fluidsynth"
    cf "games-fps/quake3-data cdinstall"
    cf "games-strategy/ufo-ai doc editor"
    cf "games-strategy/wesnoth doc"
    cf "gnome-base/gdm remote consolekit"
    cf "gnome-base/gnome-applets gstreamer networkmanager policykit"
    cf "gnome-base/gnome-session branding"
    cf "gnome-base/gvfs fuse gdu -gphoto2 -http"
    cf "gnome-base/librsvg nsplugin"
    cf "gnome-extra/gnome-games artworkextra guile"
    cf "gnome-extra/libgsf thumbnail"
    cf "gnome-extra/nautilus-sendto -bluetooth"
    cf "gnustep-base/gnustep-back-cairo -glitz"
    cf "kde-base/dolphin thumbnail"
    cf "kde-base/kdelibs acl alsa semantic-desktop"
    cf "kde-base/kdebase-startkde xinerama"
    cf "kde-base/kdenetwork-meta -ppp"
    cf "kde-base/kdm consolekit"
    cf "kde-base/kopete -jingle msn oscar ssl yahoo"
    cf "kde-base/konqueror branding java thumbnail"
    cf "kde-base/okular djvu ebook jpeg pdf tiff"
    cf "kde-base/plasma-workspace -python"
    cf "kde-base/solid networkmanager"
    cf "media-gfx/blender blender-game"
    cf "media-gfx/digikam gphoto2"
    cf "media-gfx/gimp alsa curl dbus gimpprint gtkhtml jpeg mmx mng png python sse svg tiff"
    cf "media-gfx/gthumb gphoto2"
    cf "media-gfx/imagemagick -perl"
    cf "media-gfx/inkscape dia effects inkjar plugin postscript"
    cf "media-gfx/sane-backends gphoto2"
    cf "media-gfx/splashutils fbcondecor"
    cf "media-gfx/xsane gimp"
    cf "media-libs/clutter introspection"
    cf "media-libs/gd fontconfig jpeg png xpm"
    cf "media-libs/imlib2 nls zlib X"
    cf "media-libs/libcanberra gtk"
    cf "media-libs/libgphoto2 exif"
    cf "media-libs/libpng apng"
    cf "media-libs/libquicktime schroedinger"
    cf "media-libs/libvorbis aotuv"
    cf "media-libs/mesa g3dvl gallium llvm -motif pic vdpau xcb"
    cf "media-libs/phonon gstreamer"
    cf "media-libs/sdl-mixer midi mikmod timidity"
    cf "media-libs/sdl-sound physfs"
    cf "media-libs/urt gs"
    cf "media-libs/xine-lib dts imagemagick mng modplug vcd vidix xcb xvmc"
    cf "media-libs/win32codecs real"
    cf "media-plugins/alsa-plugins -pulseaudio"
    cf "media-plugins/audacious-plugins fluidsynth midi modplug musepack sid timidity wma"
    cf "media-sound/amarok embedded ipod lastfm mp3tunes"
    cf "media-sound/audacity midi id3tag twolame soundtouch"
    cf "media-sound/banshee ipod youtube wikipedia"
    cf "media-sound/lame -gtk"
    cf "media-sound/pulseaudio -avahi glib gnome"
    cf "media-sound/rhythmbox ipod musicbrainz upnp"
    cf "media-sound/sox id3tag"
    cf "media-sound/xmms2 -java -python -samba"
    cf "media-tv/freevo dvd gphoto2"
    cf "media-tv/linuxtv-dvb-apps -usb"
    cf "media-tv/mythtv lcd"
    cf "media-video/avidemux -qt4 alsa aac dts encode fontconfig gtk lame truetype vorbis x264 xv xvid"
    cf "media-video/chaplin transcode vcd"
    cf "media-video/dvdrip vcd subtitles"
    cf "media-video/ffmpeg -altivec amr dirac encode faac faad schroedinger theora threads v4l v4l2 vaapi vorbis -X x264 xvid"
    cf "media-video/gpac amr"
    cf "media-video/gnome-mplayer ipod"
    cf "media-video/gxine xcb"
    cf "media-video/mjpegtools yv12"
    cf "media-video/mplayer a52 aac aalib -altivec ass -cpudetection dts dvd -dxr3 encode faac -ipv6 mp3 quicktime real -samba theora truetype unicode v4l v4l2 vidix vorbis win32codecs X x264 xv xvid"
    cf "media-video/ogmrip ogm srt"
    cf "media-video/smplayer linguas_tr"
    cf "media-video/totem nsplugin"
    cf "media-video/transcode a52 -altivec dvd iconv imagemagick lzo mjpeg mp3 mpeg nuv ogg postproc quicktime vorbis xvid"
    cf "media-video/vlc a52 aac aalib -altivec dirac dvd ffmpeg flac fluidsynth fontconfig id3tag libass mp3 mpeg ogg opengl -samba schroedinger theora truetype twolame upnp v4l v4l2 vaapi vorbis win32codecs wma-fixed x264 xcb xv"
    cf "media-video/winki css dvd matroska mjpeg mp3 ogg vcd"
    cf "net-dialup/ppp atm ipv6"
    cf "net-dns/avahi autoipd mdnsresponder-compat"
    cf "net-dns/pdns-recursor lua"
    cf "net-nds/openldap gnutls"
    cf "net-fs/samba automount"
    cf "net-im/pidgin -gstreamer -perl -python"
    cf "net-irc/irssi -perl"
    cf "net-libs/libproxy -gnome -xulrunner"
    cf "net-libs/opal sip"
    cf "net-libs/ptlib wav"
    cf "net-misc/curl -ares gnutls libssh2 ldn"
    cf "net-misc/dhcp minimal"
    cf "net-misc/networkmanager connection-sharing dhcpcd resolvconf"
    cf "net-misc/ntp caps opentpd -ipv6"
    cf "net-misc/nxserver-freenx nxclient"
    cf "net-misc/wicd -pm-utils"
    cf "net-print/cups acl gnutls pam -perl ppds -python samba ssl"
    cf "net-print/gutenprint gimp ppds"
    cf "net-print/hplip minimal ppds scanner"
    cf "sci-astronomy/stellarium stars"
    cf "sci-visualization/gnuplot gd -pdf"
    cf "sys-apps/dbus X"
    cf "sys-apps/help2man -nls"
    cf "sys-apps/iproute2 -minimal"
    cf "sys-apps/pciutils -zlib"
    cf "sys-apps/pmount crypt"
    cf "sys-apps/shadow -pam"
    cf "sys-auth/consolekit policykit"
    cf "sys-auth/pambase consolekit"
    cf "sys-block/parted device-mapper"
    cf "sys-block/gparted dmraid fat hfs jfs mdadm ntfs reiser4 reiserfs xfs"
    cf "sys-devel/gcc -gtk -objc"
    cf "sys-devel/libperl ithreads"
    cf "sys-fs/ntfs3g acl ntfsprogs -external-fuse -suid"
    cf "sys-fs/udev extras"
    cf "sys-kernel/genkernel bash-completion"
    cf "sys-libs/glibc glibc-omitfp nptl nptlonly userlocales"
    cf "sys-power/cpufreqd acpi -lm_sensors"
        case ${arch} in
        i686)
            cf "www-plugins/adobe-flash 32bit -64bit"
        ;;
        amd64)
            cf "www-plugins/adobe-flash -32bit 64bit multilib"
        ;;
        esac
    cf "www-client/firefox -bindist custom-optimization -java linguas_tr"
    cf "www-client/opera qt-static"
    cf "x11-apps/xinit minimal"
    cf "x11-base/xorg-server kdrive -minimal xorg"
    cf "x11-drivers/nvidia-drivers gtk"
    cf "x11-libs/cairo cleartype -glitz xcb"
    cf "x11-libs/libX11 xcb"
    cf "x11-libs/qt-core optimized-qmake"
    cf "x11-misc/pcmanfm -gnome"
    cf "x11-misc/rss-glx -xscreensaver"
    cf "x11-misc/slim branding"
    cf "x11-misc/xscreensaver new-login -perl"
    cf "x11-terms/rxvt-unicode -perl"
    cf "x11-terms/aterm background"
    cf "x11-terms/xterm toolbar"
    cf "x11-wm/compiz fuse"
    cf "x11-wm/compiz-fusion emerald"
    cf "x11-wm/dwm savedconfig"
    cf "x11-wm/enlightenment xcomposite xrandr"
    cf "x11-wm/fluxbox -gnome -kde truetype -vim-syntax"
    cf "x11-wm/fvwm gtk2-perl netpbm"
    cf "x11-wm/windowmaker gnustep"
    cf "xfce-base/thunar -pcre xfce_plugins_trash"
    cf "xfce-base/xfdesktop thunar"
    cf "xfce-extra/xfce4-sensors-plugin hddtemp lm_sensors"

    dlt "/etc/make.conf"
    
    k_system
    k_kernel
    
    case "${grub}" in
    none)
        e="x"
    ;;
    [s:h]d[a-z] | [s:h]d[a-z][1-9] | [s:h]d[a-z][1-9][0-9] | [s:h]d[a-z][1-9][0-9][0-9])
        k_grub
    ;;
    esac
    
    k_needed
    [[ "${setup}" == "normal" ]] && { wm; k_nm; k_alsa; }
    
    echo; eb2 "* "; eg "Creating/Updating necessary configuration files..."; sleep 1s
    refresh

    liste="/etc/fstab /etc/hosts /etc/locale.gen /etc/localtime /etc/rc.conf /etc/sysctl.conf /etc/conf.d/domainname /etc/conf.d/hostname /etc/conf.d/hwclock /etc/conf.d/keymaps /etc/conf.d/net /etc/modprobe.d/blacklist.conf"

    for d in ${liste}
    do
        echo; er2 "      * "; eg "${d}"; sleep 0.5s
        
        case ${d} in
        /etc/conf.d/domainname|/etc/localtime)
            fl "${d}" "0" "d"
        ;;
        /etc/sysctl.conf)
            fl "${d}" "b" "d"
        ;;
        *)
            fl "${d}" "0" "0"
        ;;
        esac
        
        case ${d} in
        /etc/fstab)
            cp fstab.eg ${d}
        ;;
        /etc/hosts)
            sed -i s:"^127.0.0.1.*":"127.0.0.1      ${hostname}.${domainname} ${hostname} gentoo": ${d}
        ;;
        /etc/locale.gen)
            case ${keymap} in
            trq|trf)
                cf "tr_TR.UTF-8 UTF-8"
                cf "tr_TR ISO-8859-9"
            ;;
            us)
                cf "en_US.UTF-8 UTF-8"
                cf "en_US ISO-8859-1"
            ;;
            esac
            
            locale-gen &>/dev/null
        ;;
        /etc/localtime)
            case ${keymap} in
            trq|trf)
                ln -s /usr/share/zoneinfo/Turkey ${d}
                echo "Turkey" > /etc/timezone
            ;;
            us)
                ln -s /usr/share/zoneinfo/UTC ${d}
                echo "UTC" > /etc/timezone
            ;;
            esac
        ;;
        /etc/rc.conf)
            avoid_dup 'rc_hotplug="!net.*"'
            avoid_dup 'rc_logger="NO"'
            avoid_dup 'unicode="YES"'
            avoid_dup 'rc_sys=""'
            avoid_dup 'rc_tty_number=12'
            avoid_dup 'dbus_enable="YES"'
            avoid_dup 'hald_enable="NO"'
        ;;
        /etc/sysctl.conf)
            cf '## TCP SYN cookie protection'
            cf '## helps protect against SYN flood attacks'
            cf '## only kicks in when net.ipv4.tcp_max_syn_backlog is reached'
            cf 'net.ipv4.tcp_syncookies = 1'
            cf '## if not functioning as a router, there is no need to accept redirects or source routes'
            cf 'net.ipv4.conf.all.accept_redirects = 0'
            cf 'net.ipv4.conf.all.accept_source_route = 0'
            cf 'net.ipv4.conf.all.secure_redirects = 1'
            cf '## send redirects (not a router, disable it)'
            cf 'net.ipv4.conf.all.send_redirects = 0'
            cf '## Disable packet forwarding'
            cf 'net.ipv4.ip_forward = 0'
            cf '## protect against tcp time-wait assassination hazards'
            cf '## drop RST packets for sockets in the time-wait state'
            cf '## (not widely supported outside of linux, but conforms to RFC)'
            cf 'net.ipv4.tcp_rfc1337 = 1'
            cf '## source address verification (sanity checking)'
            cf '## helps protect against spoofing attacks'
            cf 'net.ipv4.conf.all.rp_filter = 1'
            cf 'net.ipv4.conf.default.rp_filter = 1'
            cf '## log martian packets'
            cf 'net.ipv4.conf.all.log_martians = 1'
            cf '## ignore echo broadcast requests to prevent being part of smurf attacks'
            cf 'net.ipv4.icmp_echo_ignore_broadcasts = 1'
            cf '## ignore bogus icmp errors'
            cf 'net.ipv4.icmp_ignore_bogus_error_responses = 1'
            cf '## Restrict potential illegal acces via links'
            cf ''
            cf 'vm.min_free_kbytes = 16384'
            
            case ${type} in
            pc)
                cf "vm.swappiness = 30"
                cf "vm.dirty_expire_centisecs = 600"
                cf "vm.dirty_writeback_centisecs = 600"
                cf "vm.dirty_background_ratio = 5"
                cf "vm.dirty_ratio = 20"
                cf "vm.laptop_mode = 0"
                cf "vm.vfs_cache_pressure = 50"
            ;;
            laptop)
                cf "vm.swappiness = 10"
                cf "vm.dirty_expire_centisecs = 6000"
                cf "vm.dirty_writeback_centisecs = 6000"
                cf "vm.dirty_background_ratio = 50"
                cf "vm.dirty_ratio = 90"
                cf "vm.laptop_mode = 5"
                cf "vm.vfs_cache_pressure = 50"
            ;;
            esac
            
            sysctl -p &>/dev/null
        ;;
        /etc/conf.d/domainname)
            avoid_dup 'DNSDOMAIN="'${domainname}'"'
            avoid_dup 'NISDOMAIN="'${domainname}'"'
        ;;
        /etc/conf.d/hostname)
            avoid_dup 'hostname="'${hostname}'"'
        ;;
        /etc/conf.d/hwclock)
            [[ -n "${windows}" ]] && avoid_dup 'clock="local"' || avoid_dup 'clock="UTC"'
            avoid_dup 'clock_systohc="YES"'
        ;;
        /etc/conf.d/keymaps)
            avoid_dup 'windowkeys="YES"'
            avoid_dup 'keymap="-u '${keymap}'"'
        ;;
        /etc/conf.d/net)
            avoid_dup 'dns_domain_lo="gentoo.powered"'
            
            if [ "${setup}" == "basic" ]; then
                for adapter in ${adapters_found}
                do
                    avoid_dup 'config_'${adapter}'="dhcp"'
                    avoid_dup 'dhcpcd_'${adapter}'="-t 10"'
                    avoid_dup 'mtu_'${adapter}'="1492"'
                done
            fi
        ;;
        /etc/modprobe.d/blacklist.conf)
            for d in amd76x_edac bcm43xx de4x5 dv1394 eepro100 eth1394 evbug \
            garmin_gps i2c_i801 ipv6 net-pf-10 ohci1394 pcspkr prism54 raw1394 \
            sbp2 snd_aw2 snd_intel8x0m snd_pcsp usbkbd usbmouse video1394
            do
                cf "blacklist ${d}"
            done
            
            cf "# framebuffers"
            for e in aty128fb atyfb radeonfb cirrusfb cyber2000fb cyblafb gx1fb \
            hgafb i810fb intelfb kyrofb lxfb matroxfb_base neofb nvidiafb pm2fb \
            rivafb s1d13xxxfb savagefb sisfb sstfb tdfxfb tridentfb vesafb vfb \
            viafb vt8623fb
            do
                cf "blacklist ${e}"
            done
            
            cf "# modems"
            for f in snd-atiixp-modem snd-intel8x0m snd-via82xx-modem
            do
                cf "blacklist ${f}"
            done

            cf "# watchdog drivers"
            for g in acquirewdt advantechwdt alim1535_wdt alim7101_wdt booke_wdt \
            cpu5wdt eurotechwdt i6300esb i8xx_tco ib700wdt ibmasr indydog iTCO_wdt \
            it8712f_wdt it87_wdt ixp2000_wdt ixp4xx_wdt machzwd mixcomwd mpc8xx_wdt \
            mpcore_wdt mv64x60_wdt pc87413_wdt pcwd pcwd_pci pcwd_usb s3c2410_wdt \
            sa1100_wdt sbc60xxwdt sbc7240_wdt sb8360 sc1200wdt sc520_wdt sch311_wdt \
            scx200_wdt shwdt smsc37b787_wdt softdog twl4030_wdt w83627hf_wdt \
            w83697hf_wdt w83697ug_wdt w83877f_wdt w83977f_wdt wafer5823wdt wdt \
            wdt_pci wm8350_wdt
            do
                cf "blacklist ${g}"
            done
        ;;
        esac
    done
    
    echo; emerge --config timezone-data

    echo; eb2 "* "; eg "Configuring locale settings..."; sleep 0.5s
    
    [[ -e "/etc/env.d/02locale" ]] && { cp /etc/env.d/02locale /etc/env.d/02locale.backup; rm -rf /etc/env.d/02locale; }
    
    case ${keymap} in
    trq|trf)
        echo 'LANG="tr_TR.UTF-8"' > /etc/env.d/02locale
        echo 'LC_MESSAGES="tr_TR.UTF-8"' >> /etc/env.d/02locale
    ;;
    us)
        echo 'LANG="en_US.UTF-8"' > /etc/env.d/02locale
        echo 'LC_MESSAGES="en_US.UTF-8"' >> /etc/env.d/02locale
    ;;
    esac
    
    fl "/etc/conf.d/consolefont" "0" "0"
    
    case ${keymap} in
    trq|trf)
        avoid_dup 'consolefont="iso09.16"'
    ;;
    us)
        avoid_dup 'consolefont="default8x16"'
    ;;
    esac
    
    rc-update add consolefont boot &>/dev/null

    echo; eb2 "* "; eg2 "Changing administrator "; er2 "(root)"; eg " password..."; sleep 0.5s

    echo "root:${rootpass}" | chpasswd

    echo; eb2 "* "; eg2 "Creating user "; er "${username}"; eg "..."; sleep 0.5s

    g_list="audio cdrom cdrw disk plugdev portage usb users video wheel"

    for g in ${g_list}; do
        c=$(grep "${g}" /etc/group | cut -d: -f1)
        if [ "${c}" == "${g}" ]; then
            [[ -z "${g_e}" ]] && g_e="${g}" || g_e="${g},${g_e}"
        fi
    done

    useradd -m -G ${g_e} -s $(which bash) ${username}

    echo "${username}:${userpass}" | chpasswd
    
    if [ -e "/etc/sudoers" ]; then
        echo "%users   ALL=(root) ALL" >> /etc/sudoers
        echo "%users   ALL=(root) NOPASSWD: $(which shutdown)" >> /etc/sudoers
        echo "%users   ALL=(root) NOPASSWD: $(which reboot)" >> /etc/sudoers
        echo "%users   ALL=(root) NOPASSWD: $(which halt)" >> /etc/sudoers
        echo "%users   ALL=(root) NOPASSWD: $(which nano)" >> /etc/sudoers
        echo "%users   ALL=(root) NOPASSWD: $(which emerge)" >> /etc/sudoers
    fi

    lff
    
    [[ ! -e /home/${username}/.bash_profile ]] && cp /etc/skel/.bash_profile /home/${username}/
    
    echo export MOZ_DISABLE_PANGO=1 >> /home/${username}/.bash_profile

    fl "/home/${username}/.bashrc" "0" "0"

    cp /etc/skel/.bashrc ${trg_file}
    
    cf ""
    cf "export XDG_CONFIG_HOME=\"/home/${username}/.config\""
    cf "alias reboot='sudo shutdown -r now'"
    cf "alias halt='sudo halt -pi'"
    cf "alias shutdown='sudo shutdown -h now'"
    cf "alias em='sudo emerge'"
    cf "alias emp='sudo emerge -pv'"
    cf "alias ems='sudo emerge --sync'"
    cf "alias emq='sudo emerge --quiet-build'"
    cf "alias nn='sudo nano'"
    cf "alias mc='sudo nano /etc/portage/make.conf'"
    cf "alias pu='sudo nano /etc/portage/package.use'"
    cf "alias pm='sudo nano /etc/portage/package.mask'"
    cf "alias pk='sudo nano /etc/portage/package.keywords'"

    cf ""
    cf 'PS1="\n\[\e[31;1m\][\[\e[37;1m\]\u\[\e[31;1m\]][\[\e[37;1m\]\w\[\e[31;1m\]]$ \[\e[0m\]"'
    cf ""
    
    [[ ! -e /root/.bash_profile ]] && cp /etc/skel/.bash_profile /root/

    umrg "dmidecode lafilefixer localepurge net-misc/ntp"
    #temp
    inst "mpg123"
    get_files "http://cache.gizmodo.com/assets/resources/mp3/Woman128.mp3"
    #temp
    k_check
    end
}

end() {
    fl "/etc/portage/make.conf" "0" "0"

    avoid_dup 'FEATURES="-ccache -distcc fixlafiles parallel-fetch sandbox userpriv usersandbox"'
    
    sed -i -e '\!^FETCHCOMMAND=.*$!d' -e '\!^RESUMECOMMAND=.*$!d' ${trg_file}
    
    case ${keymap} in
    trq|trf)
        echo; eb2 "* "; eg2 "Removing all localization files excluding "; er2 "Turkish"; eg "..."; sleep 1s; echo
    ;;
    us)
        echo; eb2 "* "; eg2 "Removing all localization files excluding "; er2 "English"; eg "..."; sleep 1s; echo
    ;;
    esac

    fl "/etc/locale.nopurge" "b" "d"
    
    cf "MANDELETE"
    cf "SHOWFREEDSPACE"
    cf "VERBOSE"
    cf ""
    
    case ${keymap} in
    trq|trf)
        cf "tr"
        cf "tr_TR"
        cf "tr_TR.UTF-8"
        cf "tr_TR ISO-8859-9"
    ;;
    us)
        cf "en"
        cf "en_US"
        cf "en_US.UTF-8"
        cf "en_US ISO-8859-1"
    ;;
    esac
    
    localepurge &>/dev/null

    cl
    
    [[ -z "${swap_part}" ]] && { swapoff /egswap &>/dev/null; rm -rf /egswap &>/dev/null; }
    
    eclean-dist
    
    echo; eb2 "* "; eg2 "Creating a small report at "; er2 "/home/${username}/report.txt"; eg "..."
    report
    
    er2 "* "; ey "Deleting temporary files..."; sleep 0.5s; echo
    
    rm -rf easygentoo.config *.DIGESTS *.eg *.md5sum *.tmp *.lst ${lt} ${vl} &>/dev/null
    mv *.tar.bz2 /home/${username}/ &>/dev/null
    mv ${eg} /home/${username}/ &>/dev/null
    mv ${profile} /home/${username}/ &>/dev/null
    mv ${compiled} /home/${username}/${compiled} &>/dev/null
    rm -rf /var/tmp/portage/* &>/dev/null

    chown -fPR ${username} /home/${username}/

    cl; eb2 "* "; ew "Setup has finished. Now your system is ready to use. Congratulations! :)"; echo; sleep 5s

    echo; ey2 "* "; er "Shutting down..."; echo; shutdown -h now
}

report() {
    rp="/home/${username}/report.txt"
    
    echo "Total installation time (uptime): $(uptime | tr ',' ' ' | awk '{print $3}')" >> ${rp}
    echo "Number of compiled packages: $(wc -l < ${compiled})" >> ${rp}
    echo "List of compiled packages: /home/${username}/${compiled}" >> ${rp}
    echo "Selected CPU architecture: ${arch}" >> ${rp}
    echo "Selected tarball: ${tarball}" >> ${rp}
    ((core--))
    echo "Total CPU cores: ${core}" >> ${rp}
    echo "Total RAM: ${ram_size} KB" >> ${rp}
    echo "" >> ${rp}
    [[ "${setup}" == "normal" ]] && { echo "Xfce is installed as a desktop environment." >> ${rp} && echo "" >> ${rp}; }
    echo "User: ${username}" >> ${rp}
    echo "User password: ${userpass}" >> ${rp}
    echo "Administrator (root) password: ${rootpass}" >> ${rp}
    echo "Domainname: ${domainname}" >> ${rp}
    echo "Hostname: ${hostname}" >> ${rp}
    echo "Keymap: ${keymap}" >> ${rp}

    if [ -n "${adapters_found}" ]; then
        echo "Network adapters: ${adapters_found}" >> ${rp}
    else
        echo "No network adapters found." >> ${rp}
    fi
    echo "" >> ${rp}
    echo "Default mirrors:" >> ${rp}
    
    for m in ${mirrorlist}
    do
        echo "    ${m}" >> ${rp}
    done
    
    echo "" >> ${rp}
    
        if [ "${blimit}" -gt "0" ]; then
            echo "Bandwidth limit used during setup: ${blimit} KB/s" >> ${rp}
        elif [ "${blimit}" == "0" ]; then
            echo "No bandwidth limit is used during setup." >> ${rp}
        fi
    
    echo "" >> ${rp}
    
    echo "Partitions used:" >> ${rp}

    if [ -n "${boot_part}" ]; then
        echo "    Partition: ${boot_part}, File System: ${boot_fs}" >> ${rp}
        echo "    Mount Point: ${boot_mp}, Label: ${boot_label}" >> ${rp}
        echo "" >> ${rp}
    fi

    if [ -n "${swap_part}" ]; then
        echo "    Partition: ${swap_part}, File System: ${swap_fs}" >> ${rp}
        echo "    Mount Point: ${swap_mp}, Label: ${swap_label}" >> ${rp}
        echo "" >> ${rp}
    fi

    if [ -n "${home_part}" ]; then
        echo "    Partition: ${home_part}, File System: ${home_fs}" >> ${rp}
        echo "    Mount Point: ${home_mp}, Label: ${home_label}" >> ${rp}
        echo "" >> ${rp}
    fi

    if [ -n "${root_part}" ]; then
        echo "    Partition: ${root_part}, File System: ${root_fs}" >> ${rp}
        echo "    Mount Point: ${root_mp}, Label: ${root_label}" >> ${rp}
        echo "" >> ${rp}
    fi

    if [ -e "extra.eg" ]; then
        while read name part label fs mp
        do
            echo "    Partition: ${part}, File System: ${fs}" >> ${rp}
            echo "    Mount Point: ${mp}, Label: ${label}" >> ${rp}
            echo "" >> ${rp}
        done < extra.eg
    fi
}

start

exit 0
